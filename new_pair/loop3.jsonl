{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        \n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    num_buckets = 0\n    for row in grid:\n        num_buckets += math.ceil(sum(row) / capacity)\n    return num_buckets"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    the number of ones in their binary representation in ascending order.\n    For similar numbers of ones, sort based on decimal value.\n\n    Args:\n    - arr: A list of non-negative integers\n\n    Returns:\n    - A sorted list of non-negative integers\n\n    Examples:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(num):\n        \"\"\"\n        Helper function to count the number of ones in the binary representation of a number.\n\n        Args:\n        - num: An integer\n\n        Returns:\n        - The number of ones in the binary representation of the number\n        \"\"\"\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                consonant_count += 1\n        \n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    consonants = set()\n    closest_vowel = ''\n    \n    # Find the consonants from the right side of the word\n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in vowels:\n            consonants.add(word[i])\n        else:\n            # Check if there are at least two consonants before the vowel\n            if len(consonants) >= 2:\n                closest_vowel = word[i]\n                break\n    \n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return 'No'\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Parameters:\n    lst (list): A non-empty list of integers.\n\n    Returns:\n    int: The sum of all odd elements in even positions.\n\n    Examples:\n    >>> solution([5, 8, 7, 1])\n    12\n    >>> solution([3, 3, 3, 3, 3])\n    9\n    >>> solution([30, 13, 24, 321])\n    0\n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if arr[i] >= 10 and arr[i] <= 99:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    \n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date is in the format mm-dd-yyyy\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = map(int, date.split('-'))\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        # Check if it's a leap year\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check if there are any whitespaces in the text\n    if ' ' in txt:\n        return txt.split(' ')\n    # Check if there are any commas in the text\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count the number of lowercase letters with odd order in the alphabet\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If the list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples:\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n\n    # Check if the list is empty or has only one element\n    if len(lst) < 2:\n        return True\n\n    # Check if the list has more than 1 duplicate of the same number\n    for num in lst:\n        if lst.count(num) > 1:\n            return False\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check if the intervals don't intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = min(end1, end2) - max(start1, start2) + 1\n    \n    # Check if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with your current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Get the dimensions of the grid\n    n = len(grid)\n    \n    # Create a visited matrix to keep track of visited cells\n    visited = [[False] * n for _ in range(n)]\n    \n    # Create a list to store the path\n    path = []\n    \n    # Find the minimum path\n    dfs(grid, visited, 0, 0, k, path)\n    \n    return path\n\n\ndef dfs(grid, visited, row, col, k, path):\n    # Base case: if k is 0, we have found the minimum path\n    if k == 0:\n        return True\n    \n    # Mark the current cell as visited\n    visited[row][col] = True\n    \n    # Add the value of the current cell to the path\n    path.append(grid[row][col])\n    \n    # Check if we can move right\n    if col + 1 < len(grid) and not visited[row][col + 1]:\n        if dfs(grid, visited, row, col + 1, k - 1, path):\n            return True\n    \n    # Check if we can move down\n    if row + 1 < len(grid) and not visited[row + 1][col]:\n        if dfs(grid, visited, row + 1, col, k - 1, path):\n            return True\n    \n    # Check if we can move left\n    if col - 1 >= 0 and not visited[row][col - 1]:\n        if dfs(grid, visited, row, col - 1, k - 1, path):\n            return True\n    \n    # Check if we can move up\n    if row - 1 >= 0 and not visited[row - 1][col]:\n        if dfs(grid, visited, row - 1, col, k - 1, path):\n            return True\n    \n    # If no valid move is possible, backtrack\n    visited[row][col] = False\n    path.pop()\n    \n    return False"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Returns a list of the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd_digit = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    \n    if has_odd_digit:\n        return product\n    else:\n        return 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(bracket)\n    return len(stack) < 2"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    Calculates the sum of squared numbers in a given list.\n    \n    Parameters:\n    lst (list): A list of numbers.\n    \n    Returns:\n    int: The sum of squared numbers in the list, rounded up to the nearest integer.\n    \n    Examples:\n    >>> sum_squares([1, 2, 3])\n    14\n    >>> sum_squares([1, 4, 9])\n    98\n    >>> sum_squares([1, 3, 5, 7])\n    84\n    >>> sum_squares([1.4, 4.2, 0])\n    29\n    >>> sum_squares([-2.4, 1, 1])\n    6\n    \"\"\"\n    sum_of_squares = 0\n    \n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        sum_of_squares += squared_num\n    \n    return sum_of_squares"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if len(txt) == 0:\n        return False\n    \n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    \n    words = txt.split()\n    last_word = words[-1]\n    if last_char in last_word:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Returns the largest index of an element which is not greater than or equal to the element immediately preceding it.\n    If no such element exists, returns -1.\n    \n    Args:\n    arr (list): A list of integers\n    \n    Returns:\n    int: The largest index of an element which is not greater than or equal to the element immediately preceding it,\n         or -1 if no such element exists.\n    \"\"\"\n    n = len(arr)\n    max_index = -1\n    \n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    \n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    if len(negatives) == 0:\n        largest_negative = None\n    else:\n        largest_negative = max(negatives)\n    \n    if len(positives) == 0:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positives)\n    \n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        if type(a) == int or type(a) == float:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(a) == str:\n            a = a.replace(\",\", \".\")\n            b = b.replace(\",\", \".\")\n            if float(a) > float(b):\n                return a\n            elif float(a) < float(b):\n                return b\n            else:\n                return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \n    Args:\n    n (int): The number to be evaluated\n    \n    Returns:\n    bool: True if n can be written as the sum of exactly 4 positive even numbers, False otherwise\n    \"\"\"\n    # Check if n is less than 8 or odd, return False\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Iterate through all possible combinations of 4 positive even numbers\n    for i in range(2, n//2 + 1, 2):\n        for j in range(2, n//2 + 1, 2):\n            for k in range(2, n//2 + 1, 2):\n                for l in range(2, n//2 + 1, 2):\n                    # Check if the sum of the 4 numbers is equal to n\n                    if i + j + k + l == n:\n                        return True\n    \n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    result = \"\"\n    consecutive_spaces = 0\n\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result += \"-\"\n        else:\n            if consecutive_spaces > 2:\n                result += \"-\"\n            elif consecutive_spaces > 0:\n                result += \"_\"\n            result += char\n            consecutive_spaces = 0\n\n    if consecutive_spaces > 2:\n        result += \"-\"\n    elif consecutive_spaces > 0:\n        result += \"_\"\n\n    return result"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    # Check if the file name contains more than three digits\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts: before and after the dot\n    parts = file_name.split('.')\n    \n    # Check if the substring before the dot is empty or doesn't start with a letter\n    if len(parts[0]) == 0 or not parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers. For all entries in the list, the function squares the integer entry if its index is a \n    multiple of 3 and cubes the integer entry if its index is a multiple of 4 and not a multiple of 3. The function does not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function then returns the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3], the output should be 6\n    For lst = [], the output should be 0\n    For lst = [-1,-5,2,-1,-5], the output should be -126\n    \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        if i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    fraction_x = Fraction(x)\n    fraction_n = Fraction(n)\n    product = fraction_x * fraction_n\n    return product.denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    list: The sorted list of integers.\n\n    Examples:\n    >>> order_by_points([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Calculates the sum of the digits of a given number.\n\n        Args:\n        num (int): An integer.\n\n        Returns:\n        int: The sum of the digits of the number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(planets[start_index+1:end_index])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number, otherwise return the value of y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    Args:\n    lst (list): A list of numbers\n    \n    Returns:\n    int: The sum of squares of odd numbers in the list\n    \n    Examples:\n    double_the_difference([1, 3, 2, 0]) -> 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) -> 0\n    double_the_difference([9, -2]) -> 81\n    double_the_difference([0]) -> 0\n    double_the_difference([]) -> 0\n    \"\"\"\n    sum_of_squares = 0\n    \n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    \n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Determines if a person correctly guessed the results of a number of matches.\n\n    Args:\n        game (list): A list of scores for each match.\n        guess (list): A list of guesses for each match.\n\n    Returns:\n        list: A list of the absolute differences between the guess and the score for each match.\n    \"\"\"\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    # Initialize variables to store the strongest extension and its strength\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    # Iterate through each extension in the list\n    for extension in extensions:\n        # Calculate the strength of the extension\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        # Update the strongest extension if the current extension is stronger\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    # Return the formatted string ClassName.StrongestExtensionName\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "import re\n\ndef cycpattern_check(first_word, second_word):\n    if not isinstance(first_word, str) or not isinstance(second_word, str):\n        raise ValueError(\"Both arguments must be strings\")\n\n    if len(first_word) < len(second_word):\n        return False\n\n    concatenated_word = first_word + first_word\n\n    pattern = re.escape(second_word)\n    match = re.search(pattern, concatenated_word)\n\n    return match is not None"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Args:\n        num (int): The input integer.\n\n    Returns:\n        tuple: A tuple containing the count of even and odd digits respectively.\n\n    Examples:\n        even_odd_count(-12) => (1, 1)\n        even_odd_count(123) => (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to a positive integer\n    num = abs(num)\n\n    # Iterate through each digit of the number\n    while num > 0:\n        digit = num % 10\n\n        # Check if the digit is even or odd\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        # Remove the last digit from the number\n        num //= 10\n\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        count = number // value\n        result += numeral * count\n        number -= value * count\n\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_chars = []\n    max_unique_chars = 0\n    max_unique_word = \"\"\n\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique_chars:\n            max_unique_chars = unique_count\n            max_unique_word = word\n        elif unique_count == max_unique_chars:\n            if word < max_unique_word:\n                max_unique_word = word\n    \n    return max_unique_word\n\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(remaining - need, 0)\n    \n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    expression = str(operand[0])\n\n    for i in range(1, len(operand)):\n        expression += operator[i-1] + str(operand[i])\n\n    return eval(expression)\n\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input is not a string\")\n\n    if s == \"\":\n        raise ValueError(\"Input string is empty\")\n\n    result = \"\"\n\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n\n    if len(result) > 0 and not result.isalpha():\n        result = result[::-1]\n\n    return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode(\"utf-8\"))\n        return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Check if a is greater than b and swap values if necessary\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Iterate over the range(a, b+1) and check each digit\n    for num in range(a, b+1):\n        # Convert the number to a string\n        num_str = str(num)\n\n        # Check each digit in the number\n        for digit in num_str:\n            # Convert each digit back to integer\n            digit = int(digit)\n\n            # Check if the digit is even and not already in the list\n            if digit % 2 == 0 and digit not in even_digits:\n                even_digits.append(digit)\n\n    # Sort the even digits list in ascending order\n    even_digits.sort()\n\n    return even_digits"}
