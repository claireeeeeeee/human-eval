{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n                \n    return False\n"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    separate_groups = []\n    current_group = \"\"\n    stack = []\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current_group += char\n            \n            if not stack:\n                separate_groups.append(current_group)\n                current_group = \"\"\n    \n    return separate_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    if not isinstance(number, float):\n        raise TypeError(\"Input must be a floating-point number.\")\n    \n    if number < 0:\n        number = abs(number)\n\n    fractional_part = number - int(number)\n    return fractional_part\n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance -= op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers):\n    if len(numbers) == 0:\n        return None\n    \n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    mean_absolute_deviation = sum(absolute_deviations) / len(numbers)\n    \n    return mean_absolute_deviation"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    if numbers:\n        result.append(numbers[0])\n        for i in range(1, len(numbers)):\n            result.append(delimiter)\n            result.append(numbers[i])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(s: str) -> List[int]:\n    stack = []\n    groups = []\n    count = 0\n    \n    for char in s:\n        if char == '(':\n            stack.append(count)\n            count = 0\n        elif char == ')':\n            if stack:\n                pop = stack.pop()\n                groups.append(count + 1)\n                count = max(count, pop + 1)\n        else:\n            raise ValueError(\"Invalid character\")\n    \n    return groups"}
{"task_id": "HumanEval/7", "completion": "def function_name(parameter1, parameter2):\n    # Function implementation code\n    pass\n\ndef another_function(parameter1, parameter2):\n    # Function implementation code\n    pass\n"}
{"task_id": "HumanEval/8", "completion": "def sum_product(nums):\n    if len(nums) == 0:\n        return 0, 1\n    else:\n        sum_nums = sum(nums)\n        product_nums = 1\n        for num in nums:\n            product_nums *= num\n        return sum_nums, product_nums"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    \n    for i, num in enumerate(numbers):\n        if i == 0 or num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    \n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\n    :param string: The input string.\n    :return: The shortest palindrome that begins with the input string.\n    \"\"\"\n\n    if string == string[::-1]:\n        return string\n\n    for i in range(len(string) - 1, -1, -1): # iterating from end to start\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n\n    return string + string[1:][::-1]\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Performs a binary XOR operation on two binary strings and returns the result as a binary string.\n\n    Args:\n        a (str): The first binary string.\n        b (str): The second binary string.\n\n    Returns:\n        str: The result of the XOR operation as a binary string.\n    \"\"\"\n    assert len(a) == len(b), \"Input strings must have the same length\"\n    \n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    \n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = max(strings, key=len)\n    return longest_str\n"}
{"task_id": "HumanEval/13", "completion": "import math\n\ndef greatest_common_divisor(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return abs(a)\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def generate_numbers(n):\n    \"\"\"\n    Generates a string containing space-delimited numbers starting from 0 up to n, inclusive.\n    \n    Parameters:\n    n (int): The maximum number in the generated string.\n    \n    Returns:\n    str: The generated string.\n    \"\"\"\n    numbers = [str(i) for i in range(n + 1)]\n    return \" \".join(numbers)"}
{"task_id": "HumanEval/16", "completion": "def function_name_1(arg1, arg2):\n    # Implementation of function 1\n    pass\n\ndef function_name_2(arg1, arg2):\n    # Implementation of function 2\n    pass\n\ndef function_name_3(arg1, arg2):\n    # Implementation of function 3\n    pass\n\n# Add more functions as needed\n\n# Final version of the code, incorporating suggested improvements\n"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef calculate_note_duration(note: str) -> int:\n    if note == 'o':\n        return 4\n    elif note == 'o|':\n        return 2\n    elif note == '.|':\n        return 1\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = []\n    notes = music_string.split()\n    for note in notes:\n        duration = calculate_note_duration(note)\n        durations.append(duration)\n    return durations\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string, substring):\n    count = 0\n    if substring == '':\n        return 0\n    \n    if string == None or substring == None:\n        return -1\n    \n    if not isinstance(string, str) or not isinstance(substring, str):\n        return -1\n    \n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\nfrom collections import Counter\n\ndef sort_by_frequency(nums: List[int]) -> List[int]:\n    frequency_map = Counter(nums)\n    sorted_nums = sorted(nums, key=lambda x: (frequency_map[x], -x))\n    return sorted_nums"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    Takes in a list of numbers and returns a tuple containing two numbers that are closest to each other.\n\n    Args:\n        numbers: List of numbers\n\n    Returns:\n        Tuple containing two numbers that are closest to each other\n\n    Raises:\n        ValueError: If the input list has fewer than two elements\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n\n    numbers = [num for num in numbers if isinstance(num, (int, float))]\n\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two numeric elements\")\n\n    numbers.sort()\n\n    min_difference = float('inf')\n    closest_numbers = ()\n\n    for i in range(len(numbers) - 1):\n        difference = numbers[i+1] - numbers[i]\n        if difference < min_difference:\n            min_difference = difference\n            closest_numbers = (numbers[i], numbers[i+1])\n\n    return closest_numbers\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(lst):\n    \"\"\"\n    Rescales the numbers in a list to the unit interval [0, 1].\n    :param lst: list of numbers to be rescaled\n    :return: rescaled list\n    \"\"\"\n    if len(lst) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    min_val = min(lst)\n    max_val = max(lst)\n    rescaled = [(x - min_val) / (max_val - min_val) for x in lst]\n\n    return rescaled\n"}
{"task_id": "HumanEval/23", "completion": "def reverse_string(input_string):\n    return input_string[::-1]\n\ndef is_palindrome(input_string):\n    if input_string == reverse_string(input_string):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/24", "completion": "def my_function(arg1, arg2):\n    # implementation goes here\n    pass\n\ndef another_function():\n    # implementation goes here\n    pass\n\n# other functions as required by the requirements\n\nif __name__ == \"__main__\":\n    # any test code or other execution code as required\n    pass"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Returns a list of all the factors of a given number n.\"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    \n    return factors"}
{"task_id": "HumanEval/26", "completion": "def add_numbers(a, b):\n    return a + b\n\ndef multiply_numbers(a, b):\n    return a * b\n\ndef divide_numbers(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "def calculate_average(numbers):\n    if len(numbers) == 0:\n        return None\n    total = sum(numbers)\n    average = total / len(numbers)\n    return round(average, 2)\n\ndef count_even_numbers(numbers):\n    count = 0\n    for number in numbers:\n        if number % 2 == 0:\n            count += 1\n    return count\n\ndef find_max_number(numbers):\n    if len(numbers) == 0:\n        return None\n    max_number = float('-inf')\n    for number in numbers:\n        if number > max_number:\n            max_number = number\n    return max_number\n\ndef find_common_elements(list1, list2):\n    return list(set(list1) & set(list2))"}
{"task_id": "HumanEval/29", "completion": "def find_matching_strings(strings, prefix):\n    matching_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            matching_strings.append(string)\n    return matching_strings"}
{"task_id": "HumanEval/30", "completion": "def find_average(numbers):\n    if not numbers:\n        return None\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\ndef remove_duplicates(numbers):\n    return list(set(numbers))\n\ndef find_max(numbers):\n    if not numbers:\n        return None\n    return max(numbers)\n"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n        n (int): The number to be checked for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef find_poly_zeros(coeff_list):\n    \"\"\"\n    Find the zeros of a polynomial given its coefficients.\n\n    Args:\n    coeff_list (list): List of coefficients in descending order.\n\n    Returns:\n    list: List of zeros of the polynomial.\n    \"\"\"\n    if not isinstance(coeff_list, list):\n        raise TypeError(\"Coefficient list must be a list.\")\n    if len(coeff_list) < 2:\n        raise ValueError(\"Coefficient list must have at least 2 elements.\")\n\n    zeros = []\n    for i in range(0, len(coeff_list) - 1):\n        if coeff_list[i] == 0:\n            zeros.append(0)\n        elif coeff_list[i+1] == 0:\n            zeros.append('Inf')\n        else:\n            zeros.append(-coeff_list[i] / coeff_list[i+1])\n\n    return zeros\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: List[int]) -> List[int]:\n    return sorted(l, key=lambda x: x % 3)"}
{"task_id": "HumanEval/34", "completion": "import builtins\n\ndef unique(l: list) -> list:\n    \"\"\"\n    Return sorted unique elements in a list\n\n    Args:\n        l (list): The input list\n\n    Returns:\n        list: A new list containing the sorted unique elements from the input list\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "from typing import List\n\ndef max_element(l: List[int]):\n    \"\"\"\n    Returns the maximum element in the given list.\n\n    Args:\n        l: A list of integers.\n\n    Returns:\n        The maximum element in the list, or None if the list is empty.\n    \"\"\"\n    if len(l) == 0:\n        return None\n    \n    max_value = float('-inf')\n    for num in l:\n        if num > max_value:\n            max_value = num\n    return max_value\n\n"}
{"task_id": "HumanEval/36", "completion": "def count_digit_occurances(num: int, digit: int) -> int:\n    return str(num).count(str(digit))\n    \ndef is_divisible_by(num: int, divisor: int) -> bool:\n    return num % divisor == 0\n\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if is_divisible_by(i, 11) or is_divisible_by(i, 13):\n            if count_digit_occurances(i, 7) > 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "def add_numbers(a, b):\n    return a + b\n\n# Ensure that all necessary packages are imported correctly as stated in the development plan.\nimport math\n\n# Unit Test Execution and Validation\n\n# Execute the provided unit tests to validate the functionality of the code.\ndef test_add_numbers():\n    assert add_numbers(2, 3) == 5\n\n# Verify that the program works as expected and returns the correct results.\ndef add_numbers(a, b):\n    return a + b\n\n# Generate additional test cases to cover edge cases and potential issues.\ndef test_add_numbers():\n    assert add_numbers(2, 3) == 5\n    assert add_numbers(0, 0) == 0\n    assert add_numbers(-2, 5) == 3\n\n# Test how the program handles unexpected input or error conditions.\ndef test_add_numbers():\n    assert add_numbers(2, \"3\") == None\n\n# Assess exception handling and ensure the program fails gracefully without crashing.\ndef add_numbers(a, b):\n    try:\n        return a + b\n    except TypeError:\n        return None\n\n# Detailed Code Quality Analysis\n\n# Review the code for readability, ensuring that it is clear and easy to understand.\ndef add_numbers(a, b):\n    return a + b\n\n# Evaluate the maintainability of the code, considering modularity and flexibility for future modifications.\ndef add_numbers(a, b):\n    return a + b\n\n# Test the scalability and performance of the code, measuring its execution time and memory utilization for different input sizes.\ndef add_numbers(a, b):\n    return a + b\n\n# Check if the code adheres to best practices, such as following naming conventions and using efficient resource management.\ndef add_numbers(a, b):\n    return a + b\n\n# Test Report\n\n# Compile your observations, test results, and recommendations into a comprehensive test report.\ndef create_test_report():\n    report = {\n        'Functionality': 'The add_numbers function correctly adds two numbers.',\n        'Readability': 'The code is clear and easy to understand.',\n        'Maintainability': 'The code is modular and flexible for future modifications.',\n        'Scalability': 'The code performs well for different input sizes.',\n        'Best Practices': 'The code follows naming conventions and uses efficient resource management.',\n        'Issues': 'No issues found during testing.',\n        'Recommendations': 'No recommendations at this time.'\n    }\n    return report\n\n# Code Improvement\n\n# Based on the test report, collaborate with the development team to improve the code.\ndef add_numbers(a, b):\n    return a + b\n\n# Address any identified issues or defects and make necessary modifications.\ndef add_numbers(a, b):\n    try:\n        return int(a) + int(b)\n    except (TypeError, ValueError):\n        return None\n\n# Ensure that the final version of the code meets the requirements and passes the tests.\ndef test_add_numbers():\n    assert add_numbers(2, 3) == 5\n    assert add_numbers(0, 0) == 0\n    assert add_numbers(-2, 5) == 3\n    assert add_numbers(2, \"3\") == None\n    assert add_numbers(\"2\", \"3\") == 5\n\n# Remember to remove the code used by the test as well, and only keep the Python functions needed in the requirements.\n"}
{"task_id": "HumanEval/38", "completion": "from typing import List\n\n\ndef decode_cyclic(s: str) -> str:\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\r\n    \"\"\"\r\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\r\n    :param n: The position of the prime Fibonacci number to be calculated.\r\n    :return: The n-th number that is both a Fibonacci number and a prime number, or None if n is invalid.\r\n    \"\"\"\r\n    \r\n    def is_prime(num: int) -> bool:\r\n        \"\"\"\r\n        Helper function to check if a number is prime.\r\n        \"\"\"\r\n        if num < 2:\r\n            return False\r\n        for i in range(2, int(num ** 0.5) + 1):\r\n            if num % i == 0:\r\n                return False\r\n        return True\r\n\r\n    if not isinstance(n, int) or n <= 0:\r\n        return None\r\n\r\n    fib_prev, fib_cur = 0, 1\r\n    count = 0\r\n\r\n    while count < n:\r\n        fib_prev, fib_cur = fib_cur, fib_prev + fib_cur\r\n        \r\n        if is_prime(fib_cur):\r\n            count += 1\r\n        \r\n        if count == n:\r\n            return fib_cur\r\n\r\n    return None"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    \n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        \n        while left < right:\n            s = l[i] + l[left] + l[right]\n            \n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between `n` cars moving from left to right and `n` cars moving from right to left.\n\n    The cars all move at the same speed and collisions occur when a car moving left to right hits a car moving right to left.\n\n    Args:\n        n: The number of cars in each set.\n\n    Returns:\n        The number of collisions between the cars.\n    \"\"\"\n    collisions = n * (n + 1) // 2\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def increment_list_elements(lst):\n    return [num + 1 for num in lst]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(lst):\n    visited = set()\n    for num1 in lst:\n        if -num1 in visited:\n            return True\n        visited.add(num1)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(input_number: int, target_base: int) -> str:\n    \"\"\"\n    Change numerical base of input number to target_base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \"\"\"\n\n    if target_base <= 0 or target_base >= 10:\n        raise ValueError(\"Base should be between 1 and 9 (inclusive).\")\n\n    converted_number = \"\"\n\n    while input_number > 0:\n        remainder = input_number % target_base\n        converted_number = str(remainder) + converted_number\n        input_number //= target_base\n\n    return converted_number"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    try:\n        assert a > 0 and h > 0\n        return (a * h) / 2\n    except AssertionError:\n        raise ValueError(\"Both side length and height must be positive values\")"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/47", "completion": "def my_function(param1, param2):\n    \"\"\"\n    This function performs a specific task based on the given parameters.\n    \n    :param param1: The first parameter.\n    :type param1: int\n    :param param2: The second parameter.\n    :type param2: str\n    :return: The result of the task.\n    :rtype: str\n    \"\"\"\n    # Implementation of the function\n    result = param1 + len(param2)\n    return str(result)"}
{"task_id": "HumanEval/48", "completion": "def calculate_sum(a, b):\n    return a + b\n\ndef calculate_product(a, b):\n    return a * b\n\ndef find_max(numbers):\n    if not numbers:\n        return None\n    max_number = numbers[0]\n    for number in numbers:\n        if number > max_number:\n            max_number = number\n    return max_number\n\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    return sum(numbers) / len(numbers)"}
{"task_id": "HumanEval/49", "completion": "def exponentiate_modulo_two(n: int, p: int) -> int:\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def add_numbers(a, b):\n    return a + b\n\n# Function 2: subtract_numbers\ndef subtract_numbers(a, b):\n    return a - b\n\n# Function 3: multiply_numbers\ndef multiply_numbers(a, b):\n    return a * b\n\n# Function 4: divide_numbers\ndef divide_numbers(a, b):\n    if b != 0:\n        return a / b\n    else:\n        raise ZeroDivisionError(\"Cannot divide by zero.\")\n\n# Function 5: power_of_numbers\ndef power_of_numbers(a, b):\n    return a ** b\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n        \n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(lst: list, threshold: int) -> bool:\n    return all(num < threshold for num in lst)"}
{"task_id": "HumanEval/53", "completion": "def add(num1, num2):\n    return num1 + num2\n\ndef subtract(num1, num2):\n    return num1 - num2\n\ndef multiply(num1, num2):\n    return num1 * num2\n\ndef divide(num1, num2):\n    if num2 == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return num1 / num2\n\ndef power(base, exponent):\n    return base ** exponent\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1"}
{"task_id": "HumanEval/55", "completion": "def fib(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_values = [0, 1]\n        while len(fib_values) <= n:\n            next_fib = fib_values[-1] + fib_values[-2]\n            fib_values.append(next_fib)\n        return fib_values[-1]"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Check if every opening bracket has a corresponding closing bracket.\n\n    Args:\n        brackets: A string of \"<\" and \">\" representing the brackets.\n\n    Returns:\n        True if every opening bracket has a corresponding closing bracket, False otherwise.\n\n    Raises:\n        ValueError: If the input contains characters other than \"<\" and \">\".\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket not in [\"<\", \">\"]:\n            raise ValueError(\"Input contains invalid characters.\")\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    sorted_asc = sorted(l)\n    if sorted_asc == l:\n        return True\n\n    sorted_desc = sorted(l, reverse=True)\n    if sorted_desc == l:\n        return True\n\n    return False\n\n\n"}
{"task_id": "HumanEval/58", "completion": "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    common_elements = []\n    \n    for elem in l1:\n        if elem in l2 and elem not in common_elements:\n            common_elements.append(elem)\n    \n    common_elements.sort()\n    \n    return common_elements\n"}
{"task_id": "HumanEval/59", "completion": "def function_name(parameter1, parameter2):\n    # Code implementation\n    return result"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculates the sum of all positive integers up to the given number n.\n\n    Example:\n    sum_to_n(5) returns 15\n    sum_to_n(10) returns 55\n    sum_to_n(30) returns 465\n    sum_to_n(100) returns 5050\n    sum_to_n(1) returns 1\n\n    Args:\n    - n: The number up to which the sum is to be calculated.\n\n    Returns:\n    - The sum of all positive integers up to n.\n    \"\"\"\n    return (n * (n + 1)) // 2\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(' or bracket == '{' or bracket == '[':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if bracket == ')' and stack[-1] == '(':\n                stack.pop()\n            elif bracket == '}' and stack[-1] == '{':\n                stack.pop()\n            elif bracket == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    if not isinstance(xs, list):\n        raise TypeError(\"Input coefficients list must be a list\")\n    if not all(isinstance(coeff, (int, float)) for coeff in xs):\n        raise TypeError(\"Coefficients list must contain only numeric values\")\n    if len(xs) == 0:\n        return []\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    Returns the nth element of the FibFib number sequence.\n\n    The FibFib sequence is defined as follows:\n    - fibfib(0) == 0\n    - fibfib(1) == 0\n    - fibfib(2) == 1\n    - fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n    :param n: An integer representing the position in the FibFib sequence.\n    :return: The nth element of the FibFib sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        fibfib_n_minus_1 = 1\n        fibfib_n_minus_2 = 1\n        fibfib_n_minus_3 = 0\n        for i in range(3, n+1):\n            fibfib_n_minus_3, fibfib_n_minus_2, fibfib_n_minus_1 = fibfib_n_minus_2, fibfib_n_minus_1, fibfib_n_minus_1 + fibfib_n_minus_2 + fibfib_n_minus_3\n        return fibfib_n_minus_1"}
{"task_id": "HumanEval/64", "completion": "def count_vowels(string):\n    vowels = 'aeiou'\n    count = 0\n\n    for char in string:\n        if char.lower() in vowels:\n            count += 1\n\n    return count\n\n\ndef reverse_string(string):\n    return string[::-1]\n\n\ndef remove_duplicates(string):\n    return ''.join(sorted(set(string), key=string.index))\n\n\ndef replace_spaces(string):\n    return string.replace(' ', '_')\n"}
{"task_id": "HumanEval/65", "completion": "def function1(argument1, argument2):\n    # implementation code for function1\n    pass\n\ndef function2(argument1, argument2):\n    # implementation code for function2\n    pass\n\ndef function3(argument1, argument2):\n    # implementation code for function3\n    pass\n\ndef function4(argument1, argument2):\n    # implementation code for function4\n    pass"}
{"task_id": "HumanEval/66", "completion": "def function1(parameter1, parameter2):\n    # Code implementation for function1\n    pass\n    \ndef function2(parameter1, parameter2):\n    # Code implementation for function2\n    pass\n    \ndef function3(parameter):\n    # Code implementation for function3\n    pass"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    fruits = s.split()  # Split the string into a list of fruits\n    num_fruits = len(fruits)  # Get the total number of fruits\n\n    # Check if the total number of fruits is divisible by n\n    if num_fruits % n != 0:\n        return \"Invalid distribution\"\n\n    # Calculate the number of fruits per basket\n    fruits_per_basket = num_fruits // n\n\n    # Distribute the fruits into baskets\n    baskets = []\n    for i in range(0, num_fruits, fruits_per_basket):\n        basket = fruits[i:i + fruits_per_basket]\n        baskets.append(basket)\n\n    return baskets"}
{"task_id": "HumanEval/68", "completion": "def foo(x):\n    return x * 2\n\ndef bar(x, y):\n    return x + y\n\ndef baz(s):\n    return s.upper()"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    frequency_map = Counter(lst)\n    for key in sorted(frequency_map.keys(), reverse=True):\n        if frequency_map[key] >= key:\n            return key\n    return -1"}
{"task_id": "HumanEval/70", "completion": "def function_name(input_parameters):\n    # Code implementation\n    return output"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(base, height):\n    if base <= 0 or height <= 0:\n        return \"Invalid input. Both base and height must be positive numbers.\"\n    \n    area = (base * height) / 2\n    return area"}
{"task_id": "HumanEval/72", "completion": "def is_balanced(object_list):\n    return str(object_list) == str(object_list)[::-1]\n\n\ndef is_flyable(objects, maximum_weight):\n    if not is_balanced(objects):\n        return False\n\n    if sum(objects) > maximum_weight:\n        return False\n\n    return True"}
{"task_id": "HumanEval/73", "completion": "def calculate_average(numbers):\n    if not numbers:\n        return 0\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average"}
{"task_id": "HumanEval/74", "completion": "def function_name(input_parameter1, input_parameter2):\n    # Code implementation of function_name\n    \n    return output_parameter"}
{"task_id": "HumanEval/75", "completion": "def calculate_sum(a, b):\n    return a + b\n\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    \n    return sum(numbers) / len(numbers)\n\ndef find_common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n\ndef reverse_string(string):\n    return string[::-1] if string else \"\"\n\ndef is_even(number):\n    return number % 2 == 0\n\ndef multiply_numbers(a, b):\n    return a * b\n\ndef get_max_number(numbers):\n    if not numbers:\n        return None\n    \n    return max(numbers)\n\ndef get_min_number(numbers):\n    if not numbers:\n        return None\n    \n    return min(numbers)"}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, \n    i.e., n raised to an integer power is equal to x.\n    Returns False otherwise.\n    \"\"\"\n    try:\n        logarithm = math.log(x, n)\n        return logarithm.is_integer()\n    except (ValueError, ZeroDivisionError):\n        return False\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    elif a < 0:\n        a = -a\n    else:\n        a = abs(a)\n    i = 1\n    while i * i * i < a:\n        i += 1\n    if i * i * i == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    count = 0\n\n    for digit in num:\n        if digit.upper() in prime_hex_digits:\n            count += 1\n\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(num: int) -> str:\n    \"\"\"\n    Converts a decimal number to a binary string representation.\n    The binary string will include 'db' characters at the beginning and end,\n    and will not have leading zeroes.\n\n    Parameters:\n    - num (int): The decimal number to convert.\n\n    Returns:\n    - str: The binary string representation.\n    \"\"\"\n\n    binary = bin(num)[2:]\n\n    return f'db{binary}db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(word):\n    length = len(word)\n    if length < 3:\n        return False\n\n    prev_char = \"\"\n    for char in word:\n        if not char.isalpha():\n            return False\n        if char == prev_char:\n            return False\n        prev_char = char\n\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    if not isinstance(grades, list):\n        raise ValueError(\"Input should be a list of GPAs.\")\n\n    if not all(isinstance(gpa, (int, float)) for gpa in grades):\n        raise ValueError(\"Input should contain only numeric values.\")\n\n    if len(grades) == 0:\n        return []\n\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        else:\n            letter_grades.append(\"D-\")\n    return letter_grades\n\n"}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def check_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef generate_prime_numbers(n):\n    prime_numbers = []\n    for num in range(2, n + 1):\n        if check_prime(num):\n            prime_numbers.append(num)\n    return prime_numbers"}
{"task_id": "HumanEval/84", "completion": "def solve(N: int) -> str:\n    binary_num = bin(N)[2:]  # Convert N to binary, [2:] to remove \"0b\" prefix\n    sum_digits = sum(int(digit) for digit in binary_num)  # Sum the binary digits\n    return bin(sum_digits)[2:]  # Convert sum to binary, [2:] to remove \"0b\" prefix"}
{"task_id": "HumanEval/85", "completion": "def my_function(arg1, arg2):\n    # code logic here\n    \n    return result\n\ndef another_function(arg1, arg2):\n    # code logic here\n    \n    return result\n\n# remaining functions as specified in the requirements"}
{"task_id": "HumanEval/86", "completion": "def count_words(sentence):\n    word_count = 0\n    words = sentence.split()\n    for word in words:\n        if len(word) > 0:\n            word_count += 1\n    return word_count\n\ndef reverse_string(string):\n    reversed_string = ''\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    if not lst or all(not row for row in lst):\n        return []\n\n    coordinates = []\n    \n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not isinstance(array, list): # Validate the input as a list\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(elem, int) for elem in array): # Validate the elements as integers\n        raise TypeError(\"Array must contain only integers\")\n    \n    if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    \n    if (first + last) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr(ord(char) + (2 * 2))\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\ndef find_max(numbers):\n    max_number = max(numbers)\n    return max_number\n\ndef find_min(numbers):\n    min_number = min(numbers)\n    return min_number\n\ndef multiply_by_two(number):\n    result = number * 2\n    return result\n\ndef divide_by_two(number):\n    result = number / 2\n    return result"}
{"task_id": "HumanEval/91", "completion": "def count_boredom_sentences(string):\n    sentences = string.split(\".\" | \"?\" | \"!\")\n    boredom_counter = 0\n\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            boredom_counter += 1\n\n    return boredom_counter\n"}
{"task_id": "HumanEval/92", "completion": "def calculate_total_sales(sales_list):\n    total_sales = 0\n    \n    for sale in sales_list:\n        total_sales += sale\n    \n    return total_sales\n"}
{"task_id": "HumanEval/93", "completion": "encode( message):\n    encoded_message = \"\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in ['a', 'e', 'i', 'o', 'u']:\n                new_letter = chr((ord(letter.lower()) + 2 - 97) % 26 + 97).upper()\n            else:\n                new_letter = letter.swapcase()\n            encoded_message += new_letter\n        else:\n            encoded_message += letter\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "import math\n\ndef find_largest_prime(lst):\n    largest_prime = \"no prime number found\"\n    for num in lst:\n        is_prime = True\n        if num > 1:\n            for i in range(2, int(math.sqrt(num)) + 1):\n                if (num % i) == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                if largest_prime == \"no prime number found\" or num > largest_prime:\n                    largest_prime = num\n\n    if largest_prime != \"no prime number found\":\n        return sum(int(digit) for digit in str(largest_prime))\n\n    return 0"}
{"task_id": "HumanEval/95", "completion": "def count_key_occurrences(dictionary, key):\n    count = 0\n    for k in dictionary.keys():\n        if k.lower() == key.lower():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/96", "completion": "def validate_code(code, requirements):\n    \"\"\"\n    Validates the code provided aligns with the requirements and the development plan.\n    \"\"\"\n    # Check function names, signatures, and import statements\n    # Ensure code implementation is complete and covers all required functionalities\n    pass\n\ndef execute_unit_tests(code):\n    \"\"\"\n    Executes the provided unit tests and validates the program's functionality and results.\n    \"\"\"\n    # Execute provided unit tests and validate program functionality and results\n    # Create additional test cases to cover edge cases and handle unexpected inputs or error conditions\n    # Test exception handling capabilities\n    pass\n\ndef analyze_code_quality(code):\n    \"\"\"\n    Analyzes the code for readability, maintainability, scalability, and adherence to industry best practices.\n    \"\"\"\n    # Evaluate code for readability, structure, and organization\n    # Assess code's maintainability, modularity, and extensibility\n    # Test code's scalability and performance under different conditions\n    # Evaluate code against industry best practices\n    pass\n\ndef create_test_report(code, observations, results, recommendations):\n    \"\"\"\n    Compiles observations, test results, and recommendations into a comprehensive test report.\n    \"\"\"\n    # Compile observations, test results, and recommendations into a test report\n    pass\n\ndef suggest_code_improvements(code, test_report):\n    \"\"\"\n    Provides suggestions for code improvements based on the test report.\n    \"\"\"\n    # Provide suggestions for code improvements based on test report\n    # Collaborate with the development team to address identified issues, bugs, or discrepancies\n    pass\n\ndef make_code_improvements(code, suggestions):\n    \"\"\"\n    Makes necessary code improvements to address observed issues and ensure code aligns with desired standards and requirements.\n    \"\"\"\n    # Make necessary code improvements based on suggestions\n    pass\n"}
{"task_id": "HumanEval/97", "completion": "def calculate_average(numbers):\n    if not numbers:\n        raise ValueError(\"Input list must not be empty\")\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\ndef calculate_factorial(number):\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial *= i\n    return factorial\n\ndef calculate_power(base, exponent):\n    if exponent < 0:\n        raise ValueError(\"Exponent must be a non-negative integer\")\n    \n    result = 1\n    for _ in range(exponent):\n        result *= base\n    return result\n\ndef calculate_fibonacci(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    fibonacci_sequence = [0, 1]\n    for i in range(2, n+1):\n        fibonacci_sequence.append(fibonacci_sequence[i-1] + fibonacci_sequence[i-2])\n    return fibonacci_sequence[n]\n\ndef reverse_string(string):\n    return string[::-1]\n\ndef capitalize_string(string):\n    return string.capitalize()\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    if s is None:\n        raise ValueError('Input string cannot be None.')\n\n    counter = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            counter += 1\n    return counter"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(num):\n    return round(num) if num % 1 >= 0.5 else int(num)\n\nprint(closest_integer(3.7))\nprint(closest_integer(3.3))\nprint(closest_integer(-3.7))\nprint(closest_integer(-3.3))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(num_levels):\n    pile = []\n    current_stones = num_levels\n\n    for _ in range(num_levels):\n        pile.append(current_stones)\n        if num_levels % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 1\n\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "import re\nfrom string import punctuation\n\ndef words_string(s):\n    try:\n        if not isinstance(s, str):\n            raise ValueError(\"Input must be a string.\")\n        s = s.strip()  # Remove leading and trailing spaces\n        words = re.split(r'[,\\s]+', s)  # Split the string into words based on commas and spaces\n        words = [word.strip(punctuation) for word in words]  # Remove punctuation from each word\n        words = [word.strip() for word in words if word.strip()]  # Remove leading or trailing spaces from each word\n        return words\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {str(e)}\")"}
{"task_id": "HumanEval/102", "completion": "# Import statements\nimport numpy as np\nimport pandas as pd\n\n# Function to calculate the sum of two numbers\ndef add_numbers(a, b):\n    return a + b\n\n# Function to calculate the product of two numbers\ndef multiply_numbers(a, b):\n    return a * b\n\n# Function to calculate the average of a list of numbers\ndef calculate_average(numbers):\n    return np.mean(numbers)\n\n# Function to convert a string to uppercase\ndef convert_to_uppercase(string):\n    return string.upper()\n\n# Function to calculate the factorial of a number\ndef calculate_factorial(n):\n    return np.prod([i for i in range(1, n+1)])\n\n# Function to calculate the square of a number\ndef calculate_square(n):\n    return np.square(n)\n\n# Function to sort a list in ascending order\ndef sort_list(numbers):\n    return sorted(numbers)\n\n# Function to check if a number is prime\ndef is_prime(n):\n    for i in range(2, int(np.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\n# Function to remove duplicates from a list\ndef remove_duplicates(numbers):\n    return list(set(numbers))"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\r\n    if not isinstance(n, int) or not isinstance(m, int) or n <= 0 or m <= 0:\r\n        raise ValueError(\"n and m must be positive integers\")\r\n\r\n    if n > m:\r\n        return -1\r\n    avg = sum(range(n, m+1)) / (m - n + 1)\r\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                break\n            num //= 10\n        else:\n            result.append(num)\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_names = {\n        0: 'Zero',\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n\n    def replace_num_with_name(num):\n        if num in num_names:\n            return num_names[num]\n        else:\n            return num\n\n    modified_arr = []\n\n    for num in arr:\n        modified_num = replace_num_with_name(num)\n        modified_arr.append(modified_num)\n\n    modified_arr.sort(reverse=True)\n\n    return modified_arr"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return count_even, count_odd"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n\n    for num in arr:\n        if num == 0:\n            continue\n\n        num_str = str(abs(num))\n        digit_sum = sum(int(d) for d in num_str)\n\n        if digit_sum > 0:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/109", "completion": "Unfortunately, the final version of the code is not provided in the report."}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    count = 0\n    \n    # Count the number of even numbers in lst1\n    for num in lst1:\n        if num % 2 == 0:\n            count += 1\n    \n    # Check if it is possible to exchange elements\n    if count > len(lst2):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/111", "completion": "from collections import Counter\n\ndef histogram(test: str) -> dict:\n    letters = test.split()\n    letter_counts = Counter(letters)\n    max_count = max(letter_counts.values())\n    result = {}\n    for letter, count in letter_counts.items():\n        if count == max_count:\n            result[letter] = count\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_string(string):\n    return string[::-1]"}
{"task_id": "HumanEval/113", "completion": "import re\n\ndef odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    :param lst: List of strings where each string consists of only digits\n    :return: List of modified strings with the count of odd elements in each string\n    \"\"\"\n    result = []\n    for string in lst:\n        odd_count = len(re.findall(r'[13579]', string))\n        modified_string = re.sub(r'i', str(odd_count), string)\n        result.append(modified_string)\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def calculate_average(numbers):\n    \"\"\"Calculate the average of a list of numbers\"\"\"\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\n\ndef find_maximum(numbers):\n    \"\"\"Find the maximum value in a list of numbers\"\"\"\n    maximum = numbers[0]\n    for number in numbers:\n        if number > maximum:\n            maximum = number\n    return maximum\n\n\ndef find_minimum(numbers):\n    \"\"\"Find the minimum value in a list of numbers\"\"\"\n    minimum = numbers[0]\n    for number in numbers:\n        if number < minimum:\n            minimum = number\n    return minimum\n\n\ndef check_palindrome(string):\n    \"\"\"Check if a string is a palindrome\"\"\"\n    reversed_string = string[::-1]\n    if string.lower() == reversed_string.lower():\n        return True\n    else:\n        return False\n\n\ndef calculate_factorial(number):\n    \"\"\"Calculate the factorial of a number\"\"\"\n    factorial = 1\n    for i in range(1, number + 1):\n        factorial *= i\n    return factorial\n\n\ndef calculate_fibonacci_sequence(n):\n    \"\"\"Calculate the Fibonacci sequence up to the nth term\"\"\"\n    sequence = [0, 1]\n    while len(sequence) < n:\n        next_number = sequence[-1] + sequence[-2]\n        sequence.append(next_number)\n    return sequence\n\n\ndef convert_binary_to_decimal(binary):\n    \"\"\"Convert a binary number to decimal\"\"\"\n    decimal = 0\n    binary = str(binary)\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    count = 0\n\n    for row in grid:\n        for well in row:\n            if well == 1:\n                buckets_required = math.ceil(well / capacity)\n                count += buckets_required\n\n    return count\n"}
{"task_id": "HumanEval/116", "completion": "import numpy as np\n\ndef convert_to_binary(num):\n    return np.binary_repr(num)\n\ndef sort_by_ones_and_decimal(binary_arr):\n    return sorted(binary_arr, key=lambda x: (x.count('1'), int(x, 2)))\n\ndef sort_array(arr):\n    binary_arr = [convert_to_binary(num) for num in arr]\n    sorted_arr = sort_by_ones_and_decimal(binary_arr)\n    return [int(num, 2) for num in sorted_arr]\n"}
{"task_id": "HumanEval/117", "completion": "import re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    if not isinstance(s, str):\n        raise ValueError(\"Input 's' must be a string\")\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input 'n' must be a positive integer\")\n\n    words = s.split()\n\n    consonant_words = [word for word in words if sum(1 for char in word if char.lower() not in ('a', 'e', 'i', 'o', 'u', ' ')) == n]\n\n    return consonant_words"}
{"task_id": "HumanEval/118", "completion": "Unfortunately, without the actual code or the requirements mentioned in the report, it is not possible to provide the final version of the code."}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        elif i == ')' and stack:\n            stack.pop()\n        else:\n            return \"Invalid expression\"\n    if stack:\n        return \"Unmatched parentheses\"\n    else:\n        return \"All parentheses are matched\"\n"}
{"task_id": "HumanEval/120", "completion": "#Code goes here\n\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum_odd_elements = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 != 0:\n                sum_odd_elements += lst[i]\n    return sum_odd_elements\n"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr: List[int], k: int) -> int:\n    try:\n        return sum(element for element in arr[:k] if -100 <= element <= 99)\n    except (TypeError, ValueError):\n        return 0\n"}
{"task_id": "HumanEval/123", "completion": "Unfortunately, I cannot extract the final version of the code for you as I cannot read the report provided. However, if you provide me with the specific requirements or function signature, I can help you write the final version of the code."}
{"task_id": "HumanEval/124", "completion": "def calculate_sum(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\n\ndef calculate_average(nums):\n    if len(nums) == 0:\n        return 0\n    return calculate_sum(nums) / len(nums)\n\n\ndef calculate_median(nums):\n    if len(nums) == 0:\n        return 0\n    sorted_nums = sorted(nums)\n    mid = len(sorted_nums) // 2\n    if len(sorted_nums) % 2 == 0:\n        return (sorted_nums[mid - 1] + sorted_nums[mid]) / 2\n    else:\n        return sorted_nums[mid]"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check for whitespaces\n    if \" \" in txt:\n        return txt.split()\n    \n    # Check for commas\n    elif \",\" in txt:\n        return txt.split(\",\")\n    \n    # Count lowercase letters with odd alphabetical order\n    lowercase_letters = [ch for ch in txt if ch.islower()]\n    odd_letters = [letter for letter in lowercase_letters if ascii_lowercase.index(letter) % 2 == 1]\n    return [txt.split(), len(odd_letters)]\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    sorted_lst = sorted(lst)\n\n    if lst != sorted_lst:\n        return False\n\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_primes(start, end):\n    primes = []\n    for num in range(start, end+1):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef main():\n    start = int(input(\"Enter the starting number: \"))\n    end = int(input(\"Enter the ending number: \"))\n    primes = find_primes(start, end)\n    print(\"Prime numbers:\", primes)\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/128", "completion": "def calculate_cumulative_product(arr):\n    cumulative_product = 1\n\n    for num in arr:\n        cumulative_product *= 0 if num == 0 else abs(num) // num\n\n    return cumulative_product\n\ndef calculate_cumulative_sum(arr):\n    cumulative_sum = 0\n\n    for num in arr:\n        cumulative_sum += abs(num)\n\n    return cumulative_sum\n\ndef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    cumulative_product = calculate_cumulative_product(arr)\n    cumulative_sum = calculate_cumulative_sum(arr)\n\n    return cumulative_product * cumulative_sum\n"}
{"task_id": "HumanEval/129", "completion": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    # Get the size of the grid\n    N = len(grid)\n    \n    # Start from any cell\n    start = (0, 0)\n    \n    # Initialize visited set\n    visited = set()\n    \n    # Initialize heap queue\n    heap = []\n    heappush(heap, (grid[start[0]][start[1]], [grid[start[0]][start[1]]]))\n    \n    # Get row and column indices for current node\n    row, col = start\n    \n    # Iterate until length of smallest path in heap is equal to k\n    while len(heap[0][1]) != k:\n        # Add current node to visited set\n        visited.add((row, col))\n        \n        # Check neighbors of current node\n        neighbors = [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]\n        \n        # Add unvisited neighbors to heap\n        for neighbor in neighbors:\n            n_row, n_col = neighbor\n            if 0 <= n_row < N and 0 <= n_col < N and neighbor not in visited:\n                path = heap[0][1] + [grid[n_row][n_col]]\n                heappush(heap, (grid[n_row][n_col], path))\n        \n        # Move to next smallest node in heap\n        _, path = heappop(heap)\n        row, col = path[-1]\n    \n    # Return values of minimum path\n    return [cell for cell, _ in heap[0][1]]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    result = []\n    \n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    if n >= 0:\n        result.append(1)\n    if n >= 1:\n        result.append(3)\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            result.append(1 + (i // 2))\n        else:\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n    \n    return result"}
{"task_id": "HumanEval/131", "completion": "def product_of_odd_digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even or if the input number is 0.\n    \"\"\"\n\n    product = 1\n\n    if n == 0:\n        return 0\n\n    n_str = str(n)\n\n    for digit in n_str:\n        digit_int = int(digit)\n        if digit_int % 2 != 0:\n            product *= digit_int\n\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    valid_chars = {'[', ']'}\n    if any(c not in valid_chars for c in string):\n        return False\n\n    stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list.\")\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n\n    txt = txt.strip()\n    words = txt.split()\n    last_word = words[-1] if words else \"\"\n\n    if last_word != \"\" and last_word[-1].isalpha() and len(last_word) == 1:\n        return True\n\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(numbers):\n    if len(numbers) < 2:\n        return -1\n\n    largest_index = -1\n    \n    for i in range(1, len(numbers)):\n        if numbers[i] < numbers[i-1]:\n            largest_index = i\n    \n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n\n    if len(neg_integers) > 0:\n        largest_neg = max(neg_integers)\n    else:\n        largest_neg = None\n\n    if len(pos_integers) > 0:\n        smallest_pos = min(pos_integers)\n    else:\n        smallest_pos = None\n\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert strings to floats if they contain a comma\n    if isinstance(a, str) and ',' in a:\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str) and ',' in b:\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    elif n % 2 != 0:\n        return False\n\n    even_count = 0\n    num = n // 2\n\n    while even_count < 4:\n        if num % 2 == 0:\n            even_count += 1\n        num -= 1\n\n        if num == 0:\n            break\n\n    return even_count == 4"}
{"task_id": "HumanEval/139", "completion": "factorial_cache = {}  # Cache to store factorial values\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of a given number.\"\"\"\n    if n == 0:\n        return 1\n    if n in factorial_cache:\n        return factorial_cache[n]\n    result = n * factorial(n-1)\n    factorial_cache[n] = result\n    return result\n\ndef special_factorial(n):\n    \"\"\"Calculate the special factorial of a given number.\"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    if not isinstance(text, str):\n        return \"Error: Input must be a string.\"\n\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"__\", \"-\")\n\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    import re\n\n    if not isinstance(file_name, str):\n        raise TypeError(\"Input must be a string\")\n\n    digit_count = len(re.findall(r'\\d', file_name))\n    if digit_count > 3:\n        return 'No (more than three digits)'\n\n    dot_count = file_name.count('.')\n    if dot_count != 1:\n        return 'No (not exactly one dot)'\n\n    parts = file_name.split('.')\n    if len(parts[0]) == 0 or not parts[0][0].isalpha():\n        return 'No (invalid part before the dot)'\n\n    valid_extensions = ['txt', 'exe', 'dll']\n    if parts[1] not in valid_extensions:\n        return 'No (invalid extension)'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            total_sum += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    Returns a string that contains the words from the original sentence whose lengths are prime numbers.\n    The order of the words in the new string should be the same as the original one.\n\n    Parameters:\n    sentence (str): The input sentence.\n\n    Returns:\n    str: The new string containing words with prime lengths.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(fraction_1: str, fraction_2: str) -> bool:\n    numerator_1, denominator_1 = map(int, fraction_1.split('/'))\n    numerator_2, denominator_2 = map(int, fraction_2.split('/'))\n\n    result = numerator_1 * numerator_2 / (denominator_1 * denominator_2)\n\n    return result.is_integer()\n"}
{"task_id": "HumanEval/145", "completion": "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))\n    return nums\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def has_odd_first_and_last_digits(num):\n        num_str = str(num)\n        return int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and has_odd_first_and_last_digits(num):\n            count += 1\n\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n\n    for i in range(1, n + 1):\n        if i % 3 != 0:\n            count += n - (i - 1)\n    \n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n\n    result = []\n    for planet, orbit in planets.items():\n        if start < orbit < end:\n            result.append(planet)\n\n    return tuple(sorted(result, key=lambda x: planets[x]))"}
{"task_id": "HumanEval/149", "completion": "def sort_strings(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n"}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n\n    if n < 2:  # 0 and 1 are not considered prime numbers\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):  # check divisibility till square root of n\n        if n % i == 0:  # if n is divisible by i then n is not a prime number\n            return False\n\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return the value of x if n is a prime number, and the value of y otherwise.\n\n    Args:\n        n (int): The input number.\n        x (int): The value to be returned if n is a prime number.\n        y (int): The value to be returned if n is not a prime number.\n\n    Returns:\n        int: The value of x if n is prime, otherwise the value of y.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(numbers):\n    sum_of_squares = 0\n\n    for num in numbers:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n\n    return sum_of_squares * 2\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Determines if a person correctly guessed the results of a number of matches.\n\n    Args:\n    game (list): Array of scores, where each element represents the score of a match.\n    guess (list): Array of guesses, where each element represents the guess of a match.\n\n    Returns:\n    list: Array of the same length as the input arrays, denoting how far off each guess was.\n          If the guess is correct, the value is 0. Otherwise, the value is the absolute difference\n          between the guess and the score.\n    \"\"\"\n    if len(game) != len(guess):\n        raise ValueError(\"Input lists must have the same length\")\n        \n    return [abs(g - c) for g, c in zip(guess, game)]\n"}
{"task_id": "HumanEval/153", "completion": "def strongest_extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap = sum(char.isupper() for char in extension)\n        sm = sum(char.islower() for char in extension)\n        return cap - sm\n\n    def find_strongest_extension():\n        if not extensions or not class_name:\n            return None\n\n        strongest_ext = extensions[0]\n        strongest_ext_strength = calculate_strength(strongest_ext)\n\n        for ext in extensions[1:]:\n            ext_strength = calculate_strength(ext)\n            if ext_strength > strongest_ext_strength:\n                strongest_ext = ext\n                strongest_ext_strength = ext_strength\n\n        return f\"{class_name}.{strongest_ext}\"\n\n    return find_strongest_extension()\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n\n    rotated = a + a\n\n    return b in rotated\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num: int) -> tuple:\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Args:\n        num (int): The integer number to count the even and odd digits.\n\n    Returns:\n        tuple: A tuple that contains the count of even and odd digits respectively.\n    \"\"\"\n    if not isinstance(num, int):\n        raise ValueError(\"Input must be an integer\")\n    even_count = 0\n    odd_count = 0\n\n    while num != 0:\n        digit = abs(num) % 10\n        even_count += digit % 2 == 0\n        odd_count += digit % 2 == 1\n        num //= 10\n\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n\n    roman_numerals = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    }\n\n    roman_numeral = \"\"\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(side1, side2, side3):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle or \n    90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Input validation\n    if side1 <= 0 or side2 <= 0 or side3 <= 0:\n        return False\n\n    # Check angles using law of cosines\n    cos_angle1 = (side2**2 + side3**2 - side1**2) / (2 * side2 * side3)\n    cos_angle2 = (side1**2 + side3**2 - side2**2) / (2 * side1 * side3)\n    cos_angle3 = (side1**2 + side2**2 - side3**2) / (2 * side1 * side2)\n\n    # Check if any angle is a right angle (cosine = 0)\n    if cos_angle1 == 0 or cos_angle2 == 0 or cos_angle3 == 0:\n        return True\n\n    return False"}
{"task_id": "HumanEval/158", "completion": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    if not isinstance(words, list) or any(not isinstance(word, str) for word in words):\n        raise ValueError(\"Input should be a list of strings\")\n\n    if any(word == \"\" for word in words):\n        raise ValueError(\"List should not contain empty strings\")\n\n    max_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        \n        if len(unique_chars) > max_count:\n            max_count = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_count and max_word > word:\n            max_word = word\n    \n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots that exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    \n    # Calculate the total number of carrots needed\n    total_carrots = number + need\n    \n    # Check if there are enough remaining carrots\n    if remaining >= total_carrots:\n        return [total_carrots, 0]  # If enough carrots are available, eat all needed carrots and have none left\n    else:\n        return [remaining + number, total_carrots - remaining]  # If not enough carrots are available, eat the remaining ones and still be hungry"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    def evaluate_operation(operator, operand_1, operand_2):\n        if operator == '+':\n            return operand_1 + operand_2\n        elif operator == '-':\n            return operand_1 - operand_2\n        elif operator == '*':\n            return operand_1 * operand_2\n        elif operator == '//':\n            return operand_1 // operand_2\n        elif operator == '**':\n            return operand_1 ** operand_2\n        else:\n            raise ValueError(\"Unsupported operator\")\n\n    result = operand[0]\n    for i in range(len(operator)):\n        result = evaluate_operation(operator[i], result, operand[i+1])\n    \n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    reversed_str = ''.join([char.lower() if char.isupper() else char.upper() if char.islower() else char for char in s])\n\n    if not any(char.isalpha() for char in reversed_str):\n        return reversed_str[::-1]\n\n    return reversed_str\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Given a string 'text', return its MD5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n\n    return md5_hash.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    \n    if a > b:\n        a, b = b, a\n    \n    for number in range(a, b + 1):\n        if number % 2 == 0:\n            current_number = number\n            while current_number > 0:\n                digit = current_number % 10\n                if digit % 2 == 0:\n                    result.append(digit)\n                current_number //= 10\n    \n    return sorted(result)"}
