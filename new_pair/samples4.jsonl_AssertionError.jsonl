{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "result": "failed: local variable 'balance' referenced before assignment (type: UnboundLocalError)", "passed": false}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    degree = len(xs) - 1\n    if degree % 2 != 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n\n    largest_non_zero_coeff = max([abs(coeff) for coeff in xs[:-1]])\n    x1 = 0\n    x2 = math.ceil(math.sqrt(largest_non_zero_coeff))\n\n    while abs(x1 - x2) >= 0.0001:\n        mid = (x1 + x2) / 2\n        value = poly(xs, mid)\n        if abs(value) < 0.000001:\n            return round(mid, 2)\n        elif value < 0:\n            x1 = mid\n        else:\n            x2 = mid\n\n    return round((x1 + x2) / 2, 2)", "result": "failed: Polynomial must have even number of coefficients (type: ValueError)", "passed": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S: str):\n    sentences = re.split('\\.|\\?|!', S)\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if len(words) > 0 and words[0] == 'I':\n            boredom_count += 1\n    return boredom_count", "result": "failed: name 're' is not defined (type: NameError)", "passed": false}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1 for x in arr]", "result": "failed: invalid syntax (<string>, line 28) (type: SyntaxError)", "passed": false}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    count = 0\n    for row in grid:\n        count += row.count(1)\n    return math.ceil(count / capacity)", "result": "failed: name 'math' is not defined (type: NameError)", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    seq = [0]*(n+1)\n    if n >= 1:\n        seq[1] = 1\n    if n >= 2:\n        seq[2] = 3\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            seq[i] = 1 + i//2\n        else:\n            seq[i] = seq[i-1] + seq[i-2] + seq[i+1]\n    return seq", "result": "failed: list index out of range (type: IndexError)", "passed": false}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    result = float(x) * float(n)\n    return result.is_integer()\n", "result": "failed: could not convert string to float: '1/5' (type: ValueError)", "passed": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))\n", "result": "failed: invalid literal for int() with base 10: '-' (type: ValueError)", "passed": false}
