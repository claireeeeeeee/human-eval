{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stack = []\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if len(stack) == 0:\n                start = i\n            stack.append(i)\n        elif paren_string[i] == ')':\n            if len(stack) == 0:\n                continue\n            stack.pop()\n            if len(stack) == 0:\n                groups.append(paren_string[start:i+1])\n    return groups\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    interspersed = []\n    for i in range(len(numbers)):\n        interspersed.append(numbers[i])\n        if i < len(numbers)-1:\n            interspersed.append(delimeter)\n    return interspersed"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    nested_parens = paren_string.split()\n    depths = []\n    for group in nested_parens:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n\n    sum_result = 0\n    product_result = 1\n\n    for number in numbers:\n        sum_result += number\n        product_result *= number\n\n    return sum_result, product_result"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    maximums = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(num, current_max)\n        maximums.append(current_max)\n    return maximums\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    longest_suffix = \"\"\n    for i in range(len(string), -1, -1):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            longest_suffix = suffix\n            break\n    prefix = string[:i]\n    return string + prefix[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if strings:\n        return max(strings, key=len)\n    return None"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    remainder = a % b\n    while remainder != 0:\n        a = b\n        b = remainder\n        remainder = a % b\n    return b"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefix = string[:i]\n        prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\r\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    length = len(substring)\n    for i in range(len(string) - length + 1):\n        if string[i:i+length] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sort_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sort_nums)\n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_difference = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers)-1):\n        difference = numbers[i+1] - numbers[i]\n        if difference < min_difference:\n            min_difference = difference\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = []\n    for num in numbers:\n        scaled_num = (num - min_num) / (max_num - min_num)\n        scaled_numbers.append(scaled_num)\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_list = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_list.append(value)\n    return filtered_list"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n < 2:\n        return 1\n    largest_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    degree = len(xs) - 1\n    if degree % 2 != 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n\n    largest_non_zero_coeff = max([abs(coeff) for coeff in xs[:-1]])\n    x1 = 0\n    x2 = math.ceil(math.sqrt(largest_non_zero_coeff))\n\n    while abs(x1 - x2) >= 0.0001:\n        mid = (x1 + x2) / 2\n        value = poly(xs, mid)\n        if abs(value) < 0.000001:\n            return round(mid, 2)\n        elif value < 0:\n            x1 = mid\n        else:\n            x2 = mid\n\n    return round((x1 + x2) / 2, 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    return [sorted_values.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    max = l[0]\n    for num in l:\n        if num > max:\n            max = num\n    return max"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for num in range(n):\n        if (num % 11 == 0 or num % 13 == 0) and '7' in str(num):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    sorted_even = sorted(l[::2])  # sort the even indices of the list\n    result = [val if i % 2 == 1 else sorted_even[i//2] for i, val in enumerate(l)]  # construct the final list\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(s)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    fib1 = 0\n    fib2 = 1\n    while count < n:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib1):\n            count += 1\n\n    return fib1"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"Function to check if there are three distinct elements in the list that sum to zero\"\"\"\n    return len([x for x in l if -x in l]) >= 3"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        for i in range(3, n+1):\n            d = a + b + c + d\n            a, b, c = b, c, d\n        return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        middle = len(l) // 2\n        return (l[middle - 1] + l[middle]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    if text == '':\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p.\n    \"\"\"\n    power_of_2 = 1\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * power_of_2) % p\n        power_of_2 = (power_of_2 * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    sequence = [0, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    while n % 2 == 0:\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 2\n    return n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    if len(stack) > 0:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        sequence = [0, 0, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence[n]"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowel_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if s[-1].lower() in vowels:\n        vowel_count += 1\n    for char in s[:-1]:\n        if char.lower() in vowels:\n            vowel_count += 1\n    return vowel_count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    Given a string representing the number of apples and oranges in a fruit basket, and an integer representing the \n    total number of fruits in the basket, return the number of mango fruits in the basket.\n\n    Args:\n    s (str): String representing the number of apples and oranges in the basket.\n    n (int): Total number of fruits in the basket.\n\n    Returns:\n    int: Number of mango fruits in the basket.\n    \"\"\"\n    import re\n\n    # Extract the number of apples and oranges using regex\n    apples = int(re.findall(r'\\b(\\d+)\\b\\W+(?:apple)', s)[0])\n    oranges = int(re.findall(r'\\b(\\d+)\\b\\W+(?:orange)', s)[0])\n\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n    \n    even_nums = [num for num in arr if num % 2 == 0]\n    if not even_nums:\n        return []\n    \n    min_val = min(even_nums)\n    min_index = arr.index(min_val)\n    \n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    result = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n\n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    return sum(arr[i] != arr[-(i+1)] for i in range(len(arr) // 2))"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(''.join(lst1)) <= len(''.join(lst2)):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    result = 1\n    power = 0\n    while result < x:\n        result = n ** power\n        power += 1\n        if result == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return abs(a) ** (1/3) % 1 == 0"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    Check if the string is happy or not.\n    \n    Parameters:\n    s (str): The input string.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    \n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    def convert_to_letter_grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        elif gpa >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    letter_grades = [convert_to_letter_grade(grade) for grade in grades]\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for num in range(10**(n-1), 10**n):\n        if str(num)[0] == '1' or str(num)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]\n    binary_sum = sum(int(digit) for digit in binary)\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) < 2:\n        return array\n\n    if (array[0] + array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                cipher = chr((ord(char) - 65 + 2*2) % 26 + 65)\n            else:\n                cipher = chr((ord(char) - 97 + 2*2) % 26 + 97)\n            result += cipher\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S: str):\n    sentences = re.split('\\.|\\?|!', S)\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if len(words) > 0 and words[0] == 'I':\n            boredom_count += 1\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in \"aeiou\":\n                new_letter = chr(ord(letter) + 2)\n                if new_letter.isalpha():\n                    if letter.isupper():\n                        encoded_message += new_letter.upper()\n                    else:\n                        encoded_message += new_letter.lower()\n                else:\n                    encoded_message += letter\n            else:\n                if letter.isupper():\n                    encoded_message += letter.lower()\n                else:\n                    encoded_message += letter.upper()\n        else:\n            encoded_message += letter\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def get_digit_sum(num):\n        \"\"\"Return the sum of digits in a number.\"\"\"\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        return digit_sum\n    \n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    \n    if largest_prime is not None:\n        return get_digit_sum(largest_prime)\n    \n    return None"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n\n    lowercase_keys = []\n    uppercase_keys = []\n\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lowercase_keys.append(key)\n            elif key.isupper():\n                uppercase_keys.append(key)\n\n    if lowercase_keys and not uppercase_keys:\n        return True\n    elif uppercase_keys and not lowercase_keys:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a_last_digit = int(str(a)[-1])\n    b_last_digit = int(str(b)[-1])\n    return a_last_digit * b_last_digit"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(1, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        closest_int = int(value + 0.5)\n    else:\n        closest_int = int(value - 0.5)\n    return closest_int"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            pile.append(n + i + 1)\n        else:\n            pile.append(n + i)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.replace(',', ' ').split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    if x > y:\n        return -1\n\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)\n    return binary_average"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1 for x in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            total = 0\n            for j in range(1, i+1):\n                total += j\n            result.append(total)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = str(num)\n        digit_sum = sum(int(d) for d in digits if d != '-')\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr: # if the array is empty \n        return True\n        \n    n = len(arr) # length of the array \n    \n    sorted_arr = sorted(arr) # sorted array \n    \n    for i in range(n): # iterate through all possible right shift operations\n        shifted_arr = arr[n-i-1:] + arr[:n-i-1] # right shift operation\n        \n        if shifted_arr == sorted_arr: # if the shifted array is equal to the sorted array\n            return True\n            \n    return False # if no match is found after iterating through all possible right shift operations"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1: list, lst2: list):\n    even_set = set()\n    for num in lst2:\n        if num % 2 == 0:\n            even_set.add(num)\n\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            found_exchange = False\n            for num in even_set:\n                if num % 2 == 0:\n                    even_set.remove(num)\n                    lst1[i] = num\n                    found_exchange = True\n                    break\n            if not found_exchange:\n                return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letter_count = {}\n    max_count = 0\n\n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        \n        if letter_count[letter] > max_count:\n            max_count = letter_count[letter]\n    \n    result = {}\n    for letter, count in letter_count.items():\n        if count == max_count:\n            result[letter] = count\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    reversed_s = s[::-1]\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    is_palindrome = True if result == reversed(result) else False\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(\"the number of odd elements in the string {} of the input.\".format(count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    curr_sum = 0\n    min_sum = float('inf')\n\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n\n        if curr_sum > 0:\n            curr_sum = 0\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    count = 0\n    for row in grid:\n        count += row.count(1)\n    return math.ceil(count / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.lower() not in ['a', 'e', 'i', 'o', 'u'] and char.isalpha():\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    closest_vowel = ''\n    \n    for char in word[::-1]:\n        if char.lower() in vowels:\n            if any(consonant in word[word.index(char)::-1] for consonant in consonants):\n                closest_vowel = char.lower()\n                break\n    \n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                count -= 1\n    \n    if count == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if arr[i] >= 10 and arr[i] <= 99:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    odd_sequence = [num for num in sequence if num % 2 == 1]\n    return sorted(odd_sequence)\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt):\n    if not txt:\n        return []\n    \n    words = re.split(r'\\s+|,', txt)\n    if len(words) > 1:\n        return words\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    \n    for i in range(1, len(lst)-1):\n        if lst[i] == lst[i-1] and lst[i] == lst[i+1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        \"\"\"Returns True if n is a prime number, False otherwise.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if (n % i) == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    sign = 1\n    result = 0\n\n    if len(arr) == 0:\n        return None\n\n    for num in arr:\n        result += abs(num)\n        if num < 0:\n            sign *= -1\n\n    return result * sign"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    def backtrack(curr_x, curr_y, path, visited):\n        if len(path) == k:\n            return path\n        neighbors = get_neighbors(curr_x, curr_y)\n        neighbors.sort(key=lambda n: grid[n[0]][n[1]])\n        for neighbor in neighbors:\n            next_x, next_y = neighbor\n            if not visited[next_x][next_y]:\n                visited[next_x][next_y] = True\n                result = backtrack(next_x, next_y, path + [grid[next_x][next_y]], visited)\n                if result:\n                    return result\n                visited[next_x][next_y] = False\n        return None\n\n    def get_neighbors(x, y):\n        neighbors = []\n        if x > 0:\n            neighbors.append((x - 1, y))\n        if x < len(grid) - 1:\n            neighbors.append((x + 1, y))\n        if y > 0:\n            neighbors.append((x, y - 1))\n        if y < len(grid[0]) - 1:\n            neighbors.append((x, y + 1))\n        return neighbors\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = backtrack(i, j, [grid[i][j]], visited)\n            if result:\n                break\n            visited[i][j] = False\n        if result:\n            break\n    return result"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    seq = [0]*(n+1)\n    if n >= 1:\n        seq[1] = 1\n    if n >= 2:\n        seq[2] = 3\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            seq[i] = 1 + i//2\n        else:\n            seq[i] = seq[i-1] + seq[i-2] + seq[i+1]\n    return seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_product *= digit\n        n = n // 10\n    if odd_product == 1:\n        return 0\n    return odd_product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if stack and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) != len(string) and len(stack) != 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    rounded_lst = [int(round(num)) for num in lst]\n    squared_lst = [num**2 for num in rounded_lst]\n    return sum(squared_lst)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    last_char = txt.strip()[-1]\n    if not txt or not last_char.isalpha() or \" \" in txt.split()[-1]:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_ints = [num for num in lst if num < 0]\n    pos_ints = [num for num in lst if num > 0]\n\n    largest_negative = max(neg_ints) if neg_ints else None\n    smallest_positive = min(pos_ints) if pos_ints else None\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    \n    for i in range(2, n-5, 2):\n        if (n - i) % 2 == 0:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    while n > 0:\n        sub_factorial = 1\n        for i in range(1, n+1):\n            sub_factorial *= i\n        result *= sub_factorial\n        n -= 1\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    if \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    import re\n    pattern = \"^[a-zA-Z][\\w]*[.](txt|exe|dll)$\"\n    if re.match(pattern, file_name) and file_name.count('.') == 1 and file_name.count('\\d') <= 3:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst: list) -> int:\n    if len(lst) == 0:\n        return 0\n    summation = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            summation += lst[i]**2\n        if i % 4 == 0 and i % 3 != 0:\n            if lst[i] < 0:\n                summation += lst[i]**3\n            else:\n                summation -= lst[i]**3\n    return summation"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**(0.5)) + 1):\n        if n % i == 0:\n            return False\n    return True\n  \ndef words_in_sentence(sentence):\n    prime_words = []\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    result = float(x) * float(n)\n    return result.is_integer()\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\r\n    count = 0\r\n    for num in nums:\r\n        num_str = str(num)\r\n        if num > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\r\n            count += 1\r\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n-1):\n        if i % 3 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planet_list = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    if planet1 not in planet_list or planet2 not in planet_list:\n        return ()\n    \n    lower_index = planet_list.index(planet1)\n    upper_index = planet_list.index(planet2)\n    \n    if lower_index > upper_index:\n        lower_index, upper_index = upper_index, lower_index\n    \n    return tuple(planet_list[lower_index+1:upper_index])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    def filter_odd_length(lst):\n        return [word for word in lst if len(word) % 2 == 0]\n\n    def sort_by_length(lst):\n        return sorted(lst, key=lambda x: (len(x), x))\n\n    filtered_list = filter_odd_length(lst)\n    sorted_list = sort_by_length(filtered_list)\n\n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name: str, extensions: list) -> str:\n    if len(extensions) == 0:\n        return None\n\n    strongest_extensions = []\n    for extension in extensions:\n        CAP = sum(1 for letter in extension.upper() if letter.isalpha())\n        SM = sum(1 for letter in extension.lower() if letter.isalpha())\n        strength = CAP - SM\n\n        if not strongest_extensions:\n            strongest_extensions.append(extension)\n        \n        strongest_CAP = sum(1 for letter in strongest_extensions[0].upper() if letter.isalpha())\n        strongest_SM = sum(1 for letter in strongest_extensions[0].lower() if letter.isalpha())\n        strongest_strength = strongest_CAP - strongest_SM\n\n        if strength > strongest_strength:\n            strongest_extensions = [extension]\n        elif strength == strongest_strength:\n            strongest_extensions.append(extension)\n    \n    strongest_extension = strongest_extensions[0]\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_numeral_map = (\n        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n        (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1)\n    )\n\n    if not 1 <= number <= 1000:\n        return None\n\n    result = \"\"\n    for numeral, value in roman_numeral_map:\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    '''\n    return a**2 + b**2 == c**2\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_unique_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_unique_word):\n            max_unique_chars = unique_chars\n            max_unique_word = word\n\n    return max_unique_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_carrots = number + remaining\n    if total_carrots >= need:\n        return [number + need, total_carrots - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = \"\"\n    for i in range(len(operator)):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    result = eval(expression)\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    \n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    if a > b:\n        a, b = b, a\n    for i in range(a, b+1):\n        for digit in str(i):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    return sorted(even_digits)"}
