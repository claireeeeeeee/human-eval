{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    if not isinstance(numbers, list) or not all(isinstance(n, float) for n in numbers) or not isinstance(threshold, float):\n        raise ValueError(\"Invalid input\")\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(input_string: str) -> List[str]:\n    input_string = input_string.replace(\" \", \"\")\n    paren_groups = []\n    stack = []\n    \n    for i in range(len(input_string)):\n        if input_string[i] == \"(\":\n            stack.append(i)\n        \n        elif input_string[i] == \")\":\n            start = stack.pop()\n            group = input_string[start:i+1]\n            paren_groups.append(group)\n    \n    return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0\n    \n    mean = sum(numbers) / len(numbers)\n    deviation = (abs(x - mean) for x in numbers)\n    \n    return sum(deviation) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    return [x for pair in zip(numbers, [delimiter] * len(numbers)) for x in pair]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    nested_levels = []\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            nested_levels.append(open_count)\n            open_count -= 1\n    return nested_levels\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if len(numbers) == 0:\n        return (0, 1)\n    \n    sum_total = 0\n    product_total = 1\n    \n    for num in numbers:\n        sum_total += num\n        product_total *= num\n        \n    return (sum_total, product_total)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_elements = [numbers[0]]\n    current_max = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > current_max:\n            current_max = numbers[i]\n        max_elements.append(current_max)\n    \n    return max_elements"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(input_string: str) -> str:\n    if input_string == \"\":\n        return \"\"\n\n    if is_palindrome(input_string):\n        return input_string\n\n    for i in range(len(input_string) - 1, -1, -1):\n        if input_string[i:] == input_string[i::-1]:\n            break\n\n    palindrome = input_string + input_string[:i][::-1]\n    return palindrome\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result\n\n\nThe code is a function named `string_xor` that takes in two string inputs `a` and `b` and returns the result of performing a binary XOR operation on these inputs. It iterates through the characters of `a` and `b`, compares them at each position, and appends the result to the `result` string. The final `result` string is then returned.\n\nPlease note that I have removed the error handling and additional test cases mentioned in the report to provide a concise version of the code that satisfies the requirements."}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    if not isinstance(string, str):\n        return \"Invalid input\"\n    \n    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    music_notes = music_string.split()\n    beat_durations = [notes[note] for note in music_notes]\n    return beat_durations"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if substring == \"\":\n        return count\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    number_list = numbers.split()\n    number_list = sorted(number_list, key=lambda x: number_map[x])\n    return ' '.join(number_list)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_numbers(numbers: List[float]) -> Tuple[float, float]:\n    if not isinstance(numbers, list) or not all(isinstance(num, float) for num in numbers):\n        raise ValueError(\"Input should be a list of floating-point numbers\")\n\n    numbers.sort()\n    min_diff = float('inf')\n    closest_nums = ()\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_nums = (numbers[i], numbers[i+1])\n\n    return closest_nums"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if not numbers or len(numbers) < 2:\n        return []\n    \n    min_num = min(numbers)\n    max_num = max(numbers)\n\n    rescaled_list = [(num - min_num) / (max_num - min_num) for num in numbers]\n\n    return rescaled_list"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"}

{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, there are any two numbers closer to each other than the given threshold.\n\n    Args:\n        numbers: A list of floating-point numbers.\n        threshold: A floating-point number representing the maximum allowed difference between any two numbers.\n\n    Returns:\n        A boolean value indicating whether or not there are any two numbers in the list that are closer to each other than the threshold.\n    \"\"\"\n    if len(numbers) == 0:\n        return False\n\n    sorted_numbers = sorted(numbers)\n\n    i = 0\n    while i < len(numbers) - 1:\n        if abs(sorted_numbers[i] - sorted_numbers[i+1]) < threshold:\n            return True\n        i += 1\n\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_groups = []\n    stack = []\n    trimmed_string = paren_string.replace(\" \", \"\")\n\n    for char in trimmed_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if stack:\n                stack.pop()\n            if not stack:\n                paren_groups.append(trimmed_string[:trimmed_string.index(char) + 1])\n    return paren_groups\n"}
{"task_id": "HumanEval/2", "completion": "def subarray_sum_to_k(input_list: list, k: int):\n    if not isinstance(input_list, list) or not all(isinstance(i, int) for i in input_list) or not isinstance(k, int):\n        return \"Invalid input\"\n    result = []\n    for i in range(len(input_list)):\n        for j in range(i, len(input_list)):\n            subarray = input_list[i:j + 1]\n            if sum(subarray) == k and subarray not in result:\n                result.append(subarray)\n    return result"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef subarray_sum_to_k(input_list: list, k: int):\n    if not isinstance(input_list, list) or not all(isinstance(i, int) for i in input_list) or not isinstance(k, int):\n        return \"Invalid input\"\n\n    result = []\n    for i in range(len(input_list)):\n        for j in range(i, len(input_list)):\n            subarray = input_list[i:j + 1]\n            if sum(subarray) == k and subarray not in result:\n                result.append(subarray)\n    return result\n"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    interspersed_list = []\n\n    for i in range(len(numbers)):\n        interspersed_list.append(numbers[i])\n        if i != len(numbers) -1:\n            interspersed_list.append(delimeter)\n    \n    return interspersed_list"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(nested_parentheses_string: str) -> List[int]:\n    depth = 0\n    max_depth = 0\n    result = []\n\n    for char in nested_parentheses_string:\n        if char == \"(\":\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == \")\":\n            depth -= 1\n        elif char == \" \":\n            result.append(max_depth)\n            max_depth = 0\n\n    result.append(max_depth)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "def subarray_sum_to_k(input_list: list, k: int):\n    \"\"\"\n    subarray_sum_to_k takes a list of integers and an integer k as its parameters.\n    It returns all distinct subarrays whose elements sum to k.\n    \n    Args:\n        input_list: A list of integers\n        k: An integer\n        \n    Returns:\n        A list of lists, each containing integers, representing subarrays that sum to k\n    \"\"\"\n    \n    result = []\n    for i in range(len(input_list)):\n        for j in range(i, len(input_list)):\n            if sum(input_list[i:j+1]) == k:\n                subarray = input_list[i:j+1]\n                if subarray not in result:\n                    result.append(subarray)\n    \n    return result\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in the list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    :param numbers: A list of integers\n    :return: A tuple consisting of the sum and product of the integers in the list\n    \"\"\"\n    if not isinstance(numbers, list):\n        return \"Invalid input\"\n\n    if len(numbers) == 0:\n        return 0, 1\n\n    total_sum = 0\n    product = 1\n    for num in numbers:\n        total_sum += num\n        product *= num\n\n    return total_sum, product\n"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_numbers = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_numbers.append(current_max)\n\n    return max_numbers\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    return string + string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(num1: int, num2: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two non-negative integers.\n\n    :param num1: The first non-negative integer.\n    :param num2: The second non-negative integer.\n    :return: The greatest common divisor of num1 and num2.\n    \"\"\"\n\n    while num2 != 0:\n        num1, num2 = num2, num1 % num2\n\n    return num1"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n):\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i) + \" \"\n    return sequence.strip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    char_set = set(string.lower())\n    return len(char_set)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    if not isinstance(music_string, str):\n        return \"Invalid input\"\n\n    notes = music_string.split()\n    note_duration = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    }\n    durations = []\n    for note in notes:\n        durations.append(note_duration.get(note))\n    return durations"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    sub_len = len(substring)\n    for i in range(len(string) - sub_len + 1):\n        if string[i:i + sub_len] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    \n    num_list_valid = []\n    for num in num_list:\n        if num in num_dict:\n            num_list_valid.append(num)\n        else:\n            return f\"Invalid number: {num}\"\n    \n    sorted_nums = sorted(num_list_valid, key=lambda num: num_dict[num])\n\n    return ' '.join(sorted_nums)"}
{"task_id": "HumanEval/20", "completion": "from typing import List\n\ndef find_closest_elements(l: List[float]) -> List[float]:\n    if len(l) < 2:\n        return []\n    \n    l.sort()\n    min_diff = float('inf')\n    closest_nums = []\n\n    for i in range(len(l) - 1):\n        diff = l[i+1] - l[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_nums = [l[i], l[i+1]]\n    \n    return closest_nums"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = []\n    for num in numbers:\n        scaled_num = (num - min_num) / (max_num - min_num)\n        scaled_numbers.append(scaled_num)\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n):\n        if n % i == 0:\n            result = i\n    return result"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    if n < 2:\n        return []\n    \n    factors = []\n    factor = 2\n    while factor * factor <= n:\n        if n % factor != 0:\n            factor += 1\n        else:\n            n //= factor\n            factors.append(factor)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    result = [char.upper() if char.islower() else char.lower() for char in string]\n    return ''.join(result)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(string_list: List[str]) -> str:\n    if not isinstance(string_list, list) or not all(isinstance(s, str) for s in string_list):\n        return \"Invalid input\"\n    return ''.join(string_list)\n\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result"}
{"task_id": "HumanEval/30", "completion": "def subarray_sum_to_k(nums: list, k: int):\n    if not isinstance(nums, list) or not all(isinstance(i, int) for i in nums) or not isinstance(k, int):\n        return \"Invalid input\"\n\n    result_set = set()\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            if current_sum == k:\n                result_set.add(nums[i:j+1])\n\n    return [list(item) for item in result_set]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**(1/2)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0 or xs.count(0) == len(xs):\n        return None\n\n    largest_non_zero_coefficient = max([coeff for coeff in xs if coeff != 0], default=0)\n\n    if largest_non_zero_coefficient == 0:\n        return None\n    \n    return -largest_non_zero_coefficient / xs[-2]\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(numbers: list) -> list:\n    sorted_indices = sorted(range(len(numbers)), key=lambda x: numbers[x] if x % 3 == 0 else float('inf'))\n    return [numbers[i] for i in sorted_indices]\n"}
{"task_id": "HumanEval/34", "completion": "def unique(elements: list) -> list:\n    \"\"\"\n    Return sorted unique elements in a list\n    \n    Args:\n    elements: A list of elements\n    \n    Returns:\n    A list of sorted unique elements\n    \"\"\"\n    return sorted(list(set(elements)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input\"\n\n    num_sevens = 0\n    for i in range(1, n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            num_sevens += 1\n\n    return num_sevens"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n    result = l[:]\n    for i, value in zip(even_indices, sorted_even_values):\n        result[i] = value\n    return result"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n  \n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_seq = [0, 1]\n    while len(fib_seq) <= n:\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n\n    for num in fib_seq:\n        if is_prime(num):\n            n -= 1\n            if n == 0:\n                return num"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input\"\n\n    return n"}
{"task_id": "HumanEval/42", "completion": "def subarray_sum_to_k(input_list: list, k: int) -> list:\n    if not isinstance(input_list, list) or not all(isinstance(i, int) for i in input_list) or not isinstance(k, int):\n        return \"Invalid input\"\n\n    result_set = set()\n    for i in range(len(input_list)):\n        current_sum = 0\n        for j in range(i, len(input_list)):\n            current_sum += input_list[j]\n            if current_sum == k:\n                result_set.add(tuple(input_list[i:j + 1]))\n\n    return [list(item) for item in result_set]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(input_list):\n    sum_set = set()\n\n    for num in input_list:\n        if -num in sum_set:\n            return True\n        sum_set.add(num)\n\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    if x == 0:\n        return \"0\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 0:\n        mid1 = sorted_list[n//2]\n        mid2 = sorted_list[n//2 - 1]\n        median_value = (mid1 + mid2) / 2\n    else:\n        median_value = sorted_list[n//2]\n        \n    return median_value\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    for i in range(len(text) // 2):\n        if text[i] != text[-i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n      \n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n      \n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    if not isinstance(text, str):\n        return \"Invalid input\"\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''.join(char for char in text if char not in vowels)\n    \n    return result\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(numbers: list, threshold: int) -> bool:\n    return all(num < threshold for num in numbers)"}
{"task_id": "HumanEval/53", "completion": "from typing import List\n\ndef subarray_sum_to_k(input_list: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Find all distinct subarrays of input_list whose sum is k\n    \"\"\"\n    if not isinstance(input_list, list) or not all(isinstance(i, int) for i in input_list) or not isinstance(k, int):\n        return \"Invalid input\"\n\n    result_set = set()\n    for i in range(len(input_list)):\n        current_sum = 0\n        for j in range(i, len(input_list)):\n            current_sum += input_list[j]\n            if current_sum == k:\n                result_set.add(tuple(input_list[i:j+1]))\n                \n    return [list(item) for item in result_set]"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    Args:\n    - n: A positive integer indicating the position of the Fibonacci number to be calculated.\n\n    Returns:\n    - The n-th Fibonacci number.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Invalid input. n must be a positive integer.\")\n\n    fib_nums = [0, 1]\n\n    for i in range(2, n + 1):\n        fib_nums.append(fib_nums[i - 1] + fib_nums[i - 2])\n\n    return fib_nums[n]"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_number_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(x):\n        factors = []\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                factors.append(i)\n        return factors\n\n    if not isinstance(n, int) or n <= 1:\n        return \"Invalid input\"\n    \n    factors = get_prime_factors(n)\n\n    for factor in reversed(factors):\n        if is_number_prime(factor):\n            return factor\n\n    return 1\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) > 0:\n        return False\n    return True"}
{"task_id": "HumanEval/62", "completion": "def derivative(coefficients: list):\n    if not isinstance(coefficients, list) or not all(isinstance(i, int) for i in coefficients):\n        return \"Invalid input\"\n    \n    result = []\n    for i in range(len(coefficients)):\n        if i != 0:\n            result.append(i * coefficients[i])\n    return result\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"Calculates the n-th element of the fibfib number sequence.\"\"\"\n    if n == 0:\n        return 0\n    elif n <= 2:\n        return 1\n    else:\n        fib1, fib2, fib3 = 0, 0, 1\n        for i in range(3, n+1):\n            fib1, fib2, fib3 = fib2, fib3, fib1 + fib2 + fib3\n        return fib3\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s: str) -> int:\n    if not s:\n        return 0\n    \n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    \n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    \n    if s[-1].lower() == 'y' and count == 0:\n        return 0\n    \n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)\n\n    if shift > len(x_str):\n        return x_str[::-1]\n\n    new_indices = [(i + shift) % len(x_str) for i in range(len(x_str))]\n\n    result_str = ''.join([x_str[i] for i in new_indices])\n\n    return result_str\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s: str) -> int:\n    if not isinstance(s, str):\n        return \"Invalid input\"\n\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    \n    return sum"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(fruit_basket: str, total_fruits: int) -> int:\n    match = re.search(r'(\\d+)\\s*apples', fruit_basket)\n    num_apples = int(match.group(1)) if match else 0\n\n    match = re.search(r'(\\d+)\\s*oranges', fruit_basket)\n    num_oranges = int(match.group(1)) if match else 0\n\n    num_mangoes = total_fruits - num_apples - num_oranges\n    return num_mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr: list):\n    if not isinstance(arr, list):\n        return \"Invalid input\"\n\n    even_values = [num for num in arr if num % 2 == 0]\n\n    if len(even_values) == 0:\n        return []\n\n    min_even = min(even_values)\n\n    min_even_index = arr.index(min_even)\n\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "from collections import defaultdict\n\ndef search(lst):\n    number_frequencies = defaultdict(int)\n    for num in lst:\n        if num > 0:\n            number_frequencies[num] += 1\n    \n    greatest_number = -1\n    for num, frequency in number_frequencies.items():\n        if frequency >= num and num > greatest_number:\n            greatest_number = num\n    \n    return greatest_number\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    for i in range(len(sorted_lst)//2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[-(i+1)])\n    \n    if len(sorted_lst) % 2 != 0:\n        result.append(sorted_lst[len(sorted_lst)//2])\n    \n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a: float, b: float, c: float) -> float:\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    if a + b > c and a + c > b and b + c > a:\n        # calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # calculate the area using Heron's formula\n        area = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n        # round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(items, max_weight):\n    if len(items) == 0:\n        return True\n    elif items != items[::-1]:\n        return False\n    elif sum(items) <= max_weight:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1: list, lst2: list) -> list:\n    if not isinstance(lst1, list) or not all(isinstance(word, str) for word in lst1):\n        raise ValueError(\"lst1 must be a list of strings\")\n\n    if not isinstance(lst2, list) or not all(isinstance(word, str) for word in lst2):\n        raise ValueError(\"lst2 must be a list of strings\")\n\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n\n    return lst2\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(number):\n    if not isinstance(number, int) or number <= 0:\n        raise ValueError(\"Input number should be a positive integer\")\n\n    def sieve_of_eratosthenes(n):\n        primes = [True] * (n + 1)\n        primes[0] = primes[1] = False\n        p = 2\n        while p * p <= n:\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n            p += 1\n        return primes\n\n    primes = sieve_of_eratosthenes(number)\n    prime_factors = []\n    for i in range(2, number):\n        if primes[i] and number % i == 0:\n            prime_factors.append(i)\n\n    if len(prime_factors) == 3 and number == product(prime_factors):\n        return True\n    else:\n        return False\n\ndef product(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a >= 0 and int(a ** (1/3)) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "PRIME_DIGITS = {'2', '3', '5', '7', 'B', 'D'}\n\ndef hex_key(num: str) -> int:\n    if not all(digit.upper() in PRIME_DIGITS for digit in num):\n        return \"Invalid input\"\n\n    count = 0\n    for digit in num:\n        if digit.upper() in PRIME_DIGITS:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    if not isinstance(decimal, int):\n        return \"Invalid input. Please provide a valid decimal number.\"\n    \n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    \n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n            \n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if not isinstance(string, str):\n        return False\n\n    length = len(string)\n    if length < 2:\n        return False\n\n    if length == 2:\n        return True\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N: int) -> str:\n    binary = bin(N)\n    binary_sum = sum(int(x) for x in binary[2:])\n    binary_sum_str = bin(binary_sum)[2:]\n    return binary_sum_str"}
{"task_id": "HumanEval/85", "completion": "def sum_even_at_odd_indices(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s: str) -> str:\n    words = s.split() # Split the string into words\n    ordered_words = [\"\".join(sorted(word)) for word in words] # Sort the characters in each word\n    ordered_sentence = \" \".join(ordered_words) # Join the words back into a sentence with spaces\n    return ordered_sentence"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = [(i, j) for i, sublist in enumerate(lst) for j, element in enumerate(sublist) if element == x]\n    result.sort(key=lambda coordinate: (coordinate[0], coordinate[1]), reverse=(coordinate[1] >= 0))\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n         return []\n  \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s: str) -> str:\n    \"\"\"\n    Encrypts a string by rotating the alphabet by two positions.\n\n    Args:\n    - s (str): The string to be encrypted.\n\n    Returns:\n    - str: The encrypted string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input should be a string\")\n    \n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            index = alphabet.index(char.lower())\n            shifted_index = (index + 2) % 26  # rotate the index by two positions\n            encrypted_char = alphabet[shifted_index]\n            if char.isupper():\n                encrypted_string += encrypted_char.upper()\n            else:\n                encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "from typing import List, Optional\n\ndef next_smallest(input_list: List[int]) -> Optional[int]:\n    \n    if not isinstance(input_list, list) or not all(isinstance(i, int) for i in input_list):\n        return None\n    \n    if len(input_list) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in input_list:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(sentence):\n    sentences = sentence.split('. ') + sentence.split('? ') + sentence.split('! ')\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x: int, y: int, z: int) -> bool:\n    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def largest_prime_sum_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst[::-1]:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(input_dict):\n    if not isinstance(input_dict, dict):\n        return False\n\n    if len(input_dict) == 0:\n        return False\n\n    lowercase_key = False\n    uppercase_key = False\n    \n    for key in input_dict.keys():\n        if not isinstance(key, str):\n            return False\n        \n        if key.islower():\n            lowercase_key = True\n        elif key.isupper():\n            uppercase_key = True\n        else:\n            return False\n    \n    return (lowercase_key and not uppercase_key) or (uppercase_key and not lowercase_key)"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n: int) -> List[int]:\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a: int, b: int) -> int:\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(string: str):\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(string), 2):\n        if string[i].isupper() and string[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    floating_value = float(value)\n    rounded = round(floating_value)\n    if floating_value - rounded == 0.5:\n        if floating_value > 0:\n            return int(floating_value + 0.5)\n        else:\n            return int(floating_value - 0.5)\n    else:\n        return rounded\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n: int) -> List[int]:\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input\"\n\n    pile = [n]\n    count = 1\n    for _ in range(n - 1):\n        count += 1\n        if n % 2 == 0:\n            pile.append(n + count)\n        else:\n            pile.append(n + count + 1)\n\n    return pile"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.replace(\",\", \" \").split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y or x < 0 or y < 0:\n        raise ValueError(\"Invalid input: Both numbers must be positive and x must be less than or equal to y\")\n    \n    largest_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n    \n    return largest_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n: int, m: int) -> str:\n    if n > m:\n        return -1\n\n    average = round((n + m) / 2)\n    binary_average = format(average, 'b')\n    \n    return binary_average"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in x:\n        all_odd = True\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                all_odd = False\n                break\n        if all_odd:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr = [num for num in arr if 1 <= num <= 9]\n    arr.sort()\n    arr.reverse()\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [digit_names[num-1] for num in arr]\n    return arr"}
{"task_id": "HumanEval/106", "completion": "from typing import List\n\ndef f(n: int) -> List[int]:\n    if not isinstance(n, int) or n <= 0:\n        return []\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    \n    return result\n\ndef factorial(num: int) -> int:\n    factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n    return factorial\n\ndef sum_of_numbers(num: int) -> int:\n    return sum(range(1, num+1))\n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        num_str = str(i)\n        \n        if num_str == num_str[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr: list) -> int:\n    count = 0\n    for num in arr:\n        num_str = str(num)\n        digit_sum = 0\n        for char in num_str:\n            if char.isdigit():\n                digit_sum += int(char)\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    \n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    \n    for i in range(n):\n        if arr[(i + min_index) % n] > arr[((i + min_index) - 1 + n) % n]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    for num1 in lst1:\n        if num1 % 2 != 0:\n            for num2 in lst2:\n                if num2 % 2 == 0:\n                    return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test: str) -> dict:\n    letter_count = {}\n    letters = test.split()\n    for letter in letters:\n        if letter not in letter_count:\n            letter_count[letter] = 1\n        else:\n            letter_count[letter] += 1\n\n    max_count = max(letter_count.values())\n    result = {}\n    for letter, count in letter_count.items():\n        if count == max_count:\n            result[letter] = count\n\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s: str, c: str) -> tuple:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for char in c:\n        s = s.replace(char, \"\")\n\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst: list):\n    result = []\n    for string in lst:\n        if all(char.isdigit() for char in string):\n            count = sum(1 for digit in string if int(digit) % 2 != 0)\n            result.append(\"the number of odd elements in the string {} of the input.\".format(count))\n        else:\n            result.append(\"Invalid input\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    if not isinstance(nums, list) or not all(isinstance(i, int) for i in nums):\n        return \"Invalid input\"\n\n    # Initialize variables\n    min_sum = float('inf')\n    subarray_sum = 0\n    start = 0\n\n    # Iterate through each element of the list\n    for i in range(len(nums)):\n        # Update the subarray sum by adding the current element\n        subarray_sum += nums[i]\n\n        # Check if current subarray sum is smaller than minimum sum\n        while subarray_sum >= target_sum:\n            min_sum = min(min_sum, subarray_sum)\n            subarray_sum -= nums[start]\n            start += 1\n\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    if not isinstance(grid, list) or not all(isinstance(row, list) for row in grid) or not all(all(cell in [0, 1] for cell in row) for row in grid):\n        return \"Invalid input\"\n\n    rows = len(grid)\n    if rows == 0:\n        return 0\n\n    cols = len(grid[0])\n\n    total_units = sum(sum(row) for row in grid)\n\n    return math.ceil(total_units / (capacity * rows * cols))"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    if arr is None or not isinstance(arr, list):\n        return \"Invalid input\"\n\n    for num in arr:\n        if not isinstance(num, int) or num < 0:\n            return \"Invalid input\"\n\n    def count_ones(num):\n        return bin(num).count(\"1\")\n\n    def comparison(num):\n        return (count_ones(num), num)\n\n    return sorted(arr, key=comparison)\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s: str, n: int) -> List[str]:\n    result = []\n    if s == \"\":\n        return result\n\n    words = s.split()\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.lower() not in \"aeiou\":\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    \n    for string in lst:\n        for char in string:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if len(stack) > 0 and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    \n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr: list, k: int):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    if not isinstance(lst, list) or not all(isinstance(i, int) for i in lst) or len(lst) == 0:\n        return \"Invalid input: please provide a non-empty list of integers\"\n\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_elements = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum_elements += arr[i]\n    return sum_elements\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input\"\n    \n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    odd_numbers = sorted(list(set(filter(lambda x: x % 2 != 0, collatz_seq))))\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if len(date) != 10:\n        return False\n\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt: str):\n    words = re.split(r'\\s|,', txt)\n    \n    if len(words) > 1:\n        return words\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n\n    if lst != sorted(lst):\n        return False\n\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1: tuple, interval2: tuple) -> str:\n    \"\"\"Determines whether the length of the intersection between two intervals is a prime number.\"\"\"\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n\n        if is_prime(intersection_length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Checks if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        sign_product *= sign(num)\n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum\n\ndef sign(num):\n    if num > 0:\n        return 1\n    elif num < 0:\n        return -1\n    else:\n        return 0"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid: list, k: int) -> list:\n    N = len(grid)\n    visited = [[False] * N for _ in range(N)]\n    path = []\n\n    def dfs(curr_row: int, curr_col: int, curr_path: list) -> list:\n        if len(curr_path) == k:\n            return curr_path\n\n        curr_path.append(grid[curr_row][curr_col])\n        visited[curr_row][curr_col] = True\n\n        smallest_path = []\n        _min = float('inf')\n\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_row = curr_row + dx\n            new_col = curr_col + dy\n\n            if (\n                0 <= new_row < N and\n                0 <= new_col < N and\n                not visited[new_row][new_col]\n            ):\n                candidate_path = dfs(new_row, new_col, curr_path.copy())\n                if not smallest_path or candidate_path < smallest_path:\n                    smallest_path = candidate_path\n\n        visited[curr_row][curr_col] = False\n        return smallest_path\n\n    for i in range(N):\n        for j in range(N):\n            curr_path = dfs(i, j, [])\n            if not path or curr_path < path:\n                path = curr_path\n\n    return path if path else []\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n: int) -> List[int]:\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence[:n + 1]\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(bracket_sequence: str) -> bool:\n    stack = []\n    for char in bracket_sequence:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if len(stack) == 0:\n                stack.append(char)\n            elif stack[-1] == \"[\":\n                stack.pop()\n\n    if len(stack) > 0:\n        return True\n\n    return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    if not isinstance(lst, list) or not all(isinstance(num, (int, float)) for num in lst):\n        raise TypeError(\"Invalid input. The input should be a list of numbers.\")\n        \n    total_sum = 0\n    for num in lst:\n        total_sum += int(num)**2\n        \n    return total_sum"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    \n    last_char = txt[-1]\n\n    if not last_char.isalpha():\n        return False\n\n    if \" \" in txt:\n        words = txt.split()\n        last_word = words[-1]\n        if last_word == last_char:\n            return True\n    else:\n        return True\n\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    n = len(arr)\n    if n <= 1:\n        return -1\n    \n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return i-1\n    \n    return -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(value1, value2):\n    if value1 == value2:\n        return None\n    elif isinstance(value1, str) and isinstance(value2, str):\n        if ',' in value1 or ',' in value2:\n            value1 = float(value1.replace(',', '.'))\n            value2 = float(value2.replace(',', '.'))\n    elif isinstance(value1, str):\n        value1 = float(value1.replace(',', '.'))\n    elif isinstance(value2, str):\n        value2 = float(value2.replace(',', '.'))\n    if type(value1) == type(value2):\n        return max(value1, value2)\n    else:\n        return max(float(value1), float(value2))"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(target_number: int) -> bool:\n    \"\"\"\n    Evaluate whether the given number `target_number` can be written as the sum of exactly 4 positive even numbers.\n    \n    Args:\n        target_number (int): The number to be evaluated.\n    \n    Returns:\n        bool: True if `target_number` can be written as the sum of exactly 4 positive even numbers, False otherwise.\n    \"\"\"\n    if target_number % 2 != 0:\n        return False\n    \n    max_value = target_number // 4\n    \n    for i in range(1, max_value + 1):\n        remaining_sum = target_number - 2 * i\n        \n        max_second = remaining_sum // 3\n        \n        for j in range(i, max_second + 1):\n            remaining_sum2 = remaining_sum - 2 * j\n            \n            max_third = remaining_sum2 // 2\n            \n            if remaining_sum2 % 2 == 0 and remaining_sum2 // 2 <= max_third:\n                return True\n    \n    return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n: int) -> int:\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    if n == 1:\n        return 1\n    \n    factorial = 1\n    prev_factorial = 1\n    for i in range(1, n+1):\n        factorial *= i * prev_factorial\n        prev_factorial *= i\n    \n    return factorial\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text: str) -> str:\n    result = \"\"\n    prev_char = \"\"\n    count_spaces = 0\n    for char in text:\n        if char == \" \":\n            count_spaces += 1\n            if count_spaces <= 2:\n                result += \"_\"\n            else:\n                result += \"-\"\n        else:\n            count_spaces = 0\n            result += char\n        prev_char = char\n    return result"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name: str) -> str:\n    digits_count = 0\n    dot_count = 0\n    \n    for char in file_name:\n        if char.isdigit():\n            digits_count += 1\n        elif char == '.':\n            dot_count += 1\n    \n    if digits_count > 3 or dot_count != 1:\n        return 'No'\n\n    file_parts = file_name.split('.')\n    if len(file_parts[0]) == 0 or not file_parts[0][0].isalpha():\n        return 'No'\n\n    valid_extensions = ['txt', 'exe', 'dll']\n    if len(file_parts) < 2 or file_parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n    return result\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_parts = x.split('/')\n    n_parts = n.split('/')\n\n    x_numer, x_denom = int(x_parts[0]), int(x_parts[1])\n    n_numer, n_denom = int(n_parts[0]), int(n_parts[1])\n\n    result_numer = x_numer * n_numer\n    result_denom = x_denom * n_denom\n\n    if result_denom % result_numer == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums: list) -> list:\r\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))\r\n    return nums"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    first_digits = ['1', '3', '5', '7', '9']\n    last_digits = ['1', '3', '5', '7', '9']\n    for num in nums:\n        if num > 10 and str(num)[0] in first_digits and str(num)[-1] in last_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n: int):\n    \"\"\"\n    get_max_triples is a function that takes a positive integer n as its parameter.\n    It creates an integer array 'a' of length n, where for each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    The function returns the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input\"\n\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1: str, planet2: str) -> tuple:\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    return tuple(planets[index1+1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(even_length_words, key=lambda x: (len(x), x))\n    return sorted_words"}
{"task_id": "HumanEval/150", "completion": "def subarray_sum_to_k(input_list: list, k: int):\n    if not isinstance(input_list, list) or not all(isinstance(i, int) for i in input_list) or not isinstance(k, int):\n        return \"Invalid input\"\n\n    result_set = set()\n    for i in range(len(input_list)):\n        current_sum = 0\n        for j in range(i, len(input_list)):\n            current_sum += input_list[j]\n            if current_sum == k:\n                result_set.add(tuple(input_list[i:j+1]))\n\n    return [list(item) for item in result_set]"}
{"task_id": "HumanEval/151", "completion": "from typing import List\n\ndef double_the_difference(lst: List[int]) -> int:\n    sum_of_squares = 0\n    for num in lst:\n        if num % 2 != 0 and num >= 0 and isinstance(num, int):\n            sum_of_squares += num ** 2\n    return sum_of_squares\n"}
{"task_id": "HumanEval/152", "completion": "from typing import List\n\ndef compare(actual_scores: List[int], predicted_scores: List[int]) -> List[int]:\n    score_differences = []\n    for actual_score, predicted_score in zip(actual_scores, predicted_scores):\n        if actual_score == predicted_score:\n            score_differences.append(0)\n        else:\n            score_differences.append(abs(actual_score - predicted_score))\n    return score_differences\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name: str, extensions: list) -> str:\n    strengths = []\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        strengths.append(strength)\n\n    max_strength = max(strengths)\n    max_indices = [i for i, strength in enumerate(strengths) if strength == max_strength]\n    max_index = min(max_indices)\n\n    return f\"{class_name}.{extensions[max_index]}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a: str, b: str) -> bool:\n    return any(b in a[i:] + a[:i] for i in range(len(a)))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(input_num: int) -> tuple:\n    if not isinstance(input_num, int):\n        return None\n\n    num_even = 0\n    num_odd = 0\n\n    for char in str(abs(input_num)):\n        if int(char) % 2 == 0:\n            num_even += 1\n        else:\n            num_odd += 1\n\n    return (num_even, num_odd)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    def roman_digit(d, one, five, ten):\n        if d <= 3:\n            return one * d\n        elif d == 4:\n            return one + five\n        elif d <= 8:\n            return five + one * (d - 5)\n        else:\n            return one + ten\n\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        return 'Invalid number'\n    \n    result = \"\"\n    \n    thousands = number // 1000\n    result += \"m\" * thousands\n    number -= thousands * 1000\n    \n    hundreds = number // 100\n    result += roman_digit(hundreds, \"c\", \"d\", \"m\")\n    number -= hundreds * 100\n    \n    tens = number // 10\n    result += roman_digit(tens, \"x\", \"l\", \"c\")\n    number -= tens * 10\n    \n    result += roman_digit(number, \"i\", \"v\", \"x\")\n    \n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    sides = sorted([a, b, c])\n\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        return \"Invalid input\"\n    \n    max_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        count = len(unique_chars)\n        \n        if count > max_count or (count == max_count and word < max_word):\n            max_count = count\n            max_word = word\n    \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(carrots_eaten: int, carrots_needed: int, remaining_carrots: int) -> dict:\n    total_eaten = carrots_eaten + carrots_needed\n    \n    if total_eaten <= remaining_carrots:\n        remaining_carrots -= carrots_needed\n    else:\n        remaining_carrots = 0\n    \n    return {\"total_eaten\": total_eaten, \"remaining\": remaining_carrots}"}
{"task_id": "HumanEval/160", "completion": "from typing import List\n\ndef subarray_sum_to_k(input_list: List[int], k: int) -> List[List[int]]:\n    result_set = set()\n    for i in range(len(input_list)):\n        current_sum = 0\n        for j in range(i, len(input_list)):\n            current_sum += input_list[j]\n            if current_sum == k:\n                result_set.add(tuple(input_list[i:j + 1]))\n\n    return [list(item) for item in result_set]"}
{"task_id": "HumanEval/161", "completion": "def solve(s: str) -> str:\n    result = \"\"\n    letters = 0\n    \n    for char in s:\n        if char.isalpha():\n            letters += 1\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n            \n    if letters == 0:\n        result = s\n        \n    return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if text == \"\":\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]"}
