{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i] - sorted_numbers[i+1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_groups = []\n    stack = []\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            group = \"\"\n            while stack and stack[-1] != \"(\":\n                group = stack.pop() + group\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n                group = \"(\" + group + \")\"\n                paren_groups.append(group)\n    \n    return paren_groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number % 1.0"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    sum_deviation = 0\n    mean = sum(numbers) / len(numbers)\n    \n    for num in numbers:\n        sum_deviation += abs(num - mean)\n    \n    return sum_deviation / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"\n    output = []\n    for i in range(len(numbers)):\n        output.append(numbers[i])\n        if i < len(numbers) - 1:\n            output.append(delimeter)\n    return output"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    current_nesting = 0\n    max_nesting = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            current_nesting += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif char == \")\":\n            current_nesting -= 1\n\n    return max_nesting\n\nparse_nested_parens('(()()) ((())) () ((())()())')"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    longest_palindrome_suffix = \"\"\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            longest_palindrome_suffix = string[i:]\n            break\n    return string + longest_palindrome_suffix[::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    xor_result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            xor_result += '1'\n        else:\n            xor_result += '0'\n    return xor_result"}
{"task_id": "HumanEval/12", "completion": "\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    parsed_music = []\n    \n    for note in music_string.split():\n        parsed_music.append(beats[note])\n    \n    return parsed_music"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if substring == \"\":\n        return count\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\n    'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = None\n    closest_pair = None\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if smallest_diff is None or diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    rescaled = []\n    smallest = min(numbers)\n    largest = max(numbers)\n    for num in numbers:\n        scaled = (num - smallest) / (largest - smallest)\n        rescaled.append(scaled)\n    return rescaled"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\"\"\""}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    pass"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    return list(dict.fromkeys(numbers))\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = \"\"\n    for string in strings:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" \n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    filtered_strings = []\n\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    return None"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    new_list = l.copy()\n    indices = [i for i in range(len(new_list)) if i % 3 == 0]\n    sorted_values = sorted([new_list[i] for i in indices])\n    for i, val in zip(indices, sorted_values):\n        new_list[i] = val\n    return new_list"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"\n    Return sorted unique elements in a list\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"\n    Return maximum element in the list.\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    sorted_even = sorted(l[::2])\n    result = [l[i] if i % 2 != 0 else sorted_even[i // 2] for i in range(len(l))]\n    return result"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    and the requirement: HumanEval/37Project Leader for Testers: . Your objective is to extract the final version of the code for me, by reading the final report from the developer.  Please remember to remove the code used by the test, and only keep the Python functions needed in the requirements(mentioned in the function signature.). Please remember: provide only the final version of the code."}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    \n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    count = 0"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    new_list = [el + 1 for el in l]\n    return new_list"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    # Implement the code here\n    pass"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n        result = (result * result) % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    pass"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\""}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    \"\"\"\n    is_increasing = all(x <= y for x, y in zip(l, l[1:]))\n    is_decreasing = all(x >= y for x, y in zip(l, l[1:]))\n\n    return is_increasing or is_decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    common_elements = list(set(l1) & set(l2))\n    return sorted(common_elements)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    pass"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\nsum_to_n(30)"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n\n    Args:\n    brackets (str): A string of \"(\" and \")\".\n\n    Returns:\n    bool: True if bracketing is correct, False otherwise.\n    \"\"\"\n    stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    derivative_lst = []\n    for i in range(1, len(xs)):\n        derivative_lst.append(i * xs[i])\n    return derivative_lst"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(n-2):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    s = s.lower()\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' and s[-2] not in vowels:\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x = str(x)\n    digits = len(x)\n    if shift > digits:\n        return x[::-1]\n    else:\n        shifted_digits = x[-shift:] + x[:-shift]\n        return shifted_digits"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apple_count = 0\n    orange_count = 0\n    \n    if s:\n        counts = s.split(' ')\n        for c in counts:\n            if 'apples' in c:\n                apple_count = int(c)\n            elif 'oranges' in c:\n                orange_count = int(c)\n    \n    return n - apple_count - orange_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    min_value = min(even_values)\n    min_index = arr.index(min_value)\n    return [min_value, min_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    '''\n    result = -1\n    for num in set(lst):\n        if num > result and lst.count(num) >= num:\n            result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while len(sorted_lst) > 0:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))\n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    \n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q != q[::-1]:\n        return False\n    if sum(q) > w:\n        return False\n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # Implementation of the smallest_change function\n    min_change = float('inf')\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        # If the elements at both ends are different, increment the change count\n        if arr[left] != arr[right]:\n            min_change += 1\n        left += 1\n        right -= 1\n\n    return min_change"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n    if count1 < count2:\n        return lst1\n    elif count1 > count2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a == 1:\n        return False\n    count = 0\n    for i in range(2, a):\n        if a % i == 0:\n            if is_prime(i):\n                count += 1\n    return count == 3\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return round(a**(1/3))**3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    \n    for digit in num:\n        if digit in primes:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = sum([int(i) for i in str(bin(N))[2:]])\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        encrypted += chr(ord(char) + 4)\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) <= 1:\n        return None\n    lst = sorted(lst)\n    smallest = lst[0]\n    for num in lst:\n        if num > smallest:\n            return num\n    return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    sentences = S.split('. ')\n    sentences = [sentence.rstrip('?').rstrip('!') for sentence in sentences]\n    return sum(sentence.startswith('I') for sentence in sentences)"}
{"task_id": "HumanEval/92", "completion": "def count_boredoms(sentence: str) -> int:\n    count = 0\n    words = sentence.split()\n    for word in words:\n        if word.lower() == 'i' or word.lower() == 'me':\n            count += 1\n    return count"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = ord(char.lower()) - ord('a')\n                encoded_char = chr((index + 2) % 26 + ord('a'))\n                encoded_message += encoded_char.swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_numbers = [x for x in lst if is_prime(x)]\n    if not prime_numbers:\n        return 0\n    max_prime = max(prime_numbers)\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    keys = dictionary.keys()\n    \n    if len(keys) == 0:\n        return False\n    \n    lowercase = all(key.islower() for key in keys)\n    uppercase = all(key.isupper() for key in keys)\n    \n    if lowercase or uppercase:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    prime_numbers = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            prime_numbers.append(num)\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    for i in range(1, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n\n    if '.' in value:\n        # Split the value into integer and decimal parts\n        integer_part, decimal_part = value.split('.')\n        integer_part = int(integer_part)\n\n        # Check if decimal part is closer to the previous or next integer\n        if int(decimal_part) >= 5:\n            return integer_part + 1\n        else:\n            return integer_part\n    else:\n        return int(value)\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = []\n    stones = n\n    for i in range(n):\n        levels.append(stones)\n        if n % 2 == 0:\n            stones += 2  \n        else:\n            stones += 1\n    return levels"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.replace(\",\", \" \").split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr = [num for num in arr if 0 < num < 10]\n    arr.sort()\n    arr.reverse()\n    name_dict = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    return [name_dict[num] for num in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    for num in lst1:\n        if num % 2 != 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    hist_dict = {}\n    for letter in test.split():\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n    max_count = max(hist_dict.values())\n    result = {letter: count for letter, count in hist_dict.items() if count == max_count}\n    return result\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements in the string {count} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            min_sum = min(min_sum, curr_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    def lower_buckets(bucket_heights, capacity):\n        buckets_lowered = 0\n        for i in range(len(bucket_heights)):\n            if bucket_heights[i] > 0:\n                buckets_lowered += 1\n                bucket_heights[i] -= 1\n        return buckets_lowered\n    \n    def max_fill(grid, capacity):\n        if len(grid) == 0 or len(grid[0]) == 0:\n            return 0\n        rows = len(grid)\n        cols = len(grid[0])\n        bucket_heights = [0] * cols\n        total_buckets_lowered = 0\n        for i in range(rows):\n            curr_fill_heights = [max(bucket_heights[j], grid[i][j]) for j in range(cols)]\n            buckets_to_lower = sum(curr_fill_heights) - sum(bucket_heights)\n            while buckets_to_lower > 0:\n                curr_buckets_lowered = min(buckets_to_lower, capacity)\n                total_buckets_lowered += curr_buckets_lowered\n                buckets_to_lower -= curr_buckets_lowered\n                curr_fill_heights = [max(0, height - curr_buckets_lowered) for height in curr_fill_heights]\n            bucket_heights = curr_fill_heights\n        return total_buckets_lowered\n    \n    return max_fill(grid, capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    result = []\n    words = s.split()\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result\n\ndef count_consonants(word):\n    count = 0\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for letter in word:\n        if letter in consonants:\n            count += 1\n    return count"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    word = word.lower()\n\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    \n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n            count += 1\n\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if date == '':\n        return False\n\n    try:\n        month, day, year = date.split('-')\n        month = int(month)\n        day = int(day)\n        year = int(year)\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        else:\n            return False\n\n        return True\n\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(((ord(char) - 96) % 2) for char in txt)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    length = max(0, min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]) + 1)\n    if length <= 1:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        sign_product *= sign\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    path = []\n    visited = set()\n\n    def dfs(i, j, curr_path):\n        if (i, j) in visited:\n            return\n        visited.add((i, j))\n        curr_path.append(grid[i][j])\n\n        if len(curr_path) == k:\n            nonlocal path\n            if not path or curr_path < path:\n                path = curr_path.copy()\n            curr_path.pop()\n            visited.remove((i, j))\n            return\n\n        if i + 1 < len(grid):\n            dfs(i + 1, j, curr_path)\n        if j + 1 < len(grid[0]):\n            dfs(i, j + 1, curr_path)\n        if i - 1 >= 0:\n            dfs(i - 1, j, curr_path)\n        if j - 1 >= 0:\n            dfs(i, j - 1, curr_path)\n\n        curr_path.pop()\n        visited.remove((i, j))\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(i, j, [])\n\n    return path"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci_seq = [1, 3, 2]\n    if n <= 2:\n        return tribonacci_seq[:n+1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci_seq.append(1 + i // 2)\n        else:\n            tribonacci_seq.append(tribonacci_seq[i-1] + tribonacci_seq[i-2] + tribonacci_seq[i+1])\n    return tribonacci_seq"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digits = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digits = True\n    \n    return product if has_odd_digits else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0\n\n# Output:\n# Final version of the code."}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num) ** 2\n    return total\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if the last character of the given string is an alphabetical character\n    if len(txt) > 0 and txt[-1].isalpha():\n        # Check if the last character is not a part of a word (separated by a space)\n        if len(txt.split()[-1]) < len(txt):\n            return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n    \n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n    \n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    return max(float(a), float(b))"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    result = 1\n    while n > 0:\n        factorial = 1\n        for i in range(n, 0, -1):\n            factorial *= i\n        result *= factorial\n        n -= 1\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n\n    if len(file_name) - len(''.join([char for char in file_name if char.isdigit()])) > 3:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    file_parts = file_name.split('.')\n    \n    if len(file_parts[0]) == 0 or not file_parts[0][0].isalpha():\n        return 'No'\n    \n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime_length_words = []\n    words = sentence.split()\n    for word in words:\n        if len(word) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n            prime_length_words.append(word)\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\r\n    x_num, x_den = map(int, x.split('/'))\r\n    n_num, n_den = map(int, n.split('/'))\r\n    \r\n    result = x_num * n_num % (x_den * n_den)\r\n    \r\n    if result == 0:\r\n        return True\r\n    else:\r\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    sorted_nums = sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return sorted_nums\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(a)-2):\n        for j in range(i+1, len(a)-1):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planet_names and planet2 in planet_names:\n        start_index = planet_names.index(planet1)\n        end_index = planet_names.index(planet2)\n        if start_index < end_index:\n            return tuple(planet_names[start_index+1:end_index])\n        else:\n            return tuple(planet_names[end_index+1:start_index])\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(scores, guesses):\n    return [abs(g - s) if g != s else 0 for s, g in zip(scores, guesses)]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    \n    for extension in extensions:\n        capital_count = sum(1 for char in extension if char.isupper())\n        lowercase_count = sum(1 for char in extension if char.islower())\n        strength = capital_count - lowercase_count\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n  \n    if num == 0:\n        count_even = 1\n    else:\n        num = abs(num)\n\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n            num = num // 10\n  \n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numeral_map = (\n        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n        (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1)\n    )\n    result = \"\"\n    for numeral, value in roman_numeral_map:\n        if number >= value:\n            result += numeral * (number // value)\n            number %= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    if max(a, b, c)**2 == a**2 + b**2 + c**2 - max(a, b, c)**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_chars = []\n    for word in words:\n        count = len(set(word))\n        unique_chars.append((count, word))\n    unique_chars.sort(reverse=True)\n    return unique_chars[0][1] if unique_chars else \"\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_carrots = number + remaining\n    if total_carrots >= need:\n        eaten_carrots = need\n        remaining_carrots = total_carrots - need\n    else:\n        eaten_carrots = total_carrots\n        remaining_carrots = 0\n    \n    return [eaten_carrots, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = \"\"\n    for i in range(len(operand)-1):\n        expression += str(operand[i]) + \" \" + operator[i] + \" \" \n    expression += str(operand[-1])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    if not any(char.isalpha() for char in result):\n        return result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if text == \"\":\n        return None\n    \n    result = hashlib.md5(text.encode())\n    return result.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    even_digits = []\n    for num in range(a, b+1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    return sorted(even_digits)\n"}
