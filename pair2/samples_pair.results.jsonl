{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    largest_non_zero_coefficient = max(xs)\n    n = len(xs) - 1\n    \n    if n % 2 != 0 or largest_non_zero_coefficient == 0:\n        raise ValueError(\"Invalid input\")\n    \n    x = -largest_non_zero_coefficient / xs[1]\n    return round(x, 2)", "result": "failed: Invalid input (type: ValueError)", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    cubic_root = round(a**(1/3))\n    return cubic_root**3 == a", "result": "failed: type complex doesn't define __round__ method (type: TypeError)", "passed": false}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    count = {}\n    for letter in test.split():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    max_count = max(count.values())\n\n    result = {}\n    for letter, freq in count.items():\n        if freq == max_count:\n            result[letter] = freq\n\n    return result", "result": "failed: max() arg is an empty sequence (type: ValueError)", "passed": false}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n    \"\"\"\n\n    rows = len(grid)\n    if rows == 0:\n        return 0\n\n    cols = len(grid[0])\n    if cols == 0:\n        return 0\n\n    total_water = 0\n\n    for row in grid:\n        for well in row:\n            total_water += well\n\n    return math.ceil(total_water / capacity)", "result": "failed: name 'math' is not defined (type: NameError)", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst: List[int]) -> bool:\n    lst1 = list(set(lst))\n    if lst1 != sorted(lst1):\n        return False\n    elif len(lst) != len(lst1):\n        return False\n    return True", "result": "failed: name 'List' is not defined (type: NameError)", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    sequence = [3]\n    if n >= 1:\n        sequence.append(1)\n        if n >= 2:\n            sequence.append(2)\n            for i in range(3, n+1):\n                if i % 2 == 0:\n                    sequence.append(1 + i // 2)\n                else:\n                    sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n    return sequence", "result": "failed: list index out of range (type: IndexError)", "passed": false}
{"task_id": "HumanEval/139", "completion": "special_factorial(4):\n\n\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "result": "failed: invalid syntax (<string>, line 14) (type: SyntaxError)", "passed": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "result": "failed: invalid literal for int() with base 10: '-' (type: ValueError)", "passed": false}
