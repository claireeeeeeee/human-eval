{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Checks if there are any two numbers in the given list that are closer to each other\n    (with a difference less than the given threshold).\n\n    Args:\n    - numbers (List[float]): A list of numbers.\n    - threshold (float): The maximum allowed difference between two numbers.\n\n    Returns:\n    - bool: True if there are two numbers closer to each other than the threshold, False otherwise.\n    \"\"\"\n    \n    # Check if the input is valid\n    if not isinstance(numbers, list):\n        raise TypeError(\"The 'numbers' parameter should be a list of numbers.\")\n    \n    if not all(isinstance(num, (int, float)) for num in numbers):\n        raise ValueError(\"The 'numbers' list should only contain numeric values.\")\n    \n    if not isinstance(threshold, (int, float)):\n        raise TypeError(\"The 'threshold' parameter should be a number.\")\n    \n    if threshold < 0:\n        raise ValueError(\"The 'threshold' parameter should be a non-negative number.\")\n    \n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Iterate through the sorted list of numbers\n    for i in range(len(sorted_numbers) - 1):\n        # Check if the difference between the current and next number is less than the threshold\n        if abs(sorted_numbers[i+1] - sorted_numbers[i]) < threshold:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(input_string: str) -> List[str]:\n    groups = []\n    stack = []\n    current_group = \"\"\n    \n    for char in input_string:\n        if char == \"(\":\n            stack.append(char)\n            if len(stack) > 1:\n                current_group += char\n        elif char == \")\":\n            if len(stack) > 1:\n                current_group += char\n            if stack:\n                stack.pop()\n            if len(stack) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif stack:\n            current_group += char\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Truncates the decimal part from a given number.\n\n    Args:\n        number (float): The number from which to extract the decimal part.\n\n    Returns:\n        float: The truncated decimal part of the given number.\n    \"\"\"\n    if not isinstance(number, float):\n        raise TypeError(\"Input must be a float.\")\n    if number <= 0:\n        raise ValueError(\"Input must be a positive floating-point number.\")\n\n    decimal_part = number % 1\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef check_balance_below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        return 0  # handle empty list scenario\n\n    mean = sum(numbers) / len(numbers)\n    sum_absolute_differences = 0\n\n    for number in numbers:\n        absolute_difference = abs(number - mean)\n        sum_absolute_differences += absolute_difference\n\n    mean_abs_dev = sum_absolute_differences / len(numbers)  # improve variable name\n\n    return mean_abs_dev"}
{"task_id": "HumanEval/5", "completion": "```python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimiter)\n\n    result.append(numbers[-1])\n\n    return result\n```\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split(' ')\n    result = []\n\n    for group in groups:\n        depth = 0\n        max_depth = 0\n\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n\n            max_depth = max(max_depth, depth)\n\n        result.append(max_depth)\n\n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring.lower() in s.lower()]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    sum_of_numbers = sum(numbers)\n    \n    from functools import reduce\n    product_of_numbers = reduce(lambda x, y: x*y, numbers)\n    \n    return sum_of_numbers, product_of_numbers"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    \n    if len(numbers) == 0:\n        return rolling_max_list\n    \n    current_max = numbers[0]\n    rolling_max_list.append(current_max)\n    \n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "import string\n\ndef is_palindrome(string: str) -> bool:\n    return string.lower() == string.lower()[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return \"\"\n    longest_suffix = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        if string[i:] == string[i:][::-1]:\n            longest_suffix = string[i:]\n            break\n    return string + string[:len(string) - len(longest_suffix)][::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import Sequence\n\ndef string_xor(a: Sequence[str], b: Sequence[str]) -> str:\n    result = []\n    for char_a, char_b in zip(a, b):\n        if char_a != char_b:\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = \"\"\n    for string in strings:\n        if not isinstance(string, str):\n            raise TypeError(\"Input list should only contain strings.\")\n        \n        if len(string) > len(longest_string) or not longest_string:\n            longest_string = string\n    \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Inputs must be integers.\")\n\n    return math.gcd(a, b)"}
{"task_id": "HumanEval/14", "completion": "```python\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n```"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Returns a string consisting of numbers from 0 to n, separated by a space.\n    \n    Args:\n        n (int): The upper limit of the number sequence.\n        \n    Returns:\n        str: A string containing numbers from 0 to n, separated by a space.\n        \n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    numbers = [str(num) for num in range(n+1)]\n    return \" \".join(numbers)"}
{"task_id": "HumanEval/16", "completion": "from typing import List\n\ndef count_distinct_characters(string: str) -> int:\n    distinct_character_list: List[str] = []\n    lowercase_string: str = string.lower()\n\n    for char in lowercase_string:\n        if char not in distinct_character_list:\n            distinct_character_list.append(char)\n    \n    return len(distinct_character_list)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    if not music_string:\n        raise ValueError(\"Invalid input: music_string cannot be empty\")\n\n    notes = music_string.split()\n    beats = []\n    \n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note.endswith('|'):\n            beats.append(2)\n        elif note.endswith('.|'):\n            beats.append(1)\n        else:\n            raise ValueError(f\"Invalid input note: {note}\")\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if not isinstance(string, str) or not isinstance(substring, str):\n        raise TypeError(\"Both string and substring should be of type str\")\n\n    if len(substring) > len(string):\n        raise ValueError(\"Substring length cannot exceed original string length\")\n\n    count = string.count(substring)\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    numerals: List[str] = numbers.split()\n    \n    num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    sorted_numerals = sorted(numerals, key=lambda x: num_map[x])\n    \n    sorted_str = ' '.join(sorted_numerals)\n    \n    return sorted_str"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    sorted_numbers = sorted(numbers)\n\n    min_diff = float('inf')\n    closest_nums = None\n\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n\n        if diff < min_diff:\n            min_diff = diff\n            closest_nums = (sorted_numbers[i], sorted_numbers[i + 1])\n\n    return closest_nums"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) == 0:\n        return []\n    \n    minimum = min(numbers)\n    maximum = max(numbers)\n    range_value = maximum - minimum\n    \n    if range_value == 0:\n        return [0.0] * len(numbers)\n    \n    rescaled_numbers = [(number - minimum) / range_value for number in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "```python\nimport math\n\ndef largest_divisor(n: int) -> int:\n    if n < 2:\n        raise ValueError(\"Input must be greater than or equal to 2.\")\n    \n    largest = 1\n\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            largest = i\n\n    return largest\n```"}
{"task_id": "HumanEval/25", "completion": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n > 1:\n        factors.append(n)\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = [number for number in numbers if numbers.count(number) == 1]\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "```python\ndef flip_case(string):\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n\n    if len(string) == 0:\n        return \"\"\n\n    def flip_character_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    character_list = [flip_character_case(char) for char in string]\n\n    return ''.join(character_list)\n```"}
{"task_id": "HumanEval/28", "completion": "```python\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = \"\"\n    for string in strings:\n        result += string\n    return result\n```"}
{"task_id": "HumanEval/29", "completion": "```python\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    if prefix == '':\n        return []\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n```"}
{"task_id": "HumanEval/30", "completion": "```python\ndef get_positive(input_list: list) -> list:\n    positive_nums = [num for num in input_list if num > 0]\n    return positive_nums\n```"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    result = 0\n    for i, coeff in enumerate(xs):\n        result += coeff * (x ** i)\n    return result\n\ndef find_zero(xs: list) -> float:\n    # Iterate through a range of values for x\n    for x in range(-10, 11):\n        if abs(poly(xs, x)) < 0.0001:  # Check if the value of poly(xs, x) is close to 0\n            return x\n    return None"}
{"task_id": "HumanEval/33", "completion": "from typing import List\n\ndef sort_third_and_merge(input_list: List[int]) -> List[int]:\n    sorted_output = sorted(input_list)\n    divisible_by_three = sorted_output[::3]\n\n    index_temp = 0\n    output = []\n    for i in range(len(input_list)):\n        if i % 3 == 0:\n            output.append(divisible_by_three[index_temp])\n            index_temp += 1\n        else:\n            output.append(input_list[i])\n\n    return output\n```\n\nThis code defines the `sort_third_and_merge` function which takes a list of integers `input_list` as an argument and returns a new list according to the given requirements.\n\nThe function first sorts the `input_list` using the `sorted()` function and stores the sorted list in the `sorted_output` variable. It then extracts every third element starting from index 0 of the `sorted_output` list and stores it in the `divisible_by_three` list.\n\nThe function then iterates over the indices of the `input_list` using a counter variable `i`. If `i` is divisible by 3, it appends the corresponding element from the `divisible_by_three` list to the `output` list. Otherwise, it appends the element from the `input_list` at index `i` to the `output` list.\n\nFinally, the function returns the `output` list which is the desired result."}
{"task_id": "HumanEval/34", "completion": "def unique(input_list: list) -> list:\n    unique_elements = sorted(set(input_list))\n    return unique_elements"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for num in range(1, n + 1):\n        if num % 11 == 0 or num % 13 == 0:\n            if '7' in str(num):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(input_list: list) -> list:\n    if len(input_list) % 2 != 0:\n        raise ValueError(\"Input list should have an even length\")\n\n    output_list = []\n    sorted_even_values = sorted(input_list[::2])\n\n    for i, value in enumerate(input_list):\n        if i % 2 == 0:\n            output_list.append(sorted_even_values[i // 2])\n\n    return output_list"}
{"task_id": "HumanEval/38", "completion": "Here is the final version of the code:\n\n```python\ndef split_into_groups(input_string: str, group_size: int) -> list[str]:\n    return [input_string[i:i+group_size] for i in range(0, len(input_string), group_size)]\n\ndef encode_cyclic(input_string: str) -> str:\n    if input_string is None or len(input_string) == 0:\n        return \"\"\n\n    groups = split_into_groups(input_string, 3)\n    encoded_groups = [group[1:] + group[0] for group in groups if len(group) == 3]\n    return ''.join(encoded_groups)\n\ndef decode_cyclic(input_string: str) -> str:\n    if input_string is None or len(input_string) == 0:\n        return \"\"\n\n    groups = split_into_groups(input_string, 3)\n    decoded_groups = [group[-1] + group[:-1] for group in groups if len(group) == 3]\n    return ''.join(decoded_groups)\n```\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n <= 0:\n        return None\n\n    fibonacci = [0, 1]\n    while len(fibonacci) < n:\n        next_number = fibonacci[-1] + fibonacci[-2]\n        fibonacci.append(next_number)\n\n    prime_fibs = []\n    for number in fibonacci:\n        if number > 1:\n            for i in range(2, int(number ** 0.5) + 1):\n                if number % i == 0:\n                    break\n            else:\n                prime_fibs.append(number)\n\n    if len(prime_fibs) >= n:\n        return prime_fibs[n-1]\n    else:\n        return None"}
{"task_id": "HumanEval/40", "completion": "```python\ndef triples_sum_to_zero(l: list) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n\n    l.sort()\n\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            total = l[i] + l[left] + l[right]\n\n            if total == 0:\n                return True\n\n            if total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n```"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(num_cars):\n    if not isinstance(num_cars, int):\n        raise TypeError(\"Input must be an integer\")\n\n    if num_cars <= 0:\n        return 0\n\n    total_collisions = num_cars * (num_cars - 1) // 2\n\n    return total_collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "```python\ndef pairs_sum_to_zero(nums):\n    unique_elements = set()\n\n    for num in nums:\n        if -num in unique_elements:\n            return True\n\n        unique_elements.add(num)\n\n    return False\n```\n"}
{"task_id": "HumanEval/44", "completion": "import math\n\ndef change_base(x: int, base: int) -> str:\n    decimal = 0\n    result = \"\"\n    \n    # Convert x to decimal equivalent\n    for i, digit in enumerate(str(x)[::-1]):\n        decimal += int(digit) * int(math.pow(base, i))\n    \n    # Convert decimal to desired base\n    while decimal > 0:\n        remainder = decimal % base\n        result += str(remainder)\n        decimal = decimal // base\n    \n    # Reverse the result string\n    return result[::-1]"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(side_length, height):\n    if side_length <= 0 or height <= 0:\n        raise ValueError(\"Side length and height must be positive numbers.\")\n        \n    return 0.5 * side_length * height"}
{"task_id": "HumanEval/46", "completion": "def fibonacci_sequence_sum(sequence_length: int) -> int:\n    if sequence_length <= 0:\n        raise ValueError(\"The sequence length must be a positive integer.\")\n    \n    if sequence_length == 1:\n        return 0\n    elif sequence_length == 2:\n        return 2\n    \n    fib_sequence = [0, 0, 2, 0]  \n    for i in range(4, sequence_length + 1):\n        fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2] + fib_sequence[i - 3] + fib_sequence[i - 4])\n    \n    return fib_sequence[sequence_length]"}
{"task_id": "HumanEval/47", "completion": "```python\nfrom typing import List\n\nclass EmptyListError(Exception):\n    pass\n\ndef calculate_median(numbers: List[int]) -> float:\n    \"\"\"\n    Calculates the median of a list of numbers.\n\n    Args:\n        numbers (List[int]): List of numbers.\n\n    Returns:\n        float: The median value.\n\n    Raises:\n        EmptyListError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise EmptyListError(\"List is empty\")\n\n    sorted_numbers = sorted(numbers)\n    length = len(sorted_numbers)\n\n    if length % 2 == 1:\n        return sorted_numbers[length // 2]\n    else:\n        mid1 = sorted_numbers[length // 2 - 1]\n        mid2 = sorted_numbers[length // 2]\n        return (mid1 + mid2) / 2\n```"}
{"task_id": "HumanEval/48", "completion": "Sure! Here is the final version of the code:\n\n```python\ndef is_palindrome(text: str) -> bool:\n    if not text:\n        return True\n    \n    cleaned_text = ''.join(c for c in text.lower() if c.isalnum())\n    \n    for i in range(len(cleaned_text) // 2):  \n        if cleaned_text[i] != cleaned_text[-i - 1]:\n            return False\n    \n    return True\n```\n\nThis code includes the necessary modifications based on the test report. It checks if the given string is a palindrome by converting it to lowercase, removing special characters, and then comparing the characters from the start and end."}
{"task_id": "HumanEval/49", "completion": "```python\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Returns 2 raised to the power of n modulo p.\n    Raises a ValueError if n or p is not an integer.\n    Raises a ValueError if n is negative or p is non-positive.\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(p, int):\n        raise ValueError(\"Both n and p must be integers\")\n    \n    if n < 0 or p <= 0:\n        raise ValueError(\"n must be a non-negative integer and p must be a positive integer\")\n    \n    return pow(2, n, p)\n```\n"}
