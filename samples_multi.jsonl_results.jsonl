{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()  # Sort the numbers list in ascending order\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    separated_groups = []\n    inside_paren = False\n\n    for c in paren_string:\n        if c == \"(\":\n            inside_paren = True\n            separated_groups.append(c)\n        elif c == \")\":\n            if inside_paren:\n                separated_groups.append(c)\n                inside_paren = False\n            else:\n                separated_groups.append(\"(\" + c)\n        else:\n            separated_groups.append(c)\n\n    return separated_groups", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    \n    return decimal_part", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad_sum = 0\n    for num in numbers:\n        mad_sum += abs(num - mean)\n    mad = mad_sum / len(numbers)\n    return mad", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    return [x for pair in zip(numbers, [delimiter] * (len(numbers)-1)) for x in pair] + numbers[-1:]", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    deepest_levels = []\n    \n    for group in groups:\n        depth = 0\n        max_depth = 0\n        \n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n            \n            max_depth = max(max_depth, depth)\n        \n        deepest_levels.append(max_depth)\n    \n    return deepest_levels", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Invalid input: 'strings' must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"Invalid input: 'substring' must be a string.\")\n    \n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n\n    return sum_numbers, product_numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Generates a new list where each element represents the rolling maximum of the input list until that index.\n    \n    Args:\n        numbers: A list of integers.\n    \n    Returns:\n        A new list of integers representing the rolling maximum.\n    \"\"\"\n    rolling_max_list = []\n    max_so_far = float('-inf')\n    \n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        rolling_max_list.append(max_so_far)\n    \n    return rolling_max_list\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n - i - 1]:\n            return string + string[i:n - i][::-1]\n    return string\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(input_string_1: str, input_string_2: str) -> str:\n    \"\"\"\n    Perform bitwise XOR operation on two binary input strings.\n\n    Args:\n        input_string_1 (str): The first binary input string.\n        input_string_2 (str): The second binary input string.\n\n    Returns:\n        str: The result of the XOR operation as a binary string.\n\n    Raises:\n        ValueError: If the input strings have different lengths or are empty.\n    \"\"\"\n    if len(input_string_1) != len(input_string_2):\n        raise ValueError(\"Input strings must have the same length\")\n\n    if len(input_string_1) == 0 or len(input_string_2) == 0:\n        raise ValueError(\"Input strings cannot be empty\")\n\n    if not all(bit in ('0', '1') for bit in input_string_1 + input_string_2):\n        raise ValueError(\"Input strings must contain only binary digits (0 or 1)\")\n\n    xor_result = ''.join(['1' if bit_1 != bit_2 else '0' for bit_1, bit_2 in zip(input_string_1, input_string_2)])\n\n    return xor_result", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = max(strings, key=len)\n    \n    return longest_str", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    a = abs(a)\n    b = abs(b)\n\n    if a == 0 and b == 0:\n        return 0\n\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    while b:\n        a, b = b, a % b\n\n    return a", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "from typing import List\n\ndef string_sequence(n: int) -> str:\n    if n < 0:\n        raise ValueError(\"Input value cannot be less than zero.\")\n    sequence = []\n    for num in range(n+1):\n        sequence.append(str(num))\n    return ' '.join(sequence)", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(input_string: str) -> int:\n    def convert_to_lowercase(input_string: str) -> str:\n        return input_string.lower()\n\n    distinct_characters = set()\n    lowercase_string = convert_to_lowercase(input_string)\n\n    for char in lowercase_string:\n        if char not in distinct_characters:\n            distinct_characters.add(char)\n\n    return len(distinct_characters)", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    durations = []\n    notes = music_string.split()\n    for note in notes:\n        durations.append(legend.get(note))\n    return durations", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "import re\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n\n    num_list: List[str] = re.findall(r'\\b\\w+\\b', numbers.lower())\n    sorted_list = sorted(num_list, key=lambda x: num_dict[x])\n    sorted_string = ' '.join(sorted_list)\n    \n    return sorted_string", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        return None\n    \n    closest_numbers = (numbers[0], numbers[1])\n    \n    for i in range(2, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < abs(closest_numbers[1] - closest_numbers[0]):\n            closest_numbers = (numbers[i-1], numbers[i])\n    \n    return tuple(sorted(closest_numbers))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) == 0:\n        return []\n    \n    smallest = min(numbers)\n    largest = max(numbers)\n    \n    if smallest == largest:\n        return [0.0] * len(numbers)\n    \n    return [(num - smallest) / (largest - smallest) for num in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string\")\n    if not string:\n        return 0\n    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n <= 1:\n        return 1\n\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n\n    return largest", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n\n    if n < 2:\n        return factors\n\n    divisor = 2\n    while divisor ** 2 <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n\n    if n != 1:\n        factors.append(n)\n\n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    result = \"\"\n    \n    for char in string:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    result = []  \n    for string in strings: \n        if string.startswith(prefix): \n            result.append(string)  \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def filter_list(l, condition):\n    filtered_list = []\n    for num in l:\n        if condition(num):\n            filtered_list.append(num)\n    return filtered_list", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(number):\n    if number <= 1:\n        return False\n    \n    for i in range(2, math.isqrt(number) + 1):\n        if number % i == 0:\n            return False\n    \n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    result = 0\n    for i, coeff in enumerate(xs):\n        result += coeff * math.pow(x, i)\n    return result\n\ndef find_zero(xs: list) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients should be even.\")\n\n    # Implement the numerical method to find a zero point of the normalized polynomial\n    # Here, we use the Secant method as an example\n    x0 = 0  # Starting point for the Secant method\n    x1 = 1  # Second point for the Secant method\n    while True:\n        fx0 = poly(xs, x0)\n        fx1 = poly(xs, x1)\n        x2 = x1 - ((fx1 * (x1 - x0)) / (fx1 - fx0))\n        if abs(x2 - x1) < 1e-6:  # Stop condition for the Secant method\n            break\n        x0 = x1\n        x1 = x2\n\n    zero_point = x2\n    return zero_point\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(input_list: list) -> list:\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    if len(input_list) < 3:\n        return input_list\n\n    sorted_list = []\n    for i, num in enumerate(input_list):\n        if i % 3 != 0:\n            sorted_list.append(num)\n        else:\n            sublist = [num for num in input_list[i : i + 3] if num is not None]\n\n            if len(sublist) == 2 and any(num % 3 == 0 for num in sublist):\n                sorted_list.extend(sublist)\n            else:\n                sublist.sort()\n                sorted_list.extend(sublist)\n\n    return sorted_list", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    unique_set = set()\n    \n    for element in l:\n        if element not in unique_set:\n            unique_set.add(element)\n    \n    unique_list = list(unique_set)\n    unique_list.sort()\n    \n    return unique_list", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    if len(l) == 0:\n        raise ValueError(\"Input list cannot be empty\")\n\n    max_num = float(\"-inf\")\n  \n    for num in l:\n        if num > max_num:\n            max_num = num\n    \n    return max_num", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(upper_limit: int) -> int:\n    count = 0\n    for num in range(upper_limit):\n        if '7' in str(num) and (num % 11 == 0 or num % 13 == 0):\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    result = [None] * len(l)\n    even_index = 0\n    odd_index = 1\n    even_values = sorted([val for val in l[::2]])\n\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = even_values[even_index]\n            even_index += 1\n        else:\n            result[i] = l[odd_index]\n            odd_index += 2\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "def rotate_group(group: str) -> str:\n    return group[-1] + group[:-1]\n\ndef encode_cyclic(s: str) -> str:\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    encoded_groups = [rotate_group(group) for group in groups]\n    encoded_string = ''.join(encoded_groups)\n    return encoded_string\n\ndef decode_cyclic(s: str) -> str:\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    decoded_groups = [rotate_group(group[-1] + group[:-1]) for group in groups]\n    decoded_string = ''.join(decoded_groups)\n    return decoded_string", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n  \n    fib_prev, fib_curr = 0, 1\n    count = 0\n    prime_fib = 0\n\n    while count < n:\n        fib_prev, fib_curr = fib_curr, fib_prev + fib_curr\n        if is_prime(fib_curr):\n            count += 1\n            prime_fib = fib_curr\n\n    return prime_fib\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    if len(l) < 3:\n        return False\n\n    l.sort()\n    n = len(l)\n\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            triple_sum = l[i] + l[left] + l[right]\n            if triple_sum == 0:\n                return True\n            elif triple_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(num_cars: int):\n    collisions = 0\n    distance_per_car = 1000 // (num_cars * 2)\n    \n    for i in range(num_cars // 2):\n        car_left_to_right = i * distance_per_car\n        car_right_to_left = (num_cars - i - 1) * distance_per_car\n        if car_right_to_left <= car_left_to_right:\n            collisions += 1\n    \n    return collisions", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(lst: list) -> list:\n    return [element + 1 for element in lst]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    unique_nums = set()\n    \n    for num in l:\n        negative_num = -num\n        if negative_num in unique_nums:\n            return True\n        else:\n            unique_nums.add(num)\n    \n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if not isinstance(x, int) or not isinstance(base, int):\n        raise ValueError(\"Input parameters must be integers\")\n\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9 (inclusive)\")\n\n    if x == 0:\n        return \"0\"\n\n    negative = False\n    if x < 0:\n        negative = True\n        x = abs(x)\n\n    digits = \"\"\n    while x > 0:\n        digit = x % base\n        digits = str(digit) + digits\n        x //= base\n\n    if negative:\n        digits = \"-\" + digits\n\n    return digits", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(side_length, height):\n    try:\n        side_length = float(side_length)\n        height = float(height)\n    except ValueError:\n        return None\n    \n    if side_length <= 0 or height <= 0:\n        return 0.0\n    \n    return 0.5 * side_length * height", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    fib4_sequence = [0, 0, 2, 0]\n    if n <= 3:\n        return fib4_sequence[n]\n    for i in range(4, n+1):\n        fib4_sequence.append(fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4])\n    return fib4_sequence[n]", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "import statistics\n\ndef median(l: list) -> float:\n    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        median_value = (l[length//2-1] + l[length//2]) / 2\n    else:\n        median_value = l[length//2]\n    return median_value", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome.\n\n    Args:\n        text (str): The string to check.\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    if not text:\n        return True\n    \n    text_lower = text.lower()\n    \n    text_stripped = ''.join(text_lower.split())\n    \n    return text_stripped == text_stripped[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(exponent: int, modulo: int) -> int:\n    if not isinstance(exponent, int) or not isinstance(modulo, int) or exponent < 0 or modulo <= 0:\n        raise ValueError(f\"Invalid input: exponent={exponent}, modulo={modulo}. Exponent and modulo must be positive integers.\")\n    result = 1\n    power = 2\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * power) % modulo\n        power = (power * power) % modulo\n        exponent //= 2\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = shift_char(char, 5)\n            result += shifted_char.upper() if char.isupper() else shifted_char\n        else:\n            result += char\n    return result\n\n\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = shift_char(char, -5)\n            result += shifted_char.upper() if char.isupper() else shifted_char\n        else:\n            result += char\n    return result\n\n\ndef shift_char(char: str, shift: int) -> str:\n    ascii_offset = ord('a') if char.islower() else ord('A')\n    shifted_ascii = (ord(char) - ascii_offset + shift) % 26 + ascii_offset\n    return chr(shifted_ascii)", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text: str) -> str:\n    vowels = 'aeiou'\n    result = ''.join(char for char in text if char.lower() not in vowels)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "from typing import List\n\ndef is_list_below_threshold(numbers: List[int], threshold: int) -> bool:\n    return all(num < threshold for num in numbers)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def has_same_characters(word1: str, word2: str) -> bool:\n    \"\"\"\n    Checks if two words have the same characters.\n    \n    Args:\n        word1 (str): First word to compare.\n        word2 (str): Second word to compare.\n        \n    Returns:\n        bool: True if words have the same characters, False otherwise.\n    \"\"\"\n    if not isinstance(word1, str) or not isinstance(word2, str):\n        raise ValueError(\"Input arguments must be strings.\")\n    \n    if len(word1) != len(word2):\n        return False\n    \n    return sorted(word1) == sorted(word2)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    a = 0\n    b = 1\n\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    elif n < 0:\n        return \"Invalid input\"\n\n    for _ in range(2, n+1):\n        temp = a + b\n        a = b\n        b = temp\n\n    return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "from collections import deque\nimport re\n\ndef correct_bracketing(bracket_sequence: str) -> bool:\n    if not re.match(r'^[<>]*$', bracket_sequence):\n        raise ValueError(\"Input contains unexpected characters.\")\n\n    stack = deque()\n\n    for bracket in bracket_sequence:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n\n    return len(stack) == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "from typing import List\n\ndef is_monotonic(lst: List[int]) -> bool:\n    reference = lst[0]\n    return all(x >= reference for x in lst) or all(x <= reference for x in lst)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    if not l1 or not l2:\n        return []\n\n    unique_elements = {}\n\n    for element in l1:\n        unique_elements[element] = unique_elements.get(element, 0) + 1\n\n    result = []\n\n    for element in l2:\n        if element in unique_elements and unique_elements[element] > 0:\n            result.append(element)\n            unique_elements[element] -= 1\n\n    return sorted(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    smallest_prime_factor = 2\n\n    while n > 1:\n        if n % smallest_prime_factor == 0:\n            n = n // smallest_prime_factor\n        else:\n            smallest_prime_factor += 1\n\n    return smallest_prime_factor", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    This function calculates the sum of all numbers from 1 to n (inclusive).\n\n    Args:\n        n (int): The positive integer up to which the numbers should be summed.\n\n    Returns:\n        int: The sum of all numbers from 1 to n.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"The input n should be a positive integer.\")\n\n    total_sum = 0\n    for number in range(1, n+1):\n        total_sum += number\n\n    return total_sum\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n\n    return count == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    if not isinstance(xs, list) or len(xs) == 0:\n        raise ValueError(\"Input must be a non-empty list\")\n    \n    derivative_coeffs = []\n    for i in range(1, len(xs)):\n        if xs[i] == 0:\n            derivative_coeffs.append(0)\n        else:\n            coefficient = i * xs[i]\n            derivative_coeffs.append(coefficient)\n    \n    return derivative_coeffs", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "def compute_fibfib(n: int) -> int:\n    if n <= 2:\n        return 0 if n == 0 or n == 1 else 1\n    \n    return compute_fibfib(n-1) + compute_fibfib(n-2) + compute_fibfib(n-3)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s: str) -> int:\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n\n    return count", "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    validate_input(x)\n    \n    x_str = str(x)\n    shift_amount = shift % len(x_str)\n    \n    if shift_amount == 0:\n        return x\n    \n    result = shift_digits(x_str, shift_amount)\n    \n    if shift > len(x_str):\n        result = result[::-1]\n    \n    return int(result)\n", "result": "failed: name 'validate_input' is not defined", "passed": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s: str) -> int:\n    \"\"\"\n    Calculates the sum of the ASCII values of uppercase characters in a given string.\n\n    Args:\n        s (str): Input string\n\n    Returns:\n        int: Sum of ASCII values of uppercase characters\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n\n    sum = 0\n    for ch in s:\n        if ch.isupper():\n            sum += ord(ch)\n    return sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "from typing import Tuple\n\ndef extract_fruit_count(fruit_count_str: str) -> Tuple[int, int]:\n    apples, oranges = map(int, fruit_count_str.split(\" apples and \")[1].split(\" oranges\"))\n    return apples, oranges\n\n\ndef calculate_mangoes(fruit_count_str: str, total_fruits: int) -> int:\n    apples, oranges = extract_fruit_count(fruit_count_str)\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n\n\ndef fruit_distribution(fruit_basket: str, total_fruits: int) -> int:\n    try:\n        mangoes = calculate_mangoes(fruit_basket, total_fruits)\n        return mangoes\n    except (IndexError, ValueError):\n        raise ValueError(\"Invalid fruit count string\")\n", "result": "failed: Invalid fruit count string", "passed": false}
{"task_id": "HumanEval/68", "completion": "from typing import List\n\ndef find_smallest_even_node(nodes: List[int]) -> List[int]:\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    found_even = False\n    \n    # Iterate over each node\n    for index, value in enumerate(nodes):\n        if isinstance(value, int):\n            if value % 2 == 0:\n                if not found_even or value < smallest_even_value:\n                    smallest_even_value = value\n                    smallest_even_index = index\n                found_even = True\n        else:\n            raise ValueError(\"Invalid input. The nodes must be a list of integers.\")\n    \n    if not found_even:\n        return []\n    \n    return [smallest_even_value, smallest_even_index]\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/69", "completion": "import collections\nfrom typing import List\n\ndef search(lst: List[int]) -> int:\n    frequency = collections.Counter(lst)\n    \n    for num in lst:\n        if num > 0 and frequency[num] >= num:\n            return num\n    \n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst: List[int]) -> List[int]:\n    input_lst = lst[:]\n    input_lst.sort()\n    sorted_lst = []\n    start = 0\n    end = len(input_lst) - 1\n    while start <= end:\n        sorted_lst.append(input_lst[start])\n        start += 1\n        if start <= end:\n            sorted_lst.append(input_lst[end])\n            end -= 1\n    return sorted_lst", "result": "failed: name 'List' is not defined", "passed": false}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    \"\"\"\n    Check if the list is palindromic and the sum of elements is less than or equal to w.\n\n    Args:\n        q: A list of integers to be checked.\n        w: An integer representing the maximum threshold for the sum of elements.\n\n    Returns:\n        A boolean value indicating if the conditions are met.\n\n    \"\"\"\n    # Check if the list is palindromic\n    if q != q[::-1]:\n        return False\n    \n    # Check if the sum of elements is less than or equal to w\n    if sum(q) > w:\n        return False\n    \n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    array_length = len(arr)\n    change_count = 0\n    \n    for i in range(array_length // 2):\n        if arr[i] != arr[array_length - i - 1]:\n            change_count += 1\n    \n    return change_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    def calculate_total(lst):\n        return sum(len(word) for word in lst)\n    \n    total1 = calculate_total(lst1)\n    total2 = calculate_total(lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total1 > total2:\n        return lst2\n    else:\n        return lst1", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a: int) -> bool:\n    if not isinstance(a, int) or a <= 0:\n        raise ValueError(\"Input 'a' must be a positive integer.\")\n    \n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n: int) -> list[int]:\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    if len(factors) == 3:\n        return all(is_prime(factor) for factor in factors)\n    return False", "result": "failed: 'type' object is not subscriptable", "passed": false}
{"task_id": "HumanEval/76", "completion": "import math\ndef is_simple_power(x: int, n: int) -> bool:\n    if x < 0 or n < 0:\n        return False\n    if x == 0 and n == 0:\n        return True\n    if n == 0:\n        return False\n    power = round(math.log(x, n))\n    return n ** power == x", "result": "failed: float division by zero", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(number: int) -> bool:\n    if number == 0:\n        return True\n\n    if number < 0:\n        croot = int(round(abs(number) ** (1/3)))\n    else:\n        croot = int(round(number ** (1/3)))\n\n    if croot ** 3 == abs(number):\n        return True\n    \n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "completion": "def hex_key(num: str) -> int:\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_hex_count = 0\n    for digit in num:\n        if not digit.isdigit() and digit.lower() not in 'abcdef':\n            raise ValueError(\"Invalid input: only hexadecimal characters allowed.\")\n        \n        decimal_value = int(digit, 16)\n        if is_prime(decimal_value):\n            prime_hex_count += 1\n\n    return prime_hex_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal: int) -> str:\n    if not isinstance(decimal, int):\n        raise ValueError(\"Input must be an integer.\")\n    binary = bin(decimal)[2:]\n    return binary", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "completion": "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa > 4.0 or gpa < 0.0:\n            raise ValueError(\"Invalid input: GPA should be between 0.0 and 4.0\")\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef prime_length(string: str) -> bool:\n    length = len(string)\n\n    if length <= 1:\n        return False\n    \n    sqrt_length = int(math.sqrt(length)) + 1\n    for i in range(2, sqrt_length):\n        if length % i == 0:\n            return False\n    \n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n: int) -> int:\n    count = 0\n    lower_bound = 10**(n-1)\n    upper_bound = 10**n\n    for i in range(lower_bound, upper_bound):\n        if i % 10 == 1 or i // (10**(n-1)) == 1:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "def binary_digit_sum(N: int) -> str:\n    # Convert the given positive integer N into its binary representation\n    binary = bin(N)[2:]\n\n    # Calculate the sum of the digits in the binary representation\n    digit_sum = sum(int(digit) for digit in binary)\n\n    # Convert the sum into a binary string representation\n    binary_sum = bin(digit_sum)[2:]\n\n    # Return the binary string representation as the output\n    return binary_sum", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "from typing import List\n\ndef calculate_sum_of_even(lst: List[int]) -> int:\n    sum_of_even = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_of_even += lst[i]\n    return sum_of_even\n\ndef validate_input(lst: List[int]) -> bool:\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n    for num in lst:\n        if not isinstance(num, int):\n            raise TypeError(\"List must only contain integers\")\n    return True\n\ndef add(lst: List[int]) -> int:\n    validate_input(lst)\n    return calculate_sum_of_even(lst)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s: str) -> str:\n    input_words = s.split()\n    sorted_words = []\n    for word in input_words:\n        sorted_chars = sorted(word, key=lambda x: ord(x))\n        sorted_words.append(\"\".join(sorted_chars))\n    ordered_string = \" \".join(sorted_words)\n    return ordered_string", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "import typing\n\ndef get_row(lst: typing.List[typing.List[int]], x: int) -> typing.List[typing.Tuple[int, int]]:\n    matching_coordinates = []\n    \n    # Loop through each row and column of the nested list\n    for row_index, row in enumerate(lst):\n        # Reverse the range of columns to iterate in descending order\n        for column_index in reversed(range(len(row))):\n            # Check if the element matches 'x'\n            if row[column_index] == x:\n                # Append the coordinates (row, column) to the list\n                matching_coordinates.append((row_index, column_index))\n    \n    # Sort the coordinates by row in ascending order and column in descending order\n    matching_coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return matching_coordinates", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    \n    sum_of_first_and_last_elements = array[0] + array[-1]\n    \n    if sum_of_first_and_last_elements % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    \n    return array", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(input_string: str) -> str:\n    result = []\n    \n    for char in input_string:\n        shifted_code = ord(char) + 2\n        \n        if shifted_code > 122:\n            shifted_code -= 26\n        \n        encrypted_char = chr(shifted_code)\n        result.append(encrypted_char)\n    \n    encrypted_string = ''.join(result)\n    return encrypted_string\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "completion": "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if len(lst) < 2:\n        return None\n    \n    return sorted(lst)[1]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S: str) -> int:\n    boredom_count = 0\n\n    sentences = S.split('. ')\n    sentences += S.split('? ')\n    sentences += S.split('! ')\n\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n\n    return boredom_count", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not all(isinstance(arg, int) for arg in [x, y, z]):\n        return False\n\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "import string\n\n\ndef encode(message: str) -> str:\n    message = message.lower()\n    encoded_message = []\n  \n    for char in message:\n        if char in \"aeiou\":\n            encoded_message.append(string.ascii_lowercase[(string.ascii_lowercase.index(char) + 2) % 26])\n        else:\n            encoded_message.append(char.swapcase())\n\n    return \"\".join(encoded_message)", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "import math\n\ndef find_largest_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(number):\n        return sum(int(digit) for digit in str(number))\n\n    largest_prime = None\n\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return sum_digits(largest_prime)\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/95", "completion": "from typing import Dict, Any\n\ndef is_all_keys_same_case(dict_: Dict[str, Any]) -> bool:\n    if not dict_:\n        return False\n\n    lowercase_keys = set()\n    uppercase_keys = set()\n    for key in dict_.keys():\n        if not isinstance(key, str):\n            raise ValueError(\"Invalid key type: Only strings are allowed as keys.\")\n\n        if key.islower():\n            lowercase_keys.add(key)\n        elif key.isupper():\n            uppercase_keys.add(key)\n        else:\n            return False\n\n    if len(lowercase_keys) > 0 and len(uppercase_keys) > 0:\n        return False\n\n    return True\n", "result": "failed: First test error: None", "passed": false}
{"task_id": "HumanEval/96", "completion": "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n    prime_numbers = []\n    \n    if n < 2:\n        return prime_numbers\n    \n    num = 2\n    while len(prime_numbers) < n:\n        is_prime = True\n        \n        for div in range(2, int(math.sqrt(num)) + 1):\n            if num % div == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            prime_numbers.append(num)\n\n        num += 1\n    \n    return prime_numbers", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/97", "completion": "def multiply(a: int, b: int) -> int:\n    \"\"\"\n    Function to multiply the unit digits of two integers.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: Product of the unit digits of a and b\n    \"\"\"\n    unit_a = a % 10  # Extract unit digit of a\n    unit_b = b % 10  # Extract unit digit of b\n    return unit_a * unit_b  # Multiply the unit digits and return the product\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s: str) -> int:\n    uppercase_vowel_count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            uppercase_vowel_count += 1\n\n    return uppercase_vowel_count", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value: str) -> int:\n    input_number = value.strip()\n    \n    closest = round(float(input_number), ndigits=1)\n    \n    if closest % 2 == 0:\n        closest = int(closest)\n    else:\n        closest = int(closest + 1)\n\n    return closest", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(num_piles: int) -> List[int]:\n    pile_levels = []\n    stones = num_piles\n    \n    for i in range(num_piles):\n        pile_levels.append(stones)\n        stones = stones + 2 if stones % 2 == 0 else stones + 1\n    \n    return pile_levels\n", "result": "failed: name 'List' is not defined", "passed": false}
{"task_id": "HumanEval/101", "completion": "def words_string(input_string):\n    words = [word.strip() for word in input_string.replace(\",\", \" \").split()]\n    return words", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x: int, y: int) -> int:\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Inputs must be integers\")\n    if x <= 0 or y <= 0:\n        raise ValueError(\"Inputs must be positive integers\")\n\n    if y < x:\n        return -1\n\n    for num in range(y, x-1, -2):\n        if num % 2 == 0:\n            return num\n\n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n: int, m: int) -> str:\n    if n > m:\n        return \"-1\"\n\n    number_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    average = number_sum / count\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n\n    return binary_representation", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "completion": "\nfrom typing import List\n\ndef has_even_digits(num: int) -> bool:\n    return any(int(digit) % 2 == 0 for digit in str(num))\n\n\ndef unique_digits(x: List[int]) -> List[int]:\n    result = []\n    for num in x:\n        if not has_even_digits(num):\n            result.append(num)\n    \n    return sorted(result)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    valid_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr = sorted([x for x in arr if x in valid_nums])\n    arr = list(reversed(arr))\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[x-1] for x in arr]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "\nfrom typing import List\nimport math\n\ndef calculate_factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return math.factorial(n)\n\ndef calculate_sum(n: int) -> int:\n    return sum(range(1, n+1))\n\ndef f(n: int) -> List[int]:\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(calculate_factorial(i))\n        else:\n            result.append(calculate_sum(i))\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/107", "completion": "\nfrom typing import List, Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    def is_palindrome(num: int) -> bool:\n        return str(num) == str(num)[::-1]\n\n    def generate_palindromes(n: int) -> List[int]:\n        palindromes = []\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                palindromes.append(i)\n        return palindromes\n\n    def count_even_odd_palindromes(palindromes: List[int]) -> Tuple[int, int]:\n        even_count = 0\n        odd_count = 0\n        for palindrome in palindromes:\n            if palindrome % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        return (even_count, odd_count)\n\n    palindromes = generate_palindromes(n)\n    return count_even_odd_palindromes(palindromes)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "\nfrom typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    if arr is None or not isinstance(arr, list):\n        raise ValueError(\"Invalid input. Expected a list of integers.\")\n\n    count = 0\n    for num in arr:\n        digit_sum = sum(int(digit) for digit in str(abs(num)))\n        if digit_sum > 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "\nfrom typing import List\n\ndef shift_array(arr: List[int], shift_amount: int) -> List[int]:\n    n = len(arr)\n    shift_amount %= n\n    return arr[-shift_amount:] + arr[:-shift_amount]\n\ndef is_sorted(arr: List[int]) -> bool:\n    return arr == sorted(arr)\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"Elements of the list must be integers\")\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n\n    for shift_amount in range(1, n):  # Shift by 1 to n-1 positions\n        shifted_arr = shift_array(arr, shift_amount)\n        if is_sorted(shifted_arr):\n            return True\n\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/110", "completion": "\nfrom typing import List\n\ndef can_exchange_elements(source_list: List[int], target_list: List[int]) -> str:\n    if not isinstance(source_list, list) or not isinstance(target_list, list):\n        raise TypeError(\"Both inputs must be lists\")\n    if not all(isinstance(num, int) for num in source_list) or not all(isinstance(num, int) for num in target_list):\n        raise TypeError(\"Both lists must contain integers\")\n\n    odd_count = sum(1 for num in source_list if num % 2 != 0)\n    \n    if odd_count == 0:\n        return \"YES\"\n    \n    for num in target_list:\n        if num % 2 == 0:\n            return \"YES\"\n    \n    return \"NO\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    counts = {}\n    \n    # Split the input string into individual letters\n    letters = list(test)\n    \n    # Count the occurrences of each letter\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    # Find the maximum occurrence count\n    max_count = max(counts.values())\n    \n    # Create a dictionary with letters and their counts\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return result", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/112", "completion": "\ndef remove_characters(s: str, c: str) -> str:\n    result = \"\".join(char for char in s if char.lower() not in c.lower())\n    return result\n\n\ndef is_palindrome(s: str) -> bool:\n    s = s.lower()\n    return s == s[::-1]\n\n\ndef reverse_delete(s: str, c: str) -> tuple:\n    result = remove_characters(s, c)\n    palindrome_check = is_palindrome(result)\n    return result, palindrome_check\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "\nfrom typing import List\n\ndef count_odd_digits(string: str) -> int:\n    return sum(1 for char in string if char.isdigit() and int(char) % 2 != 0)\n\ndef odd_count(strings: List[str]) -> List[str]:\n    results = []\n    for string in strings:\n        count = count_odd_digits(string)\n        new_string = f\"There {'is' if count == 1 else 'are'} {count} odd digit{'s' if count != 1 else ''} in {string}.\"\n        results.append(new_string)\n    return results\n", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n\n    min_sum = curr_sum = nums[0]\n\n    for num in nums[1:]:\n        curr_sum = max(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n\n    return min_sum", "result": "failed: name 'List' is not defined", "passed": false}
{"task_id": "HumanEval/115", "completion": "\nimport math\nfrom typing import List\n\ndef max_fill(grid: List[List[int]], bucket_capacity: int) -> int:\n    if bucket_capacity == 0:\n        raise ValueError(\"Bucket capacity cannot be zero.\")\n\n    total_lowerings = 0\n    \n    for row in grid:\n        for well_value in row:\n            if well_value == 1:\n                total_lowerings += math.ceil(well_value / bucket_capacity)\n    \n    return total_lowerings\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "\nfrom typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n    binary_list = []\n    for num in arr:\n        binary_num = bin(num)[2:]\n        binary_list.append(binary_num)\n    \n    ones_count_list = []\n    for binary_num in binary_list:\n        ones_count = binary_num.count('1')\n        ones_count_list.append(ones_count)\n    \n    sorted_indices = sorted(range(len(arr)), key=lambda i: (ones_count_list[i], arr[i]))\n    sorted_arr = [arr[i] for i in sorted_indices]\n    \n    return sorted_arr\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "import re\nfrom typing import List\n\ndef select_words(input_string: str, num_consonants: int) -> List[str]:\n    if not input_string:\n        return []\n\n    words = re.split(r'\\b', input_string)\n    result = []\n\n    for word in words:\n        consonants = len(re.findall(r'[bcdfghjklmnpqrstvwxyz]', word, re.IGNORECASE))\n        if consonants == num_consonants:\n            result.append(word)\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "import re\n\nVOWELS = frozenset({'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'})\n\ndef find_closest_vowel(word: str) -> str:\n    if not word or not isinstance(word, str):\n        return ''\n    \n    if not re.match(\"^[A-Za-z]+$\", word):\n        return ''\n    \n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in VOWELS and word[i+1] in VOWELS:\n            return word[i+1]\n    \n    return ''", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "\nfrom typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    open_paren_count = 0\n    close_paren_count = 0\n    \n    for string in lst:\n        for char in string:\n            if char == '(':\n                open_paren_count += 1\n            elif char == ')':\n                if open_paren_count > 0:\n                    open_paren_count -= 1\n                else:\n                    return 'No'\n    \n    if open_paren_count == 0 and close_paren_count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    if k == 0:\n        return []\n    elif k >= len(arr):\n        return sorted(arr)\n    else:\n        return sorted(arr)[-k:]", "result": "passed", "passed": true}
{"task_id": "HumanEval/121", "completion": "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    sum_of_odd_elements_in_even_indices = 0\n    \n    for i, element in enumerate(lst):\n        if i % 2 == 0 and element % 2 != 0:\n            sum_of_odd_elements_in_even_indices += element\n    \n    return sum_of_odd_elements_in_even_indices", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    two_digit_elements = []\n    for num in arr[:k]:\n        if 10 <= abs(num) < 100:\n            two_digit_elements.append(num)\n    sum_two_digit = sum(two_digit_elements)\n    return sum_two_digit", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(input_number: int) -> List[int]:\n    odd_numbers = []\n    while input_number != 1:\n        if input_number % 2 == 1:\n            odd_numbers.append(input_number)\n        input_number = input_number * 3 + 1 if input_number % 2 == 1 else input_number // 2\n    odd_numbers.append(input_number)\n    return odd_numbers\n", "result": "failed: name 'List' is not defined", "passed": false}
{"task_id": "HumanEval/124", "completion": "def is_valid_date(date: str) -> bool:\n    if not date:\n        return False\n\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    day, month, year = date.split('-')\n\n    try:\n        day = int(day)\n        month = int(month)\n        year = int(year)\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if year < 1 or year > 9999:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/125", "completion": "import re\nfrom typing import List, Optional, Union\n\ndef split_words(text: Optional[str]) -> List[Union[str, int]]:\n    if text is None:\n        return []\n    \n    words = re.split(r'\\s|,', text.strip())\n    \n    if len(words) > 1:\n        return words\n    \n    lowercase_letters = [c for c in text if c.islower()]\n    odd_letters = [c for c in lowercase_letters if ord(c) % 2 != 0]\n    \n    return len(odd_letters)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    if not isinstance(lst, list) or not all(isinstance(n, int) for n in lst):\n        raise TypeError(\"Input must be a list of integers\")\n\n    if len(set(lst)) != len(lst):\n        return False\n\n    return sorted(lst) == lst", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if not validate_interval(interval1) or not validate_interval(interval2):\n        return \"NO\"\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start + 1\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef validate_interval(interval):\n    if len(interval) != 2:\n        return False\n    if not all(isinstance(value, int) for value in interval):\n        return False\n    if interval[0] > interval[1]:\n        return False\n    return True\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    if not all(isinstance(num, int) for num in arr):\n        raise TypeError(\"Input list must contain only integers\")\n\n    if not arr:\n        return None\n\n    magnitude_sum = 0\n    product_signs = 1\n\n    for num in arr:\n        magnitude_sum += abs(num)\n        product_signs *= abs(num) // num\n\n    return magnitude_sum * product_signs", "result": "failed: integer division or modulo by zero", "passed": false}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    min_path = []\n    start_row = 0\n    start_col = 0\n    \n    def explore_path(row, col, path, steps):\n        nonlocal min_path\n        \n        if steps == 0:\n            if not min_path or path < min_path:\n                min_path = path\n            return\n        \n        if row > 0:\n            explore_path(row - 1, col, path + [grid[row - 1][col]], steps - 1)\n        if row < len(grid) - 1:\n            explore_path(row + 1, col, path + [grid[row + 1][col]], steps - 1)\n        if col > 0:\n            explore_path(row, col - 1, path + [grid[row][col - 1]], steps - 1)\n        if col < len(grid[0]) - 1:\n            explore_path(row, col + 1, path + [grid[row][col + 1]], steps - 1)\n    \n    explore_path(start_row, start_col, [grid[start_row][start_col]], k)\n    \n    return min_path.", "result": "failed: invalid syntax (<string>, line 56)", "passed": false}
{"task_id": "HumanEval/130", "completion": "from typing import List\n\ndef generate_tribonacci_sequence(n: int) -> List[int]:\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [3]\n    \n    result = [3, 1, 2]\n    \n    for i in range(3, n+1):\n        result.append(result[i-1] + result[i-2] + result[i-3])\n    \n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "def digits(n: int) -> int:\n    \"\"\"\n    Returns the product of the odd digits of a positive integer 'n'.\n    If all digits are even, returns 0.\n    \"\"\"\n\n    # Input validation: Ensure 'n' is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    product = 1\n\n    while n > 0:\n        digit = n % 10\n\n        if digit % 2 != 0:\n            product *= digit\n\n        n //= 10\n\n    if product == 1:\n        return 0\n\n    return product", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    return not bool(stack)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        num = round(num)\n        total += num * num\n    return total\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(input_string: str) -> bool:\n    if input_string is None:\n        raise TypeError(\"Input string cannot be None\")\n\n    input_string = input_string.strip()\n\n    if not input_string:\n        return False\n\n    last_char = input_string[-1]\n    if not last_char.isalpha():\n        return False\n\n    words = input_string.split()\n    last_word = words[-1] if words else \"\"\n\n    if last_word and last_word[-1].isalpha():\n        return False\n\n    return True", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "\nfrom typing import List\n\ndef find_last_nonincreasing_element_index(input_list: List[int]) -> int:\n    if not input_list:\n        return -1\n    \n    for i in range(1, len(input_list)):\n        if input_list[i] >= input_list[i-1]:\n            max_index = i - 1\n\n    return max_index\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "\nfrom typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    \n    return largest_negative, smallest_positive\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_numbers(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        try:\n            a = float(a)\n        except ValueError:\n            pass\n        try:\n            b = float(b)\n        except ValueError:\n            pass\n        return max(a, b)\n    elif isinstance(a, str):\n        try:\n            a = float(a)\n            return max(a, b)\n        except ValueError:\n            return max(a, str(b))\n    elif isinstance(b, str):\n        try:\n            b = float(b)\n            return max(a, b)\n        except ValueError:\n            return max(str(a), b)\n    else:\n        return None", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n: int) -> bool:\n    even_count = 0\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    for i in range(2, n // 2 + 1, 2):\n        even_count += 1\n\n    if even_count == 4:\n        return True\n    else:\n        return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input should be a positive integer.\")\n    \n    def calculate_factorial(num: int) -> int:\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * calculate_factorial(num - 1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= calculate_factorial(i)\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text: str) -> str:\n    modified_text = text.replace(\" \", \"_\")\n    space_count = 0\n    new_text = []\n    \n    for i in range(len(modified_text)):\n        if modified_text[i] == \" \":\n            space_count += 1\n        else:\n            if space_count > 2:\n                new_text.append(\"-\")\n            else:\n                new_text.append(\" \")\n            space_count = 0\n            \n            new_text.append(modified_text[i])\n    \n    if space_count > 2:\n        new_text.append(\"-\")\n        \n    return \"\".join(new_text)\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name: str) -> str:\n    if len(file_name) == 0:\n        return 'Invalid length'\n\n    if file_name.count('.') != 1:\n        return 'Invalid dot presence'\n\n    file_name_parts = file_name.split('.')\n\n    if len(file_name_parts[0]) == 0 or not file_name_parts[0].isalpha():\n        return 'Invalid substring before dot'\n\n    valid_extensions = ['txt', 'exe', 'dll']\n    if file_name_parts[1] not in valid_extensions:\n        return 'Invalid extension'\n\n    return 'Yes'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "\nfrom typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "\nimport math\n\ndef words_in_sentence(input_sentence: str) -> str:\n    words = input_sentence.split()\n    prime_length_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_length_words.append(word)\n    return ' '.join(prime_length_words)\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x: str, n: str) -> bool:\n    numerator1, denominator1 = map(int, x.split('/'))\n    numerator2, denominator2 = map(int, n.split('/'))\n    \n    if denominator1 == 0 or denominator2 == 0:\n        return False\n    \n    result_num = numerator1 * numerator2\n    result_den = denominator1 * denominator2\n    \n    return result_num % result_den == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "import typing\n\ndef order_by_points(integers: typing.List[int]) -> typing.List[int]:\n    digit_sums = {num: sum(int(digit) for digit in str(num)) for num in integers}\n    sorted_integers = sorted(integers, key=lambda x: (digit_sums[x], integers.index(x)))\n    return sorted_integers", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/146", "completion": "def count_special_numbers(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n: int) -> int:\n    a = []\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "\nfrom typing import List\n\nPLANETS = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef find_planets_between(first_planet: str, second_planet: str) -> List[str]:\n    if first_planet == second_planet:\n        return []\n    \n    if first_planet not in PLANETS:\n        raise ValueError(f\"Invalid planet name: {first_planet}\")\n    \n    if second_planet not in PLANETS:\n        raise ValueError(f\"Invalid planet name: {second_planet}\")\n    \n    index1 = PLANETS.index(first_planet)\n    index2 = PLANETS.index(second_planet)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return sorted(PLANETS[index1+1:index2], key=lambda planet: PLANETS.index(planet))\n", "result": "failed: object of type 'NoneType' has no len()", "passed": false}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    def sort_key(x):\n        return (len(x), x)\n\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n\n    result.sort(key=sort_key)\n    return result.", "result": "failed: invalid syntax (<string>, line 27)", "passed": false}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n: int, x: int, y: int) -> int:\n    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "from typing import List\n\ndef double_the_difference(number_list: List[int]) -> int:\n    sum_of_squares = 0\n    \n    for number in number_list:\n        if isinstance(number, int) and number > 0 and number % 2 != 0:\n            sum_of_squares += number ** 2\n    \n    return sum_of_squares\n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    if len(game) != len(guess):\n        raise ValueError(\"The game and guess lists must have the same length.\")\n    \n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "\nfrom typing import List, Optional\n\ndef strongest_extension(class_name: str, extensions: List[str]) -> Optional[str]:\n    if not extensions:\n        return None\n\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        uppercase_count = sum(1 for char in extension if char.isupper())\n        lowercase_count = sum(1 for char in extension if char.islower())\n        strength = uppercase_count - lowercase_count\n\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n            \n    return f\"{class_name}.{strongest_extension}\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a == b:\n        return True\n    \n    if is_rotation(a, b):\n        return True\n    \n    return False\n\ndef is_rotation(word1, word2):\n    return len(word1) == len(word2) and word2 in word1+word1", "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "completion": "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n    \n    while num != 0:\n        digit = num % 10\n        \n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        num //= 10\n    \n    return (even_count, odd_count)", "result": "timed out", "passed": false}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number: int) -> str:\n    roman_map = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    if not isinstance(number, int) or number < 1:\n        raise ValueError(\"Number must be a positive integer\")\n\n    result = \"\"\n\n    for value, symbol in sorted(roman_map.items(), reverse=True):\n        while number >= value:\n            result += symbol\n            number -= value\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_word = \"\"\n    max_unique_character_count = 0\n    \n    for word in words:\n        unique_character_count = len(set(word))\n        \n        if unique_character_count > max_unique_character_count:\n            max_word = word\n            max_unique_character_count = unique_character_count\n        elif unique_character_count == max_unique_character_count and word < max_word:\n            max_word = word\n    \n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    # Calculate total number of eaten carrots\n    total_eaten = number + need\n\n    # Calculate number of carrots left after meals using max function\n    carrots_left = max(remaining - total_eaten, 0)\n\n    return [total_eaten, carrots_left]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "completion": "\nfrom typing import List\n\ndef evaluate_expression(operators: List[str], operands: List[int]) -> int:\n    if len(operators) != len(operands) - 1:\n        raise ValueError(\"Invalid input: Number of operators should be one less than the number of operands\")\n\n    expression = \"\"\n    for i in range(len(operands)):\n        expression += str(operands[i])\n        if i < len(operators):\n            expression += operators[i]\n\n    return eval(expression)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "\nfrom typing import List\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    even_digits = []\n\n    for num in range(min(a, b), max(a, b) + 1):\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_digits.append(digit)\n            num = num // 10\n    \n    return even_digits\n", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/18", "completion": "import re\n\ndef count_occurrences(text: str, pattern: str) -> int:\n    if text is None or pattern is None:\n        raise ValueError(\"Both 'text' and 'pattern' parameters must be provided.\")\n    \n    count = len(re.findall(pattern, text))\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    number_words = numbers.split()\n    digit_map = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4',\n                 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    digit_list = [digit_map[word] for word in number_words if word in digit_map]\n    digit_list.sort()\n    sorted_words = [key for key, value in digit_map.items() if value in digit_list]\n    sorted_numbers = ' '.join(sorted_words)\n    return sorted_numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n\n    min_diff = float('inf')\n    closest_elements = ()\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n\n        if diff < min_diff:\n            min_diff = diff\n            closest_elements = (numbers[i], numbers[i+1])\n\n    return closest_elements", "result": "failed: ", "passed": false}
