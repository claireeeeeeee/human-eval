{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Checks if there are any two numbers in the given list that are closer to each other\n    (with a difference less than the given threshold).\n\n    Args:\n    - numbers (List[float]): A list of numbers.\n    - threshold (float): The maximum allowed difference between two numbers.\n\n    Returns:\n    - bool: True if there are two numbers closer to each other than the threshold, False otherwise.\n    \"\"\"\n    \n    # Check if the input is valid\n    if not isinstance(numbers, list):\n        raise TypeError(\"The 'numbers' parameter should be a list of numbers.\")\n    \n    if not all(isinstance(num, (int, float)) for num in numbers):\n        raise ValueError(\"The 'numbers' list should only contain numeric values.\")\n    \n    if not isinstance(threshold, (int, float)):\n        raise TypeError(\"The 'threshold' parameter should be a number.\")\n    \n    if threshold < 0:\n        raise ValueError(\"The 'threshold' parameter should be a non-negative number.\")\n    \n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Iterate through the sorted list of numbers\n    for i in range(len(sorted_numbers) - 1):\n        # Check if the difference between the current and next number is less than the threshold\n        if abs(sorted_numbers[i+1] - sorted_numbers[i]) < threshold:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(input_string: str) -> List[str]:\n    groups = []\n    stack = []\n    current_group = \"\"\n    \n    for char in input_string:\n        if char == \"(\":\n            stack.append(char)\n            if len(stack) > 1:\n                current_group += char\n        elif char == \")\":\n            if len(stack) > 1:\n                current_group += char\n            if stack:\n                stack.pop()\n            if len(stack) == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif stack:\n            current_group += char\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Truncates the decimal part from a given number.\n\n    Args:\n        number (float): The number from which to extract the decimal part.\n\n    Returns:\n        float: The truncated decimal part of the given number.\n    \"\"\"\n    if not isinstance(number, float):\n        raise TypeError(\"Input must be a float.\")\n    if number <= 0:\n        raise ValueError(\"Input must be a positive floating-point number.\")\n\n    decimal_part = number % 1\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef check_balance_below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        return 0  # handle empty list scenario\n\n    mean = sum(numbers) / len(numbers)\n    sum_absolute_differences = 0\n\n    for number in numbers:\n        absolute_difference = abs(number - mean)\n        sum_absolute_differences += absolute_difference\n\n    mean_abs_dev = sum_absolute_differences / len(numbers)  # improve variable name\n\n    return mean_abs_dev"}
{"task_id": "HumanEval/5", "completion": "\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimiter)\n\n    result.append(numbers[-1])\n\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split(' ')\n    result = []\n\n    for group in groups:\n        depth = 0\n        max_depth = 0\n\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n\n            max_depth = max(max_depth, depth)\n\n        result.append(max_depth)\n\n    return result"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring.lower() in s.lower()]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    sum_of_numbers = sum(numbers)\n    \n    from functools import reduce\n    product_of_numbers = reduce(lambda x, y: x*y, numbers)\n    \n    return sum_of_numbers, product_of_numbers"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    \n    if len(numbers) == 0:\n        return rolling_max_list\n    \n    current_max = numbers[0]\n    rolling_max_list.append(current_max)\n    \n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "import string\n\ndef is_palindrome(string: str) -> bool:\n    return string.lower() == string.lower()[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return \"\"\n    longest_suffix = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        if string[i:] == string[i:][::-1]:\n            longest_suffix = string[i:]\n            break\n    return string + string[:len(string) - len(longest_suffix)][::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import Sequence\n\ndef string_xor(a: Sequence[str], b: Sequence[str]) -> str:\n    result = []\n    for char_a, char_b in zip(a, b):\n        if char_a != char_b:\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = \"\"\n    for string in strings:\n        if not isinstance(string, str):\n            raise TypeError(\"Input list should only contain strings.\")\n        \n        if len(string) > len(longest_string) or not longest_string:\n            longest_string = string\n    \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Inputs must be integers.\")\n\n    return math.gcd(a, b)"}
{"task_id": "HumanEval/14", "completion": "\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Returns a string consisting of numbers from 0 to n, separated by a space.\n    \n    Args:\n        n (int): The upper limit of the number sequence.\n        \n    Returns:\n        str: A string containing numbers from 0 to n, separated by a space.\n        \n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    numbers = [str(num) for num in range(n+1)]\n    return \" \".join(numbers)"}
{"task_id": "HumanEval/16", "completion": "from typing import List\n\ndef count_distinct_characters(string: str) -> int:\n    distinct_character_list: List[str] = []\n    lowercase_string: str = string.lower()\n\n    for char in lowercase_string:\n        if char not in distinct_character_list:\n            distinct_character_list.append(char)\n    \n    return len(distinct_character_list)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    if not music_string:\n        raise ValueError(\"Invalid input: music_string cannot be empty\")\n\n    notes = music_string.split()\n    beats = []\n    \n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note.endswith('|'):\n            beats.append(2)\n        elif note.endswith('.|'):\n            beats.append(1)\n        else:\n            raise ValueError(f\"Invalid input note: {note}\")\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if not isinstance(string, str) or not isinstance(substring, str):\n        raise TypeError(\"Both string and substring should be of type str\")\n\n    if len(substring) > len(string):\n        raise ValueError(\"Substring length cannot exceed original string length\")\n\n    count = string.count(substring)\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    numerals: List[str] = numbers.split()\n    \n    num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    sorted_numerals = sorted(numerals, key=lambda x: num_map[x])\n    \n    sorted_str = ' '.join(sorted_numerals)\n    \n    return sorted_str"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    sorted_numbers = sorted(numbers)\n\n    min_diff = float('inf')\n    closest_nums = None\n\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n\n        if diff < min_diff:\n            min_diff = diff\n            closest_nums = (sorted_numbers[i], sorted_numbers[i + 1])\n\n    return closest_nums"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) == 0:\n        return []\n    \n    minimum = min(numbers)\n    maximum = max(numbers)\n    range_value = maximum - minimum\n    \n    if range_value == 0:\n        return [0.0] * len(numbers)\n    \n    rescaled_numbers = [(number - minimum) / range_value for number in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "\nimport math\n\ndef largest_divisor(n: int) -> int:\n    if n < 2:\n        raise ValueError(\"Input must be greater than or equal to 2.\")\n    \n    largest = 1\n\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            largest = i\n\n    return largest\n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n > 1:\n        factors.append(n)\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = [number for number in numbers if numbers.count(number) == 1]\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string):\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n\n    if len(string) == 0:\n        return \"\"\n\n    def flip_character_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    character_list = [flip_character_case(char) for char in string]\n\n    return ''.join(character_list)\n"}
{"task_id": "HumanEval/28", "completion": "\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = \"\"\n    for string in strings:\n        result += string\n    return result\n"}
{"task_id": "HumanEval/29", "completion": "\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    if prefix == '':\n        return []\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(input_list: list) -> list:\n    positive_nums = [num for num in input_list if num > 0]\n    return positive_nums\n"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float) -> float:\n    result = 0\n    for i, coeff in enumerate(xs):\n        result += coeff * (x ** i)\n    return result\n\ndef find_zero(xs: list) -> float:\n    # Iterate through a range of values for x\n    for x in range(-10, 11):\n        if abs(poly(xs, x)) < 0.0001:  # Check if the value of poly(xs, x) is close to 0\n            return x\n    return None"}
{"task_id": "HumanEval/33", "completion": "from typing import List\n\ndef sort_third_and_merge(input_list: List[int]) -> List[int]:\n    sorted_output = sorted(input_list)\n    divisible_by_three = sorted_output[::3]\n\n    index_temp = 0\n    output = []\n    for i in range(len(input_list)):\n        if i % 3 == 0:\n            output.append(divisible_by_three[index_temp])\n            index_temp += 1\n        else:\n            output.append(input_list[i])\n\n    return output\n\n\nThis code defines the `sort_third_and_merge` function which takes a list of integers `input_list` as an argument and returns a new list according to the given requirements.\n\nThe function first sorts the `input_list` using the `sorted()` function and stores the sorted list in the `sorted_output` variable. It then extracts every third element starting from index 0 of the `sorted_output` list and stores it in the `divisible_by_three` list.\n\nThe function then iterates over the indices of the `input_list` using a counter variable `i`. If `i` is divisible by 3, it appends the corresponding element from the `divisible_by_three` list to the `output` list. Otherwise, it appends the element from the `input_list` at index `i` to the `output` list.\n\nFinally, the function returns the `output` list which is the desired result."}
{"task_id": "HumanEval/34", "completion": "def unique(input_list: list) -> list:\n    unique_elements = sorted(set(input_list))\n    return unique_elements"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for num in range(1, n + 1):\n        if num % 11 == 0 or num % 13 == 0:\n            if '7' in str(num):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(input_list: list) -> list:\n    if len(input_list) % 2 != 0:\n        raise ValueError(\"Input list should have an even length\")\n\n    output_list = []\n    sorted_even_values = sorted(input_list[::2])\n\n    for i, value in enumerate(input_list):\n        if i % 2 == 0:\n            output_list.append(sorted_even_values[i // 2])\n\n    return output_list"}
{"task_id": "HumanEval/38", "completion": "\ndef split_into_groups(input_string: str, group_size: int) -> list[str]:\n    return [input_string[i:i+group_size] for i in range(0, len(input_string), group_size)]\n\ndef encode_cyclic(input_string: str) -> str:\n    if input_string is None or len(input_string) == 0:\n        return \"\"\n\n    groups = split_into_groups(input_string, 3)\n    encoded_groups = [group[1:] + group[0] for group in groups if len(group) == 3]\n    return ''.join(encoded_groups)\n\ndef decode_cyclic(input_string: str) -> str:\n    if input_string is None or len(input_string) == 0:\n        return \"\"\n\n    groups = split_into_groups(input_string, 3)\n    decoded_groups = [group[-1] + group[:-1] for group in groups if len(group) == 3]\n    return ''.join(decoded_groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    if n <= 0:\n        return None\n\n    fibonacci = [0, 1]\n    while len(fibonacci) < n:\n        next_number = fibonacci[-1] + fibonacci[-2]\n        fibonacci.append(next_number)\n\n    prime_fibs = []\n    for number in fibonacci:\n        if number > 1:\n            for i in range(2, int(number ** 0.5) + 1):\n                if number % i == 0:\n                    break\n            else:\n                prime_fibs.append(number)\n\n    if len(prime_fibs) >= n:\n        return prime_fibs[n-1]\n    else:\n        return None"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n\n    l.sort()\n\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            total = l[i] + l[left] + l[right]\n\n            if total == 0:\n                return True\n\n            if total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(num_cars):\n    if not isinstance(num_cars, int):\n        raise TypeError(\"Input must be an integer\")\n\n    if num_cars <= 0:\n        return 0\n\n    total_collisions = num_cars * (num_cars - 1) // 2\n\n    return total_collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(nums):\n    unique_elements = set()\n\n    for num in nums:\n        if -num in unique_elements:\n            return True\n\n        unique_elements.add(num)\n\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "import math\n\ndef change_base(x: int, base: int) -> str:\n    decimal = 0\n    result = \"\"\n    \n    # Convert x to decimal equivalent\n    for i, digit in enumerate(str(x)[::-1]):\n        decimal += int(digit) * int(math.pow(base, i))\n    \n    # Convert decimal to desired base\n    while decimal > 0:\n        remainder = decimal % base\n        result += str(remainder)\n        decimal = decimal // base\n    \n    # Reverse the result string\n    return result[::-1]"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(side_length, height):\n    if side_length <= 0 or height <= 0:\n        raise ValueError(\"Side length and height must be positive numbers.\")\n        \n    return 0.5 * side_length * height"}
{"task_id": "HumanEval/46", "completion": "def fibonacci_sequence_sum(sequence_length: int) -> int:\n    if sequence_length <= 0:\n        raise ValueError(\"The sequence length must be a positive integer.\")\n    \n    if sequence_length == 1:\n        return 0\n    elif sequence_length == 2:\n        return 2\n    \n    fib_sequence = [0, 0, 2, 0]  \n    for i in range(4, sequence_length + 1):\n        fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2] + fib_sequence[i - 3] + fib_sequence[i - 4])\n    \n    return fib_sequence[sequence_length]"}
{"task_id": "HumanEval/47", "completion": "\nfrom typing import List\n\nclass EmptyListError(Exception):\n    pass\n\ndef calculate_median(numbers: List[int]) -> float:\n    \"\"\"\n    Calculates the median of a list of numbers.\n\n    Args:\n        numbers (List[int]): List of numbers.\n\n    Returns:\n        float: The median value.\n\n    Raises:\n        EmptyListError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise EmptyListError(\"List is empty\")\n\n    sorted_numbers = sorted(numbers)\n    length = len(sorted_numbers)\n\n    if length % 2 == 1:\n        return sorted_numbers[length // 2]\n    else:\n        mid1 = sorted_numbers[length // 2 - 1]\n        mid2 = sorted_numbers[length // 2]\n        return (mid1 + mid2) / 2\n"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str) -> bool:\n    if not text:\n        return True\n    \n    cleaned_text = ''.join(c for c in text.lower() if c.isalnum())\n    \n    for i in range(len(cleaned_text) // 2):  \n        if cleaned_text[i] != cleaned_text[-i - 1]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Returns 2 raised to the power of n modulo p.\n    Raises a ValueError if n or p is not an integer.\n    Raises a ValueError if n is negative or p is non-positive.\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(p, int):\n        raise ValueError(\"Both n and p must be integers\")\n    \n    if n < 0 or p <= 0:\n        raise ValueError(\"n must be a non-negative integer and p must be a positive integer\")\n    \n    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/0", "completion": "\ndef has_close_elements(lst, threshold):\n    if lst is None:\n        raise ValueError(\"Input list cannot be None\")\n        \n    if threshold < 0:\n        raise ValueError(\"Threshold cannot be negative\")\n    \n    threshold = abs(threshold)\n    \n    lst.sort()\n    \n    for i in range(len(lst) - 1):\n        if abs(lst[i+1] - lst[i]) <= threshold:\n            return True\n    \n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\ndef separate_nested_parentheses(input_string):\n    \"\"\"Separates the nested parentheses groups into separate strings.\"\"\"\n\n    stack = []\n    result = []\n\n    for char in input_string:\n        if char == '(':\n            stack.append([])\n        elif char == ')':\n            if stack:\n                group = stack.pop()\n                if stack:\n                    stack[-1].append(''.join(group))\n                else:\n                    result.append(''.join(group))\n        elif stack:\n            stack[-1].append(char)\n\n    return result\n\n\ntest_cases = [\"((A)(B))\", \"(((A)))\", \"()\", \"()()\", \"(A)(B)\", \"((A(B))(C)(D))\"]\nfor test_case in test_cases:\n    print(separate_nested_parentheses(test_case))\n"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number):\n    if not isinstance(number, (int, float)):\n        raise ValueError(\"Input must be a number\")\n    \n    # Extract the decimal part of the number\n    decimal_part = number - int(number)\n    return decimal_part\n\n\ndef test_truncate_number():\n    # Test Case 1: Input an integer number\n    assert truncate_number(5) == 0.0\n\n    # Test Case 2: Input a float number\n    assert truncate_number(5.8) == 0.8\n\n    # Test Case 3: Input a negative float number\n    assert truncate_number(-3.1415) == -0.1415\n\n    # Test Case 4: Input 0\n    assert truncate_number(0) == 0.0\n    \n    # Test Case 5: Input a non-numeric value\n    try:\n        truncate_number(\"abc\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a number\"\n    \n    # Test Case 6: Input an out-of-range value\n    try:\n        truncate_number(10**100)\n    except ValueError as e:\n        assert str(e) == \"Input must be a number\"\n\ntest_truncate_number()\n"}
{"task_id": "HumanEval/3", "completion": "\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n"}
{"task_id": "HumanEval/4", "completion": "\nfrom typing import List, Union\n\ndef validate_input(numbers: List[float]) -> bool:\n    if isinstance(numbers, list) and all(isinstance(num, float) for num in numbers) and len(numbers) > 0:\n        return True\n    return False\n\ndef calculate_mean(numbers: List[float]) -> float:\n    return sum(numbers) / len(numbers)\n\ndef calculate_absolute_differences(numbers: List[float], mean: float) -> List[float]:\n    return [abs(num - mean) for num in numbers]\n\ndef calculate_average(numbers: List[float]) -> float:\n    return sum(numbers) / len(numbers)\n\ndef calculate_mad(numbers: List[float]) -> Union[float, str]:\n    if validate_input(numbers):\n        mean = calculate_mean(numbers)\n        absolute_differences = calculate_absolute_differences(numbers, mean)\n        average = calculate_average(absolute_differences)\n        return average\n    return \"Invalid input\"\n\nnumbers = [1.5, 2.5, 3.5, 4.5, 5.5]\nmad = calculate_mad(numbers)\nprint(mad)  # Output: 1.0\n\nempty_list = []\ninvalid_input = [1.5, 2.5, \"3.5\", 4.5, 5.5]\nnegative_numbers = [-1.5, -2.5, -3.5, -4.5, -5.5]\nsingle_element_list = [10.0]\nequal_values = [3.0, 3.0, 3.0, 3.0, 3.0]\n\nprint(calculate_mad(empty_list))  # Output: Invalid input\nprint(calculate_mad(invalid_input))  # Output: Invalid input\nprint(calculate_mad(negative_numbers))  # Output: 2.0\nprint(calculate_mad(single_element_list))  # Output: 0.0\nprint(calculate_mad(equal_values))  # Output: 0.0\n"}
{"task_id": "HumanEval/5", "completion": "\ndef intersperse(lst, delimiter):\n    if not lst:\n        return []\n    \n    result = []\n    for i in range(len(lst)-1):\n        result.append(lst[i])\n        result.append(delimiter)\n    \n    result.append(lst[-1])\n    \n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Parses the input string and returns a list of lengths of nested parentheses pairs.\n    \n    Args:\n        paren_string (str): The input string to be parsed.\n    \n    Returns:\n        List[int]: A list of lengths of nested parentheses pairs.\n    \"\"\"\n    stack = []\n    result = []\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                start = stack.pop()\n                result.append((start, i))\n            else:\n                return []\n    \n    if stack:\n        return []\n    \n    return [r[1] - r[0] + 1 for r in result]\n\ntest_cases = [\n    {\"input\": \"((a)b)c\", \"expected_output\": [5, 3]},\n    {\"input\": \"abc\", \"expected_output\": []},\n    {\"input\": \"((\", \"expected_output\": []},\n    {\"input\": \"))\", \"expected_output\": []},\n    {\"input\": \"(abc))\", \"expected_output\": []},\n    {\"input\": \"abc\", \"expected_output\": []},\n]\n\nfor test_case in test_cases:\n    input_str = test_case[\"input\"]\n    expected_output = test_case[\"expected_output\"]\n    \n    assert parse_nested_parens(input_str) == expected_output\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/7", "completion": "\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter a list of strings based on a given substring.\n    \n    Args:\n        strings: The list of strings to filter.\n        substring: The substring to filter by.\n    \n    Returns:\n        The filtered list of strings.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError('Input strings must be a list')\n    \n    if not isinstance(substring, str):\n        raise TypeError('Substring must be a string')\n    \n    result = []\n    \n    for string in strings:\n        if substring in string:\n            result.append(string)\n    \n    return result\n"}
{"task_id": "HumanEval/8", "completion": "\ndef calculate_sum_product(numbers):\n    if not numbers or len(numbers) == 0:\n        return (0, 0)\n\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return (total_sum, product)\n"}
{"task_id": "HumanEval/9", "completion": "\nfrom collections import deque\n\ndef rolling_max(nums, k):\n    if not nums or k <= 0 or k > len(nums):\n        return []\n\n    result = []\n    window = deque()\n\n    for i in range(len(nums)):\n        # Remove elements outside the window\n        while window and window[0] < i - k + 1:\n            window.popleft()\n\n        # Remove smaller elements from the window\n        while window and nums[window[-1]] < nums[i]:\n            window.pop()\n\n        window.append(i)\n\n        # Add the maximum element for the current window\n        if i >= k - 1:\n            result.append(nums[window[0]])\n\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\ndef make_palindrome(s):\n    # Find the longest palindrome suffix within the supplied string\n    def find_longest_palindrome_suffix(s):\n        i = len(s) - 1\n        while i >= 0:\n            if s[:i + 1] == s[:i + 1][::-1]:\n                return s[i + 1:]\n            i -= 1\n        return s\n\n    # Reverse the string prefix that comes before the palindrome suffix\n    def reverse_prefix(s, prefix_length):\n        return s[:prefix_length][::-1]\n\n    # Append the reversed prefix to the end of the string\n    def append_reversed_prefix(s, reversed_prefix):\n        return s + reversed_prefix\n\n    # Main function logic\n    longest_palindrome_suffix = find_longest_palindrome_suffix(s)\n    reversed_prefix = reverse_prefix(s, len(s) - len(longest_palindrome_suffix))\n    return append_reversed_prefix(s, reversed_prefix)\n"}
{"task_id": "HumanEval/11", "completion": "\ndef string_xor(str1, str2):\n    if len(str1) != len(str2):\n        raise ValueError(\"Input strings must be of equal length\")\n\n    result = \"\"\n    for char1, char2 in zip(str1, str2):\n        result += chr(ord(char1) ^ ord(char2))\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\ndef longest(strings):\n    if len(strings) == 0:\n        return \"Error: Input list is empty\"\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (GCD) of two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The greatest common divisor of `a` and `b`.\n\n    Raises:\n        ValueError: If either `a` or `b` is not an integer.\n    \"\"\"\n\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both input parameters must be integers\")\n\n    a = abs(a)\n    b = abs(b)\n\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    while b != 0:\n        temp = b\n        b = a % b\n        a = temp\n\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\ndef all_prefixes(s: str) -> list:\n    \"\"\"\n    Generates a list of all prefixes of the input string.\n\n    Example usage:\n    >>> all_prefixes(\"hello\")\n    ['', 'h', 'he', 'hel', 'hell', 'hello']\n\n    :param s: The input string\n    :type s: str\n    :return: The list of prefixes\n    :rtype: list\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n\n    prefixes = []\n    for i in range(len(s) + 1):\n        prefixes.append(s[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    result = ''\n    for num in range(1, n + 1):\n        result += str(num)\n\n    return result\n"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(input_string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in the input string, regardless of case.\n\n    Example test cases:\n    count_distinct_characters(\"Hello\") => 4\n    count_distinct_characters(\"Python\") => 6\n    \"\"\"\n\n    # Add input validation to handle non-string inputs\n    if not isinstance(input_string, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Add error handling for None or empty string inputs\n    if input_string is None or input_string == \"\":\n        # Raise an exception or return an appropriate value\n        raise ValueError(\"Input string cannot be None or empty.\")\n\n    # Convert the input string to lowercase\n    lowercase_string = input_string.lower()\n\n    # Initialize an empty set to store distinct characters\n    distinct_characters = set()\n\n    # Iterate through each character in the lowercase string\n    for char in lowercase_string:\n        # Add each character to the set of distinct characters\n        distinct_characters.add(char)\n\n    # Calculate the count of distinct characters\n    count = len(distinct_characters)\n\n    # Return the count of distinct characters\n    return count\n"}
{"task_id": "HumanEval/17", "completion": "\ndef parse_music(music_string):\n    # Split the music_string into a list of individual notes\n    notes = music_string.split()\n    \n    # Evaluate the duration of each note and convert it into the corresponding number of beats\n    beats = []\n    for note in notes:\n        try:\n            duration = int(note)\n            if duration <= 0:\n                raise ValueError(f\"Invalid note duration: '{note}'. Duration must be a positive integer.\")\n            beats.append(duration)\n        except ValueError:\n            raise ValueError(f\"Invalid note duration: '{note}'. Duration must be a positive integer.\")\n    \n    # Store the beats of each note in a list\n    beats_list = []\n    for duration in beats:\n        beats_list.extend([1] * duration)\n    \n    # Return the list of beats\n    return beats_list\n"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(main_string: str, substring: str) -> int:\n    \"\"\"\n    Count the number of non-overlapping occurrences of a substring within a main string.\n    Args:\n        main_string (str): The main string.\n        substring (str): The substring to count occurrences of.\n    Returns:\n        int: The number of non-overlapping occurrences.\n    \"\"\"\n    count = 0\n\n    if not main_string or not substring:\n        return count\n    \n    substring_length = len(substring)\n    main_string_length = len(main_string)\n\n    for i in range(main_string_length - substring_length + 1):\n        if main_string[i:i+substring_length] == substring:\n            count += 1\n    \n    return count\n\n# Test Cases\nprint(how_many_times(\"abababab\", \"aba\"))  # Output: 2\nprint(how_many_times(\"abcdefg\", \"xyz\"))  # Output: 0\nprint(how_many_times(\"aaaaaaa\", \"aa\"))   # Output: 6\nprint(how_many_times(\"aaaaaaa\", \"\"))     # Output: 0\n"}
{"task_id": "HumanEval/19", "completion": "\ndef sort_numbers(numbers):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers\n"}
{"task_id": "HumanEval/20", "completion": "\ndef find_closest_pair(numbers):\n    \"\"\"\n    Find the closest pair of numbers in the given list based on their absolute difference.\n    \n    Args:\n        numbers (list): A list of numbers.\n        \n    Returns:\n        list: The closest pair of numbers in sorted order, or None if the input list is empty.\n    \"\"\"\n    if not numbers:\n        return None\n    \n    closest_distance = float('inf')\n    closest_pair = ()\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            \n            if distance < closest_distance:\n                closest_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n            elif distance == closest_distance and numbers[i] < closest_pair[0]:\n                closest_pair = (numbers[i], numbers[j])\n    \n    return sorted(closest_pair)\n"}
{"task_id": "HumanEval/21", "completion": "\ndef subtask1():\n    # Revised implementation for subtask 1\n    pass\n\ndef subtask2():\n    # Revised implementation for subtask 2\n    pass\n\ndef subtask3():\n    # Revised implementation for subtask 3\n    pass\n"}
{"task_id": "HumanEval/22", "completion": "\ndef filter_integers(input_list):\n    \"\"\"\n    Filter out non-integer values from the input list and return a new list containing only the integer values.\n    \n    Args:\n        input_list (list): The input list that may contain any Python values.\n        \n    Returns:\n        list: A new list containing only the integer values from the input list.\n    \"\"\"\n    \n    filtered_list = []\n    \n    for value in input_list:\n        if isinstance(value, int):\n            filtered_list.append(value)\n            \n    return filtered_list\n"}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    \"\"\"\n    Returns the length of a given string.\n\n    Examples:\n    >>> strlen(\"Hello\")\n    5\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"This is a test string\")\n    21\n    >>> strlen(\"12345\")\n    5\n    >>> strlen(None)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a string\n    >>> strlen(12345)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input must be a string\n    >>> strlen(\"     \")\n    5\n    >>> strlen(\"Hello, world! \u3053\u3093\u306b\u3061\u306f\")\n    16\n    \"\"\"\n    if string is None:\n        raise ValueError(\"Input must be a string\")\n\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n\n    return len(string.strip())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    largest_proper_divisor = 1\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            largest_proper_divisor = i\n    \n    return largest_proper_divisor\n"}
{"task_id": "HumanEval/25", "completion": "\nimport math\n\ndef factorize(n: int) -> list:\n    if not isinstance(n, int) or n < 2:\n        return []\n    \n    factors = []\n    \n    # Handle cases where n is divisible by 2\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # Handle odd prime factors starting from 3\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    \n    # If n itself is a prime number\n    if n > 1:\n        factors.append(n)\n    \n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    number_counts = {}\n    \n    for number in numbers:\n        if number in number_counts:\n            number_counts[number] += 1\n        else:\n            number_counts[number] = 1\n    \n    unique_numbers = [number for number in numbers if number_counts[number] == 1]\n    \n    return unique_numbers\n"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string):\n    \"\"\"\n    Flips the case of each character in the provided string.\n    \n    Args:\n        string (str): The input string.\n        \n    Returns:\n        str: The input string with each character's case flipped.\n        \n    Raises:\n        ValueError: If the provided input is not a string.\n    \"\"\"\n    if not isinstance(string, str):\n        raise ValueError(\"Invalid input. Only string inputs are allowed.\")\n    \n    flipped_string = []\n    \n    for char in string:\n        if char.isupper():\n            flipped_string.append(char.lower())\n        elif char.islower():\n            flipped_string.append(char.upper())\n        else:\n            flipped_string.append(char)\n    \n    return \"\".join(flipped_string)\n"}
{"task_id": "HumanEval/28", "completion": "\ndef concatenate(strings):\n    \"\"\"\n    Concatenates a list of strings into a single string.\n\n    Args:\n        strings (list): A list of strings to be concatenated.\n\n    Returns:\n        str: The concatenated string.\n\n    Raises:\n        TypeError: If the input parameter is not a list.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input parameter must be a list.\")\n\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings_list = []\n    if not isinstance(strings, list) or not isinstance(prefix, str):\n        return filtered_strings_list\n    \n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings_list.append(string)\n    \n    return filtered_strings_list\n"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input is not a list\")\n\n    positive_numbers = []\n    for number in numbers:\n        if not isinstance(number, (int, float)):\n            raise TypeError(\"Input contains non-numeric elements\")\n        \n        if number >= 0:\n            positive_numbers.append(number)\n\n    return positive_numbers\n"}
{"task_id": "HumanEval/31", "completion": "\nimport math\n\ndef is_prime(num):\n    \"\"\"\n    Check if a given number is prime or not.\n    \n    Args:\n        num (int): The number to be checked.\n    \n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    try:\n        num = int(num)  # Convert the input to an integer\n    except ValueError:\n        return False    # Return False for invalid or non-numeric inputs\n    \n    if num <= 1:\n        return False    # Return False for numbers less than or equal to 1\n    \n    # Iterate up to the square root of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False    # Return False if the number is divisible by any number in the range\n    \n    return True    # Return True if the number is prime\n"}
{"task_id": "HumanEval/32", "completion": "\ndef function_name(input_parameters):\n    # Implement the function logic here\n    # Add code logic based on the specific requirements\n\n    result = input_parameters * 2  # Placeholder code for the actual implementation\n\n    return result\n"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list) -> list:\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n\n    result_list = []\n    temp_list = []\n\n    for i, value in enumerate(l):\n        if i % 3 == 0:\n            temp_list.append(value)\n        else:\n            result_list.append(value)\n\n    result_list.extend(sorted(temp_list))\n    \n    return result_list\n"}
{"task_id": "HumanEval/34", "completion": "\ndef unique(lst):\n    return list(set(lst))\n"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(lst):\n    if len(lst) == 0:\n        return None\n    else:\n        max_val = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] > max_val:\n                max_val = lst[i]\n        return max_val\n\nlst = []\nassert max_element(lst) == None\n\nlst = [2, 5, 1, 7, 9, 3]\nassert max_element(lst) == 9\n\nlst = [-5, -9, -2, -7]\nassert max_element(lst) == -2\n\nlst = [-1, 2, -5, 4, -3]\nassert max_element(lst) == 4\n\nlst = [2, 5, 9, 9, 7, 3]\nassert max_element(lst) == 9\n"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n):\n    \"\"\"\n    The fizz_buzz function takes an integer n as input and returns a list of strings. The function follows the below rules:\n    - For numbers that are multiples of 3, the string \"Fizz\" should be appended to the list.\n    - For numbers that are multiples of 5, the string \"Buzz\" should be appended to the list.\n    - For numbers that are both multiples of 3 and 5, the string \"FizzBuzz\" should be appended to the list.\n    - For numbers that are neither multiples of 3 nor 5, the string representation of the number should be appended to the list.\n    \n    Parameters:\n    n (int): The upper limit integer value for generating the \"FizzBuzz\" list.\n    \n    Returns:\n    list: The list of strings generated following the \"FizzBuzz\" rules.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    result = []\n    \n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            result.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            result.append(\"Fizz\")\n        elif i % 5 == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n    \n    return result\n"}
{"task_id": "HumanEval/37", "completion": "\nfrom typing import List, Union\n\n\ndef sort_even(l: List[Union[int, str]]) -> List[Union[int, List[Union[int, str]]]]:\n    sorted_list = l.copy()\n    for i in range(0, len(sorted_list), 2):\n        sorted_list[i] = sorted(sorted_list[i])\n    return sorted_list\n\n\ndef test_sort_even():\n    assert sort_even([7, 3, 2, 9, 1, 5, 6, 8, 4]) == [7, [2, 3], 2, [1, 9], 1, [5, 6], 6, [4, 8], 4]\n    assert sort_even([]) == []\n    assert sort_even([1]) == [1]\n    assert sort_even([4, 3, 2, 1]) == [[2, 3], 3, [1, 4], 1]\n    assert sort_even([\"c\", \"a\", \"b\"]) == [[\"a\", \"c\"], \"a\", [\"b\"]]\n    assert sort_even([\"abc\", \"def\", \"ghi\"]) == [[\"abc\", \"def\"], \"def\", [\"ghi\"]]\n    assert sort_even([1, \"b\", 3, \"d\", 5]) == [[1, \"b\"], \"b\", [3, \"d\"], \"d\", [5]]\n    print(\"All test cases passed.\")\n\n\ntest_sort_even()\n"}
{"task_id": "HumanEval/38", "completion": "\ndef extract_final_code(report):\n    code_start = report.index(\"\n\") + 1\n    code_end = report.index(\""}
{"task_id": "HumanEval/39", "completion": "\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    \"\"\"\n    Compute the nth Fibonacci number.\n\n    Args:\n        n (int): The position of the Fibonacci number to compute.\n\n    Returns:\n        int: The nth Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return None\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib_n_minus_2 = 0\n    fib_n_minus_1 = 1\n    fib_n = 0\n    for _ in range(3, n + 1):\n        fib_n = fib_n_minus_2 + fib_n_minus_1\n        fib_n_minus_2 = fib_n_minus_1\n        fib_n_minus_1 = fib_n\n    return fib_n\n\ndef find_nth_prime_fibonacci(n):\n    \"\"\"\n    Find the nth prime Fibonacci number.\n\n    Args:\n        n (int): The position of the prime Fibonacci number to find.\n\n    Returns:\n        int: The nth prime Fibonacci number.\n    \"\"\"\n    if n <= 0:\n        return None\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n    return fib\n\n# Test the function\nprint(find_nth_prime_fibonacci(1))  # Expected output: 2\nprint(find_nth_prime_fibonacci(5))  # Expected output: 11\nprint(find_nth_prime_fibonacci(10))  # Expected output: 89\n"}
{"task_id": "HumanEval/40", "completion": "\nfrom typing import List\n\ndef triples_sum_to_zero(nums: List[int]) -> List[List[int]]:\n    \"\"\"\n    Finds all unique triplets in the given list `nums` that sum to zero.\n    Returns a list of lists containing the triplets.\n    \"\"\"\n    if len(nums) < 3:\n        return []\n\n    nums.sort()\n    result = []\n    n = len(nums)\n\n    for i in range(n - 2):\n        if nums[i] > 0:\n            break\n\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n\n            if total == 0:\n                result.append([nums[i], nums[left], nums[right]])\n\n                while left < right and nums[left] == nums[left + 1]:\n                    left += 1\n\n                while left < right and nums[right] == nums[right - 1]:\n                    right -= 1\n\n                left += 1\n                right -= 1\n\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return result\n"}
{"task_id": "HumanEval/41", "completion": "\nimport random\n\ndef generate_car_positions(n):\n    total_numbers = 100\n    if n > total_numbers:\n        raise ValueError(\"n cannot be greater than the available range of random numbers\")\n        \n    left_to_right = random.sample(range(1, total_numbers+1), n)\n    right_to_left = random.sample(range(1, total_numbers+1), n)\n    return left_to_right, right_to_left\n\ndef find_collisions(left_to_right, right_to_left):\n    collisions = 0\n    sorted_right_to_left = sorted(right_to_left)\n    \n    for left_car in left_to_right:\n        for right_car in sorted_right_to_left:\n            if left_car > right_car:\n                collisions += 1\n            else:\n                break\n            \n    return collisions\n\ndef car_race_collision(n):\n    left_to_right, right_to_left = generate_car_positions(n)\n    collisions = find_collisions(left_to_right, right_to_left)\n    return collisions\n\nprint(generate_car_positions(3))\nprint(find_collisions([12, 45, 67], [89, 34, 56]))\nprint(car_race_collision(3))\n"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    return [i + 1 for i in lst]\n"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    seen = set()\n\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(number, current_base, new_base):\n    \n    def validate_input(number, current_base, new_base):\n        if not isinstance(number, int) or number <= 0:\n            raise ValueError(\"Number must be a valid positive integer.\")\n        if not isinstance(current_base, int) or current_base < 2 or current_base > 10:\n            raise ValueError(\"Current base must be an integer between 2 and 10.\")\n        if not isinstance(new_base, int) or new_base < 2 or new_base > 10:\n            raise ValueError(\"New base must be an integer between 2 and 10.\")\n\n    def convert_to_decimal(number, base):\n        decimal_number = 0\n        power = 0\n\n        while number > 0:\n            remainder = number % 10\n            decimal_number += remainder * base ** power\n            number //= 10\n            power += 1\n\n        return decimal_number\n\n    def convert_to_new_base(decimal_number, new_base):\n        new_number = \"\"\n\n        while decimal_number > 0:\n            remainder = decimal_number % new_base\n            new_number = str(remainder) + new_number\n            decimal_number //= new_base\n\n        return int(new_number)\n\n    validate_input(number, current_base, new_base)\n\n    if current_base == 10:\n        decimal_number = number\n    else:\n        decimal_number = convert_to_decimal(number, current_base)\n\n    if new_base == 10:\n        return decimal_number\n    else:\n        new_number = convert_to_new_base(decimal_number, new_base)\n        return new_number\n\n\n\n# Test Cases\nassert change_base(101, 2, 10) == 5\nassert change_base(5, 10, 2) == 101\nassert change_base(15, 10, 16) == 'F'\nassert change_base(10, 16, 2) == 10000\n"}
{"task_id": "HumanEval/45", "completion": "\ndef add_numbers(a, b):\n    return a + b\n"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int) -> int:\n    \"\"\"\n    Calculate the nth number in the Fibonacci series where:\n    - The Fibonacci series starts with 0, 0, 2, 0\n    - Each subsequent number is the sum of the last 4 numbers in the series\n\n    Args:\n        n (int): The position of the number in the Fibonacci series\n\n    Returns:\n        int: The nth number in the Fibonacci series\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_series = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_series.append(sum(fib_series[-4:]))\n    \n    return fib_series[-1]\n\n\n# Testing the function\nassert fib4(0) == 0\nassert fib4(1) == 0\nassert fib4(2) == 2\nassert fib4(3) == 0\nassert fib4(4) == 2\nassert fib4(5) == 4\nassert fib4(6) == 6\nassert fib4(7) == 8\nassert fib4(8) == 12\nassert fib4(9) == 18\nassert fib4(10) == 28\n# Add more test cases as needed\n\nprint(\"All tests passed!\")\n"}
{"task_id": "HumanEval/47", "completion": "\nfrom typing import List\n\n\ndef calculate_median(nums: List[float]) -> float:\n    if not nums:\n        raise ValueError(\"Input list is empty\")\n\n    if not all(isinstance(num, (int, float)) for num in nums):\n        raise ValueError(\"Input list contains non-numeric elements\")\n\n    sorted_nums = sorted(nums)\n    n = len(sorted_nums)\n\n    if n % 2 == 0:\n        mid1 = sorted_nums[n // 2]\n        mid2 = sorted_nums[n // 2 - 1]\n        median_value = (mid1 + mid2) / 2\n    else:\n        median_value = sorted_nums[n // 2]\n\n    return median_value\n"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Check if a given text is a palindrome.\n\n    Parameters:\n    - text (str): The text to be checked\n\n    Returns:\n    - bool: True if the text is a palindrome, False otherwise\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    if len(text) == 0:\n        return True\n\n    reversed_text = text[::-1]  # Reverse the text\n\n    if text == reversed_text:\n        return True\n    else:\n        return False\n\n\n# Test Cases\nassert is_palindrome(\"\") == True  # Empty string should return True\nassert is_palindrome(\"racecar\") == True  # Palindrome string should return True\nassert is_palindrome(\"hello\") == False  # Non-palindrome string should return False\n\n# Additional Test Cases\nassert is_palindrome(\"level\") == True  # Palindrome string with an odd length should return True\nassert is_palindrome(\"deed\") == True  # Palindrome string with an even length should return True\nassert is_palindrome(\"A man, a plan, a canal: Panama\") == True  # Palindrome string with special characters should return True\nassert is_palindrome(\"python\") == False  # Non-palindrome string should return False\nassert is_palindrome(\"12321\") == True  # Palindrome numeric string should return True.\n"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Calculate the remainder of 2 raised to the power of n when divided by p.\n\n    Args:\n        n (int): The exponent.\n        p (int): The divisor.\n\n    Returns:\n        int: The remainder of 2^n when divided by p.\n    \"\"\"\n\n    # Handle edge case when n is 0\n    if n == 0:\n        return 1\n\n    # Calculate the result using modulo operator\n    result = 2**n % p\n\n    return result\n\n\n# Test the function with example cases\nassert modp(0, 5) == 1\nassert modp(1, 5) == 2\nassert modp(2, 5) == 4\nassert modp(3, 5) == 3\nassert modp(4, 5) == 1\nassert modp(5, 5) == 2\n\n# Additional test cases\nassert modp(10, 7) == 4\nassert modp(15, 10) == 0\nassert modp(7, 3) == 1\nassert modp(9, 2) == 1\nassert modp(20, 13) == 4\n"}
{"task_id": "HumanEval/50", "completion": "\ndef encode_shift(string):\n    encoded_chars = []\n    for char in string:\n        encoded_char = chr((ord(char) + SHIFT_CONST - ord('a')) % ALPHABET_SIZE + ord('a'))\n        encoded_chars.append(encoded_char)\n    encoded_string = \"\".join(encoded_chars)\n    return encoded_string\n\n\ndef decode_shift(string):\n    decoded_chars = []\n    for char in string:\n        decoded_char = chr((ord(char) - SHIFT_CONST - ord('a')) % ALPHABET_SIZE + ord('a'))\n        decoded_chars.append(decoded_char)\n    decoded_string = \"\".join(decoded_chars)\n    return decoded_string\n\nSHIFT_CONST = 5\nALPHABET_SIZE = 26\n"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text: str) -> str:\n    \"\"\"\n    Removes all vowels from the input `text` string.\n    \n    Args:\n        text (str): The input text string.\n        \n    Returns:\n        str: The input text string with all vowels removed.\n        \n    Raises:\n        ValueError: If the input `text` is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input text must be a string\")\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    \n    result = \"\"\n    \n    for char in text:\n        if char not in vowels:\n            result += char\n    \n    return result\n"}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(number_list, threshold):\n    if not isinstance(number_list, list):\n        raise ValueError(\"'number_list' parameter must be a list.\")\n    if not isinstance(threshold, (int, float)):\n        raise ValueError(\"'threshold' parameter must be a number.\")\n\n    for num in number_list:\n        if num >= threshold:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\ndef add(num1, num2):\n    return num1 + num2\n\nresult = add(5, 3)\nprint(result)  # Output: 8\n"}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str) -> bool:\n    if len(s0) != len(s1):\n        return False\n\n    char_counts = {}\n\n    for char in s0:\n        if char not in char_counts:\n            char_counts[char] = 1\n        else:\n            char_counts[char] += 1\n\n    for char in s1:\n        if char not in char_counts:\n            return False\n        else:\n            char_counts[char] -= 1\n            if char_counts[char] == 0:\n                del char_counts[char]\n\n    return len(char_counts) == 0\n"}
{"task_id": "HumanEval/55", "completion": "\ndef fibonacci(n, memo={}):\n    if n < 0:\n        raise ValueError(\"Fibonacci sequence is not defined for negative numbers.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n in memo:\n        return memo[n]\n    else:\n        result = fibonacci(n-1, memo) + fibonacci(n-2, memo)\n        memo[n] = result\n        return result\n"}
{"task_id": "HumanEval/56", "completion": "\ndef check_bracket_balance(brackets):\n    stack = []\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n        else:\n            return None\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n\ntest_cases = [\n    (\"<<>>\", True),\n    (\"<<>>><>\", False),\n    (\"<<<>>>\", False),\n    (\"\", True),\n    (\"()\", True),\n    (\"{[()]}\", True),\n    (\"{[()]\", False),\n    (\"[())]\", False),\n    (\")((\", False),\n    (\"{([])}\", True),\n    (\"{(})\", False),\n    (\"{)(\", False),\n]\n\nfor brackets, expected_result in test_cases:\n    result = check_bracket_balance(brackets)\n    assert result == expected_result, f\"Test failed: input='{brackets}', expected={expected_result}, got={result}\"\n"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(numbers):\n    if len(numbers) <= 1:\n        return True\n    \n    is_increasing = all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))\n    is_decreasing = all(numbers[i] >= numbers[i+1] for i in range(len(numbers)-1))\n    \n    return is_increasing or is_decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements\n\n\ndef test_common():\n    l1 = [1, 2, 3, 4]\n    l2 = [3, 4, 5, 6]\n    assert common(l1, l2) == [3, 4]\n    \n    l1 = [1, 2, 3]\n    l2 = [4, 5, 6]\n    assert common(l1, l2) == []\n    \n    l1 = []\n    l2 = []\n    assert common(l1, l2) == []\n    \n    l1 = [1, 2, 2, 3, 4]\n    l2 = [3, 4, 4, 5, 6]\n    assert common(l1, l2) == [3, 4]\n    \n    l1 = list(range(10**6))\n    l2 = list(range(10**6 - 1000, 10**6))\n    assert common(l1, l2) == list(range(10**6 - 1000, 10**6))\n    \n    print(\"All test cases pass\")\n\ntest_common()\n"}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n):\n    # Step 1: Handle edge cases\n    if not isinstance(n, int):\n        return None\n    \n    if n < 2:\n        return None\n\n    # Step 2: Initialize variables\n    factor = 2\n    largest_prime = None\n\n    # Step 3: Find the largest prime factor\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            largest_prime = factor\n        else:\n            factor += 1\n\n    if n > 1:\n        largest_prime = n\n\n    return largest_prime\n"}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int) -> int:\n    total_sum = 0\n    for num in range(1, n+1):\n        total_sum += num\n    return total_sum\n"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(input_string):\n    bracket_pairs = {\n        '(': ')',\n        '[': ']',\n        '{': '}',\n    }\n    stack = []\n    \n    for char in input_string:\n        if char in bracket_pairs.keys():\n            stack.append(char)\n        elif char in bracket_pairs.values():\n            if not stack or bracket_pairs[stack[-1]] != char:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n\n\n# Test cases\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"()()\"))  # True\nprint(correct_bracketing(\"((()))\"))  # True\nprint(correct_bracketing(\"((())))\"))  # False\nprint(correct_bracketing(\"[(){}[]]\"))  # True\nprint(correct_bracketing(\"[()[{}]]\"))  # True\nprint(correct_bracketing(\"[(){}[]\"))  # False\nprint(correct_bracketing(\"[(){}[]]}\"))  # False\nprint(correct_bracketing(\"{\"))  # False\nprint(correct_bracketing(\"}\"))  # False\n"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(coefficients):\n    if len(coefficients) < 2:\n        return []\n    \n    derivative_coefficients = []\n    \n    for i in range(1, len(coefficients)):\n        derivative_coefficients.append(coefficients[i] * i)\n    \n    return derivative_coefficients\n"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    fibonacci = [0, 1]\n    while len(fibonacci) < n:\n       next_fib = fibonacci[-1] + fibonacci[-2]\n       fibonacci.append(next_fib)\n\n    return fibonacci[:n]\n"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(word):\n    \"\"\"\n    Returns the count of vowels in the given word.\n\n    Args:\n        word (str): The input word.\n\n    Returns:\n        int: The count of vowels in the word.\n    \"\"\"\n    vowel_count = 0\n\n    # Input Validation\n    if not isinstance(word, str):\n        raise TypeError(\"Input must be a string\")\n    # Additional Test Cases - 1\n    if word == \"\":\n        return 0\n\n    # Vowel Counting\n    for ch in word:\n        if ch.lower() in \"aeiou\":\n            vowel_count += 1\n\n    # Handling 'y' as a Vowel\n    if word[-1].lower() == \"y\":\n        vowel_count -= 1\n\n    return vowel_count\n"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x: int, shift: int) -> str:\n    if not isinstance(x, int):\n        raise ValueError(\"`x` should be an integer.\")\n    if not (-10 ** 9 <= x <= 10 ** 9):\n        raise ValueError(\"`x` should be within the valid range of integers (-10^9 to 10^9).\")\n    if not isinstance(shift, int) or shift < 0:\n        raise ValueError(\"`shift` should be a non-negative integer.\")\n        \n    digits = len(str(x))\n    effective_shift = shift % digits\n    shifted_digits = str(x)[-effective_shift:] + str(x)[:-effective_shift]\n    \n    if effective_shift >= digits:\n        shifted_digits = shifted_digits[::-1]\n    \n    return shifted_digits\n"}
{"task_id": "HumanEval/66", "completion": "\ndef sum_ascii(input_string):\n    # Validate the input\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    if not input_string:\n        raise ValueError(\"Input string cannot be empty\")\n\n    # Extract the upper characters from the string\n    upper_chars = [char for char in input_string if char.isupper()]\n\n    # Convert the extracted characters to ASCII codes\n    ascii_codes = [ord(char) for char in upper_chars]\n\n    # Calculate the sum of the ASCII codes\n    ascii_sum = sum(ascii_codes)\n\n    # Return the sum\n    return ascii_sum\n"}
{"task_id": "HumanEval/67", "completion": "\n# Final version of the code\n\ndef function_name(parameter1, parameter2):\n    # Code implementation\n\n    return result\n"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    smallest_value = None\n    smallest_index = None\n\n    for i, num in enumerate(arr):\n        if isinstance(num, int) and num % 2 == 0:\n            if smallest_value is None or num < smallest_value:\n                smallest_value = num\n                smallest_index = i\n\n    if smallest_value is None:\n        return []\n\n    return [smallest_value, smallest_index]\n"}
{"task_id": "HumanEval/69", "completion": "\ndef add_numbers(num1, num2):\n    return num1 + num2\n"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    lst_copy = lst.copy()\n    \n    result = []\n    \n    while lst_copy:\n        min_value = min(lst_copy)\n        result.append(min_value)\n        lst_copy.remove(min_value)\n        \n        if not lst_copy:\n            break\n        \n        max_value = max(lst_copy)\n        result.append(max_value)\n        lst_copy.remove(max_value)\n    \n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n# Step 2: Define the function signature\ndef triangle_area(side1: float, side2: float, side3: float) -> float:\n    \"\"\"\n    Calculate the area of a triangle given the lengths of its sides.\n    \n    Args:\n        side1 (float): The length of the first side of the triangle.\n        side2 (float): The length of the second side of the triangle.\n        side3 (float): The length of the third side of the triangle.\n    \n    Returns:\n        float: The area of the triangle if it is valid, -1 otherwise.\n    \"\"\"\n    \n    # Step 3: Implement the input validation logic\n    if side1 + side2 <= side3 or side2 + side3 <= side1 or side1 + side3 <= side2:\n        return -1\n    \n    # Step 4: Calculate the area of the valid triangle\n    semi_perimeter = (side1 + side2 + side3) / 2\n    area = (semi_perimeter * (semi_perimeter - side1) * (semi_perimeter - side2) * (semi_perimeter - side3)) ** 0.5\n    \n    # Step 5: Return the result\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "\ndef can_items_fly(item_list: list, weight_limit: int) -> bool:\n    if not isinstance(item_list, list):\n        raise TypeError(\"The first parameter must be a list\")\n\n    if not isinstance(weight_limit, int) or weight_limit <= 0:\n        raise ValueError(\"The second parameter must be a positive integer\")\n\n    if item_list != item_list[::-1]:\n        return False\n\n    total_weight = sum(item_list)\n\n    if total_weight > weight_limit:\n        return False\n\n    return True\n"}
{"task_id": "HumanEval/73", "completion": "\n# No changes needed as there is no actual implementation in the provided code.\n"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "\nimport math\n\n# a. Prime number generation\ndef generate_prime_numbers(n):\n    prime_numbers = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers\n\n# b. Multiplication of prime numbers\ndef multiply_prime_numbers(prime_numbers):\n    product = 1\n    for num in prime_numbers:\n        product *= num\n    return product\n\n# c. Verification of prime number multiplication\ndef is_multiply_prime(product):\n    if product < 2:\n        return False\n    for i in range(2, int(math.sqrt(product)) + 1):\n        if product % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    if not isinstance(x, int) or not isinstance(n, int) or n == 0:\n        raise ValueError(\"x and n should be integers, and n cannot be zero.\")\n    \n    if n > 0:\n        power = int(x ** (1 / n))\n        \n        if x == n ** power:\n            return True\n    \n    return False\n"}
{"task_id": "HumanEval/77", "completion": "\ndef is_cube(n):\n    # Confirm that the input is a valid integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Determine the output type and value based on the requirement\n    # Check if the given number is a perfect cube\n    cube_root = round(n**(1/3))\n    if cube_root**3 == n:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/78", "completion": "\ndef is_valid_hexadecimal(num):\n    try:\n        int(num, 16)\n        return True\n    except ValueError:\n        return False\n\ndef count_prime_digits(num):\n    count = 0\n    prime_digits = [2, 3, 5, 7, 11, 13]\n    \n    for digit in num:\n        decimal_digit = int(digit, 16)\n        if decimal_digit in prime_digits:\n            count += 1\n    \n    return count\n\ndef hex_key(num):\n    if not is_valid_hexadecimal(num):\n        return 0\n    \n    return count_prime_digits(num)\n"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to its binary representation.\n\n    Args:\n        decimal (int): The decimal number to convert.\n\n    Returns:\n        str: The binary representation of the decimal number.\n\n    Raises:\n        ValueError: If the decimal number is not a non-negative integer.\n    \"\"\"\n    # Input Validation\n    if type(decimal) != int or decimal < 0:\n        raise ValueError(\"Invalid input. The decimal number must be a non-negative integer.\")\n\n    # Conversion Logic\n    binary_representation = \"\"\n    if decimal == 0:\n        binary_representation = \"0\"\n    else:\n        while decimal > 0:\n            binary_representation = str(decimal % 2) + binary_representation\n            decimal = decimal // 2\n\n    # Formatting: Adding 'db' prefix and suffix\n    binary_representation = \"db\" + binary_representation + \"db\"\n\n    return binary_representation\n\n\ndef test_valid_input():\n    # Test valid input\n    assert decimal_to_binary(0) == \"db0db\"\n    assert decimal_to_binary(1) == \"db1db\"\n    assert decimal_to_binary(10) == \"db1010db\"\n    assert decimal_to_binary(64) == \"db1000000db\"\n\ndef test_invalid_input():\n    # Test invalid input\n    try:\n        decimal_to_binary(-5)\n    except ValueError as e:\n        assert str(e) == \"Invalid input. The decimal number must be a non-negative integer.\"\n\n    try:\n        decimal_to_binary(2.5)\n    except ValueError as e:\n        assert str(e) == \"Invalid input. The decimal number must be a non-negative integer.\"\n\n    try:\n        decimal_to_binary(\"abc\")\n    except ValueError as e:\n        assert str(e) == \"Invalid input. The decimal number must be a non-negative integer.\"\n\n    try:\n        decimal_to_binary(None)\n    except ValueError as e:\n        assert str(e) == \"Invalid input. The decimal number must be a non-negative integer.\"\n\ndef test_edge_cases():\n    # Test edge cases\n    assert decimal_to_binary(2**31 - 1) == \"db1111111111111111111111111111111db\"\n    assert decimal_to_binary(10**100) == \"db110101100111100011110001001101110010111100000001000100100000011111101100010001010010101000100100011011010010110100100100101000101011001001001110111101171db\"\n\ndef test_decimal_to_binary():\n    test_valid_input()\n    test_invalid_input()\n    test_edge_cases()\n\ntest_decimal_to_binary()\n"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(string):\n    # Step 4: Input Validation\n    if not string or len(string) < 3:\n        return False\n    \n    # Step 3: Define Data Structures\n    # We don't need any additional data structures for this implementation\n    \n    # Step 5: Implement the \"is_happy\" Function\n    for i in range(len(string) - 2):\n        if string[i].lower() == string[i+1].lower() == string[i+2].lower():\n            return True\n    \n    return False\n\n# Step 6: Test and Debug\ntest_cases = [\n    # Complex test cases\n    \"abcabcabc\",  # \"abc\" repeats 3 times consecutively\n    \"aaaaaabbbbbccccc\",  # Each character repeats consecutively\n\n    # Existing test cases\n    \"aaaaa\",  # \"a\" repeats 5 times consecutively\n    \"abcabc\",  # No consecutive characters\n    \"aaab\",  # No consecutive characters\n    \"a\",  # Not enough characters for evaluation\n    \"\"  # Empty string\n]\nexpected_results = [True, True, True, False, False, False]\n\nfor i, test_case in enumerate(test_cases):\n    result = is_happy(test_case)\n    assert result == expected_results[i], f\"Test case {test_case} failed\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if isinstance(gpa, (int, float)):\n            if gpa == 4.0:\n                letter_grades.append('A+')\n            elif gpa >= 3.7:\n                letter_grades.append('A')\n            elif gpa >= 3.3:\n                letter_grades.append('A-')\n            elif gpa >= 3.0:\n                letter_grades.append('B+')\n            elif gpa >= 2.7:\n                letter_grades.append('B')\n            elif gpa >= 2.3:\n                letter_grades.append('B-')\n            elif gpa >= 2.0:\n                letter_grades.append('C+')\n            elif gpa >= 1.7:\n                letter_grades.append('C')\n            elif gpa >= 1.3:\n                letter_grades.append('C-')\n            elif gpa >= 1.0:\n                letter_grades.append('D+')\n            elif gpa >= 0.7:\n                letter_grades.append('D')\n            elif gpa >= 0.0:\n                letter_grades.append('D-')\n            else:\n                letter_grades.append('E')\n        else:\n            letter_grades.append('Invalid')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\ndef my_function(input1, input2):\n    \"\"\"This function performs some operation based on the provided inputs and returns the result.\"\"\"\n    # Perform necessary operations using the inputs\n    result = input1 + input2\n\n    # Return the result\n    return result\n"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Counts the number of integers between 10^(n-1) and 10^n (both inclusive) that either start or end with the digit '1'.\n    \n    Args:\n        n (int): The power of 10 for the integer range.\n\n    Returns:\n        int: The count of integers that meet the criteria.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer greater than or equal to 1.\")\n    \n    count = count_integers(n)\n    \n    return count\n\ndef count_integers(n):\n    \"\"\"\n    Count the number of integers between 10**(n-1) and 10**n (both inclusive) that either start or end with the digit '1'.\n    \n    Args:\n        n (int): The power of 10 for the integer range.\n\n    Returns:\n        int: The count of integers that meet the criteria.\n    \"\"\"\n    count = 0\n    \n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n# Functionality: The \"solve(N)\" function takes an input parameter N and performs some operation on it to solve a specific problem. Provide specific details or requirements for the function.\n\ndef solve(problem_input):\n    \"\"\"\n    Solves a specific problem based on the given input.\n\n    Args:\n    problem_input (int): The input value for the problem.\n\n    Returns:\n    int: The solution to the problem.\n    \"\"\"\n    return problem_input ** 2 \n"}
{"task_id": "HumanEval/85", "completion": "\ndef add(num1, num2):\n    # Add error handling and validation of input types\n    if not isinstance(num1, (int, float)) or not isinstance(num2, (int, float)):\n        raise ValueError(\"Inputs must be numeric\")\n\n    return num1 + num2\n"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(input_string):\n    words = input_string.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    ordered_string = ' '.join(sorted_words)\n    return ordered_string\n\ntest_cases = [\n    [\"hello world\", \"ehllo dlorw\"],\n    [\"\", \"\"],\n    [\"hello123 world\", \"ehllo123 dlorw\"],\n    [\"hello@world!\", \"ehllo@dlorw!\"],\n    [\"hello    world\", \"ehllo    dlorw\"],\n    [\"  hello world  \", \"  ehllo dlrow  \"]\n]\n\nfor case in test_cases:\n    input_str, expected_output = case[0], case[1]\n    output = anti_shuffle(input_str)\n    print(f\"Input: {input_str}\\nExpected Output: {expected_output}\\nOutput: {output}\\n\")\n"}
{"task_id": "HumanEval/87", "completion": "\nfrom operator import itemgetter\n\n\ndef get_row(lst, x):\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for column_index, element in enumerate(row):\n            if element == x:\n                coordinates.append((row_index, column_index))\n    \n    coordinates.sort(key=itemgetter(0))\n    sorted_coordinates = []\n    for row in coordinates:\n        sorted_coordinates.append(sorted(row, key=itemgetter(1), reverse=True))\n    \n    return sorted_coordinates\n"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    # Check if the input is a valid array\n    if not isinstance(array, list):\n        raise ValueError(\"Input is not a valid array\")\n\n    # Create a copy of the input array to perform sorting\n    array_copy = array[:]\n\n    # Determine the sum of the first and last elements\n    sum_first_last = array[0] + array[-1]\n\n    # Sort the copy of the array based on the sum\n    if sum_first_last % 2 == 0:\n        # Sort in descending order if the sum is even\n        array_copy.sort(reverse=True)\n    else:\n        # Sort in ascending order if the sum is odd\n        array_copy.sort()\n\n    # Return the sorted array\n    return array_copy\n"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt_string(input_string: str) -> str:\n    if not input_string:\n        return \"\"\n\n    # Extract individual alphabetic characters from the input string\n    alphabets = [char for char in input_string if char.isalpha()]\n\n    if not alphabets:\n        return \"\"\n\n    # Rotate the alphabet characters by shifting them down by two multiplied by two places\n    rotated_chars = []\n    for char in alphabets:\n        ascii_value = ord(char)\n        if ascii_value in range(65, 91):  # for uppercase characters\n            current_rotated_char = chr(((ascii_value - 65 + 4) % 26) + 65)\n        elif ascii_value in range(97, 123):  # for lowercase characters\n            current_rotated_char = chr(((ascii_value - 97 + 4) % 26) + 97)\n        rotated_chars.append(current_rotated_char)\n\n    # Join the rotated characters to form the encrypted string\n    encrypted_string = ''.join(rotated_chars)\n\n    return encrypted_string\n"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(nums):\n    if not isinstance(nums, list):\n        raise TypeError(\"`nums` should be a list.\")\n\n    result = []\n    \n    for i, num in enumerate(nums):\n        found = False\n        \n        for j in range(i + 1, len(nums)):\n            if nums[j] < num:\n                result.append(nums[j])\n                found = True\n                break\n        \n        if not found:\n            result.append(-1)\n\n    return result\n"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(string):\n    \"\"\"\n    Counts how many times a character changes in a given string.\n\n    Args:\n    string (str): The input string to be processed.\n    \n    Returns:\n    int: The count of character changes in the string.\n    \"\"\"\n    count = 0\n    prev_char = ''\n    \n    for char in string:\n        if char != prev_char:\n            count += 1\n            prev_char = char\n    \n    return count\n\nprint(is_bored('aabbcc'))\nprint(is_bored('abcabcabc'))\nprint(is_bored('aaa'))\n"}
{"task_id": "HumanEval/92", "completion": "\ndef check_sum_of_two_numbers(a, b, c):\n    if not isinstance(a, int) or not isinstance(b, int) or not isinstance(c, int):\n        raise ValueError(\"All input numbers must be integers\")\n\n    return a + b == c or a + c == b or b + c == a\n"}
{"task_id": "HumanEval/93", "completion": "\ndef swap_case(message):\n    if not isinstance(message, str):\n        raise ValueError(\"Input message should be a string\")\n    return message.swapcase()\n\n\ndef get_next_letter(letter):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    if not isinstance(letter, str) or len(letter) != 1:\n        raise ValueError(\"Input letter should be a string of length 1\")\n    if not letter.isalpha():\n        return letter\n    index = alphabet.index(letter.lower())\n    next_index = (index + 2) % 26\n    return alphabet[next_index].upper() if letter.isupper() else alphabet[next_index]\n\n\ndef replace_vowels(message):\n    vowels = 'aeiou'\n    transformed_message = ''\n    for letter in message:\n        transformed_message += get_next_letter(letter)\n    return transformed_message\n\n\ndef encode(message):\n    swapped_case_message = swap_case(message)\n    encoded_message = replace_vowels(swapped_case_message)\n    return encoded_message\n\nprint(encode(\"Hello World!\")) \nprint(encode(\"This is a test.\"))\nprint(encode(\"\"))\nprint(encode(\"NoVowels\"))\n"}
{"task_id": "HumanEval/94", "completion": "\ndef main():\n    # Implement the actual function here\n    \n    pass\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(my_dict):\n    modified_dict = {}\n\n    for key, value in my_dict.items():\n        if isinstance(value, str):\n            modified_dict[key] = value.upper() if value.islower() else value.lower()\n        else:\n            modified_dict[key] = value\n\n    return modified_dict\n"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(max_number):\n    \"\"\"\n    Returns a list of prime numbers less than or equal to a given non-negative integer.\n\n    Args:\n        max_number (int): Non-negative integer.\n\n    Returns:\n        list: List of prime numbers less than or equal to max_number.\n    \"\"\"\n    if not isinstance(max_number, int) or max_number < 0:\n        raise ValueError(\"max_number must be a non-negative integer\")\n\n    def is_prime(candidate_number):\n        \"\"\"\n        Checks if a number is prime.\n\n        Args:\n            candidate_number (int): Number to check.\n\n        Returns:\n            bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if candidate_number < 2:\n            return False\n\n        for i in range(2, int(candidate_number**0.5) + 1):\n            if candidate_number % i == 0:\n                return False\n\n        return True\n\n    primes = []\n    for candidate_number in range(2, max_number + 1):\n        if is_prime(candidate_number):\n            primes.append(candidate_number)\n\n    return primes\n\n\n# Unit tests\nprint(count_up_to(0))  # []\nprint(count_up_to(1))  # []\nprint(count_up_to(5))  # [2, 3, 5]\nprint(count_up_to(11))  # [2, 3, 5, 7, 11]\nprint(count_up_to(20))  # [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(18))  # [2, 3, 5, 7, 11, 13, 17]\n"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(multiplier: Union[int, float], multiplicand: Union[int, float]) -> Union[int, float]:\n    \"\"\"\n    Multiplies two numbers and returns the product.\n\n    Args:\n        multiplier: The number to be multiplied.\n        multiplicand: The number to multiply by.\n\n    Returns:\n        The product of the two numbers.\n\n    Raises:\n        TypeError: If either of the input arguments is not a number.\n    \"\"\"\n    return multiplier * multiplicand\n"}
{"task_id": "HumanEval/98", "completion": "\ndef my_function():\n   # code goes here\n   pass\n"}
{"task_id": "HumanEval/99", "completion": "\nimport math\n\n\ndef closest_integer(number):\n    if not isinstance(number, (int, float)):\n        raise ValueError(\"Input must be a numeric value.\")\n    \n    return round(number)\n\n\n# Test Cases\ntest_cases = [\n    {\n        'input': 5,\n        'expected_output': 5\n    },\n    {\n        'input': -5,\n        'expected_output': -5\n    },\n    {\n        'input': 5.7,\n        'expected_output': 6\n    },\n    {\n        'input': -5.7,\n        'expected_output': -6\n    },\n    {\n        'input': 0,\n        'expected_output': 0\n    },\n    {\n        'input': 9999999999,\n        'expected_output': 9999999999\n    },\n    {\n        'input': 5.4,\n        'expected_output': 5\n    },\n    {\n        'input': -5.4,\n        'expected_output': -5\n    },\n]\n\nfor test_case in test_cases:\n    input_value = test_case['input']\n    expected_output = test_case['expected_output']\n    \n    try:\n        output = closest_integer(input_value)\n        \n        if output == expected_output:\n            test_result = 'Pass'\n        else:\n            test_result = 'Fail'\n        \n        test_case['output'] = output\n        test_case['test_result'] = test_result\n    except Exception as e:\n        test_case['exception'] = str(e)\n        test_case['test_result'] = 'Error'\n\n# Print test report\nprint(\"Test Report:\")\nprint()\nfor i, test_case in enumerate(test_cases, start=1):\n    print(f\"Test Case {i}:\")\n    print(f\"  Input: {test_case['input']}\")\n    print(f\"  Expected Output: {test_case['expected_output']}\")\n    \n    if 'output' in test_case:\n        print(f\"  Actual Output: {test_case['output']}\")\n    \n    print(f\"  Test Result: {test_case['test_result']}\")\n    \n    if 'exception' in test_case:\n        print(f\"  Exception: {test_case['exception']}\")\n    \n    print()\n"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    \"\"\"\n    Create a pile list based on the given number of stones.\n\n    Args:\n        n (int): The number of stones in the first level of the pile.\n\n    Returns:\n        list: A list representing the number of stones in each level of the pile.\n    \"\"\"\n\n    # Input validation\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n should be a positive integer\")\n\n    pile = []\n\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\nimport re\n\ndef validate_input(string):\n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string\")\n    return True\n\ndef split_string(string):\n    words = re.split(r\"[,\\s]+\", string)\n    return [word.strip() for word in words if word.strip()]\n\ndef create_array(string):\n    words = split_string(string)\n    return words\n\ndef process_string(string):\n    validate_input(string)\n    array = create_array(string)\n    return array\n"}
{"task_id": "HumanEval/102", "completion": "\ndef find_largest_even_integer(x, y):\n    # Validate inputs\n    if not isinstance(x, int) or not isinstance(y, int) or x <= 0 or y <= 0:\n        return -1\n\n    even_integers = [num for num in range(x, y+1) if num % 2 == 0]\n    if even_integers:\n        return max(even_integers)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    # Validate inputs\n    if not isinstance(n, int) or not isinstance(m, int) or n <= 0 or m <= 0:\n        return \"Error: Both n and m must be positive integers\"\n\n    # Check if n > m\n    if n > m:\n        return -1\n\n    # Calculate average\n    total = 0\n    count = m - n + 1\n    for i in range(n, m + 1):\n        total += i\n    average = total / count\n\n    # Round average\n    rounded_average = round(average)\n    \n    # Convert to binary\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n"}
{"task_id": "HumanEval/104", "completion": "\n# File: unique_digits.py\ndef has_unique_digits(numbers):\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    if numbers is None:\n        return False\n    \n    number_str = ''.join(str(number) for number in numbers)\n    number_set = set(number_str)\n    return len(number_str) == len(number_set)\n\n# File: test_unique_digits.py\nimport unique_digits\n\ndef test_unique_digits():\n    # Existing test cases\n    assert unique_digits.has_unique_digits([1, 2, 3, 4, 5]) == True\n    assert unique_digits.has_unique_digits([1, 2, 2, 4, 5]) == False\n    assert unique_digits.has_unique_digits([1, 2, 3, 4, 10]) == False\n    assert unique_digits.has_unique_digits([1, 2, 3, 4, -5]) == False\n    assert unique_digits.has_unique_digits([]) == True\n    \n    # Additional test cases\n    assert unique_digits.has_unique_digits([-1, 0, 1, 100, 200]) == False\n    assert unique_digits.has_unique_digits([12345, 67890]) == True\n    assert unique_digits.has_unique_digits([1, 1, 1, 1, 1, 1, 1]) == False\n    assert unique_digits.has_unique_digits([-5, -5, -5, -5, -5]) == False\n\n    # Edge case with large numbers\n    assert unique_digits.has_unique_digits([1111111111111111, 2222222222222222]) == True\n\n    # Edge case with empty list\n    assert unique_digits.has_unique_digits(None) == False\n\n    print(\"All test cases passed\")\n\ntest_unique_digits()\n"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    # Input Validation\n    if not isinstance(arr, list):\n        raise ValueError('Input must be a list')\n\n    valid_numbers = [num for num in arr if isinstance(num, int) and 1 <= num <= 9]\n\n    # Sorting\n    sorted_numbers = sorted(valid_numbers)\n\n    # Reversing\n    reversed_numbers = sorted_numbers[::-1]\n\n    # Digit Conversion\n    digit_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    converted_arr = [digit_names[num] for num in reversed_numbers]\n\n    # Return the Modified Array\n    return converted_arr\n"}
{"task_id": "HumanEval/106", "completion": "\ndef calculate_factorial(num: int) -> int:\n    \"\"\"\n    Calculate the factorial of a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The factorial of the given number.\n\n    Raises:\n        ValueError: If the input number is negative.\n        TypeError: If the input number is not an integer.\n\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"The input number must be an integer.\")\n    \n    if num < 0:\n        raise ValueError(\"The input number must be non-negative.\")\n        \n    factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n    return factorial\n\n# Example usage of the calculate_factorial function with test cases\ntry:\n    print(calculate_factorial(5))  # Output: 120\n    print(calculate_factorial(0))  # Output: 1\n    print(calculate_factorial(-5))  # Raises ValueError\n    print(calculate_factorial(100))  # Output: A large factorial number\n    print(calculate_factorial(3.5))  # Raises TypeError\nexcept Exception as err:\n    print(f\"Error: {err}\")\n"}
{"task_id": "HumanEval/107", "completion": "\ndef is_palindrome(n):\n    num_str = str(n)\n    return num_str == num_str[::-1]\n\n\ndef even_odd_palindrome(n):\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input\"\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count\n"}
{"task_id": "HumanEval/108", "completion": "\nfrom typing import List\n\ndef count_nums(arr: List[int]) -> int:\n    \"\"\"\n    Count the number of elements in the input list that have a sum of digits greater than 0.\n\n    Args:\n        arr (List[int]): The input list of integers.\n\n    Returns:\n        int: The count of elements with a sum of digits greater than 0.\n\n    Raises:\n        TypeError: If non-integer elements are present in the input list.\n\n    \"\"\"\n    count = 0\n\n    for num in arr:\n        if isinstance(num, int):\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n        else:\n            raise TypeError(\"Non-integer value found in the input list.\")\n\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(board, row, col):\n    \"\"\"\n    Moves one ball in the board to the right by shifting it to the next column.\n    If the ball is already in the last column, it moves to the next row and the first column.\n\n    Parameters:\n    - board (List[List[int]]): The two-dimensional board representing the game.\n    - row (int): The row index of the ball to be moved.\n    - col (int): The column index of the ball to be moved.\n\n    Returns:\n    - board (List[List[int]]): The updated board after moving the ball.\n    \"\"\"\n\n    # Get the dimensions of the board\n    rows = len(board)\n    cols = len(board[0])\n\n    # If the ball is in the last column\n    if col == cols - 1:\n        # If it is already in the last row, wrap around to the first row and first column\n        if row == rows - 1:\n            board[0][0] = board[row][col]\n            board[row][col] = 0\n        else:\n            # Move the ball to the next row and the first column\n            board[row + 1][0] = board[row][col]\n            board[row][col] = 0\n    else:\n        # Move the ball to the next column\n        board[row][col + 1] = board[row][col]\n        board[row][col] = 0\n\n    return board\n"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(amount: float, rate: float) -> float:\n    \"\"\"\n    Convert the given amount to another currency using the exchange rate.\n    \n    Args:\n        amount (float): The amount to be converted.\n        rate (float): The exchange rate for converting the amount.\n    \n    Returns:\n        float: The converted amount.\n    \n    Raises:\n        ValueError: If the amount is negative or the exchange rate is non-positive.\n    \"\"\"\n    if amount < 0:\n        raise ValueError(\"Amount cannot be negative.\")\n\n    if rate <= 0:\n        raise ValueError(\"Exchange rate must be positive.\")\n\n    converted_amount = amount * rate\n    return converted_amount\n\n\nimport pytest\n\n@pytest.mark.parametrize(\n    \"amount, rate, expected\",\n    [\n        (100, 1.2, 120.0),\n        (100, 0, ValueError(\"Exchange rate must be positive.\")),\n        (0, 1.5, 0.0),\n        (-50, 2.0, ValueError(\"Amount cannot be negative.\")),\n        (-50, 0, ValueError(\"Amount cannot be negative.\")),\n    ]\n)\ndef test_exchange(amount, rate, expected):\n    try:\n        assert exchange(amount, rate) == expected\n    except ValueError as error:\n        assert str(error) == str(expected)\n"}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(data):\n    count = {}\n    for num in data:\n        count[num] = count.get(num, 0) + 1\n    return count\n"}
{"task_id": "HumanEval/112", "completion": "\ndef calculate_average(lst):\n    sum = 0\n    count = 0\n    for num in lst:\n        sum += num\n        count += 1\n    average = sum / count\n    return average\n"}
{"task_id": "HumanEval/113", "completion": "\nfrom typing import List\n\ndef odd_count(numbers: List[int]) -> int:\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    \n    count = 0\n    for num in numbers:\n        if num % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums, target):\n    if len(nums) == 0 or target < 0:\n        return 0\n\n    start = 0\n    end = 0\n    current_sum = 0\n    min_length = float('inf')\n\n    while end < len(nums):\n        current_sum += nums[end]\n\n        while current_sum >= target:\n            min_length = min(min_length, end - start + 1)\n            current_sum -= nums[start]\n            start += 1\n\n        end += 1\n\n    if min_length == float('inf'):\n        return 0\n\n    return min_length\n"}
{"task_id": "HumanEval/115", "completion": "\ndef my_function(input_data):\n    \"\"\"\n    Function: my_function\n    \n    Purpose: This function takes input_data as input and performs certain operations on it to generate the output_data.\n    \n    Args:\n        input_data (any): The input data for the function.\n        \n    Returns:\n        output_data (any): The output data generated by the function.\n    \"\"\"\n    # TODO: Fill in the required logic and operations based on the specific requirements and constraints mentioned in the plan\n\n    return output_data\n"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    sorted_arr = []\n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"Elements of the input list must be integers\")\n        ones_count = bin(num).count('1')\n        sorted_arr.append((num, ones_count))\n\n    sorted_arr.sort(key=lambda x: (x[1], x[0]))\n\n    return [x[0] for x in sorted_arr]\n\n\n# Additional test cases\nassert sort_array([1, 2, 3, 4, 5]) == [1, 2, 4, 3, 5]\nassert sort_array([9, 15, 20, 10, 11]) == [10, 9, 15, 11, 20]\nassert sort_array([0, 6, 8, 12, 16]) == [0, 8, 16, 6, 12]\n\n# Test cases from the requirement\nassert sort_array([5, 2, 3, 9, 4]) == [5, 2, 4, 3, 9]\nassert sort_array([1, 10, 100]) == [1, 100, 10]\nassert sort_array([0, 1, 2, 3]) == [0, 1, 2, 3]\n\n# Negative test cases\ntry:\n    sort_array(\"invalid\")\nexcept TypeError as e:\n    assert str(e) == \"Input must be a list\"\n\ntry:\n    sort_array([1, 2, 3, \"invalid\"])\nexcept TypeError as e:\n    assert str(e) == \"Elements of the input list must be integers\"\n"}
{"task_id": "HumanEval/117", "completion": "\n# Step 3: Define the function\ndef calculate_square(number):\n    # Step 4: Develop a step-by-step solution\n    square = number ** 2\n    return square\n\n# Step 7: Collaborate with developers and testers\n# Communicate the function and its expected behavior to the team\n\n# Step 9: Test and refine\n# Perform testing to ensure correctness and validate the solution\n\n# Test the function\nprint(calculate_square(4))  # Expected output: 16\nprint(calculate_square(-5))  # Expected output: 25\nprint(calculate_square(0))  # Expected output: 0\n"}
{"task_id": "HumanEval/118", "completion": "\ndef find_closest_vowel(word):\n    if not isinstance(word, str):\n        return \"Invalid input type. Input should be a string.\"\n    \n    if not word.isalpha():\n        return \"Invalid word. Word should contain only letters of the English alphabet.\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and i > 0 and word[i - 1] not in vowels:\n            return word[i]\n    \n    if len(word) < 2:\n        return \"Word is too short to find closest vowel.\"\n    \n    return \"No vowels found that meet the conditions.\"\n"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    if len(lst) != 2:\n        return 'No'\n    \n    string1, string2 = lst[0], lst[1]\n    \n    if not all(char in '()' for char in string1 + string2):\n        return 'No'\n    \n    if len(string1) != len(string2):\n        return 'No'\n    \n    stack = []\n    \n    for char in string1:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    \n    if stack:\n        return 'No'\n    \n    for char in string2:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    \n    if stack:\n        return 'No'\n    \n    return 'Yes'\n\nprint(match_parens(['(())', '()()']))\nprint(match_parens(['(((', ')))']))\n"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(nums, k):\n    if not isinstance(k, int) or k < 0 or k > len(nums):\n        raise ValueError(\"Invalid value for k\")\n    return sorted(nums, reverse=True)[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n# Developer's Code:\n\n# Step 1: Understand the Function Requirements\n# Read and comprehend the provided function requirements.\n# Clarify any ambiguities or uncertainties.\n\n# Step 2: Identify Key Functional Units\n# Identify the specific functional units required to develop the function.\n# Determine the responsibilities of each functional unit.\n\n# Step 3: Breakdown of Subtasks\n# Divide the development process into smaller subtasks for each functional unit.\n# Ensure that each subtask is clear, manageable, and solvable.\n\n# Step 4: Develop a High-Level Plan\n# Create a plan that outlines the major steps involved in implementing the function.\n# Assign responsibilities to each functional unit for the different steps.\n\n# Step 5: Collaboration and Communication\n# Foster an environment of collaboration and communication.\n# Ensure all team members understand their roles and responsibilities.\n\n# Step 6: Progress Monitoring and Adjustment\n# Regularly monitor project progress.\n# Make adjustments to the plan, if necessary, based on obstacles or new insights.\n\n# Step 7: Quality Assurance\n# Assign quality assurance testers to validate the function against the provided requirements.\n# Test various test cases to ensure the function works correctly.\n\n# Step 8: Documentation\n# Document the final implementation to provide clarity and understanding for future reference.\n"}
{"task_id": "HumanEval/122", "completion": "\ndef calculate_factorial(n):\n    if isinstance(n, int):  \n        if n < 0:\n            return None\n        elif n == 0:\n            return 1\n        else:\n            factorial = 1\n            for i in range(1, n + 1):\n                factorial *= i\n            return factorial\n    else:\n        return None  \n\nprint(calculate_factorial(5))\nprint(calculate_factorial(0))\nprint(calculate_factorial(-5))\n\nprint(calculate_factorial(1))\nprint(calculate_factorial(2))\nprint(calculate_factorial(10))\nprint(calculate_factorial(15))\n"}
{"task_id": "HumanEval/123", "completion": "\ndef generate_collatz_sequence(n):\n    # Check input validation\n    if type(n) != int or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence\n\ndef generate_odd_numbers(n):\n    # Check input validation\n    if type(n) != int or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    sequence = generate_collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 == 1]\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "\nimport re\n\ndef valid_date(date_string):\n    # Input validation\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date_string):\n        return False\n\n    # Date validation\n    month, day, year = map(int, date_string.split('-'))\n\n    # Check if month is within the range of 1-12\n    if month < 1 or month > 12:\n        return False\n\n    # Check if day is within the valid range for each month\n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            # Leap year, February has 29 days\n            if day < 1 or day > 29:\n                return False\n        else:\n            # Non-leap year, February has 28 days\n            if day < 1 or day > 28:\n                return False\n    elif month in [4, 6, 9, 11]:\n        # Months with 30 days\n        if day < 1 or day > 30:\n            return False\n    else:\n        # Months with 31 days\n        if day < 1 or day > 31:\n            return False\n\n    # Check if year is greater than or equal to 1000\n    if year < 1000:\n        return False\n\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    # Handle the case when the input string has whitespaces, commas, or neither\n    if ' ' in txt:\n        # Split the string by whitespaces\n        words = txt.split()\n        return words\n    elif ',' in txt:\n        # Split the string by commas\n        words = txt.split(',')\n        return words\n    else:\n        # Return the input string as a single element list\n        return [txt.strip()]\n"}
{"task_id": "HumanEval/126", "completion": "\ndef calculate_sum(num1, num2):\n    if not isinstance(num1, (int, float)) or not isinstance(num2, (int, float)):\n        raise TypeError(\"Both parameters must be numbers.\")\n\n    return num1 + num2\n\ntry:\n    result = calculate_sum(3, 4)\n    print(result)\n\n    result = calculate_sum(\"3\", 4)\n    print(result)\nexcept TypeError as e:\n    print(str(e))\n"}
{"task_id": "HumanEval/127", "completion": "\ndef intersection(intervals):\n    \n    if not intervals:\n        raise ValueError(\"Empty list of intervals\")\n    \n    for interval in intervals:\n        if len(interval) != 2 or interval[0] >= interval[1]:\n            raise ValueError(\"Invalid interval: {}\".format(interval))\n    \n    result = []\n    intervals.sort(key=lambda x: x[0])  # Sort intervals based on the start value\n\n    for i in range(1, len(intervals)):\n        if intervals[i][0] > intervals[i - 1][1]:\n            # Intervals do not overlap at all\n            continue\n        elif intervals[i][0] == intervals[i - 1][1]:\n            # Intervals have a common boundary but no actual intersection\n            continue\n        elif intervals[i][1] <= intervals[i - 1][1]:\n            # Current interval is completely within the previous interval\n            result.append([intervals[i][0], intervals[i][1]])\n        else:\n            # Partial overlap between intervals\n            result.append([intervals[i][0], intervals[i - 1][1]])\n\n    return result\n"}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(lst):\n    positive_product = 1\n    negative_product = 1\n\n    for num in lst:\n        if num > 0:\n            positive_product *= num\n        elif num < 0:\n            negative_product *= num\n\n    if positive_product == 1 and negative_product == 1:\n        return 0\n    else:\n        return positive_product * negative_product\n\ntest_cases = [\n    ([1, 2, 3, -4, -5], 60),\n    ([-1, -2, -3, -4, -5], -120),\n    ([1, 2, 3, 4, 5], 0),\n    ([-1, -2, -3, -4, 0], 0),\n    ([0, 0, 0, 0], 0)\n]\n\nfor lst, expected_result in test_cases:\n    result = prod_signs(lst)\n    print(f\"Input: {lst}, Expected Output: {expected_result}, Actual Output: {result}\")\n"}
{"task_id": "HumanEval/129", "completion": "\ndef minPath(grid, k):\n    \"\"\"\n    Find the minimum path of length k by exploring all possible paths starting from each cell in the grid.\n\n    Args:\n        grid (list): The input grid.\n        k (int): The length of the minimum path to find.\n\n    Returns:\n        list: The minimum path of length k.\n\n    Raises:\n        ValueError: If the grid does not have at least 2 rows and 2 columns.\n    \"\"\"\n\n    if not isinstance(grid, list) or not all(isinstance(row, list) for row in grid):\n        raise ValueError(\"Grid must be a 2D list\")\n\n    if len(grid) < 2 or len(grid[0]) < 2:\n        raise ValueError(\"Grid must have at least 2 rows and 2 columns\")\n\n    min_path = []\n    current_path = []\n    visited_cells = set()\n\n    def explore_path(row, col):\n        current_path.append(grid[row][col])\n        visited_cells.add((row, col))\n\n        if len(current_path) == k:\n            nonlocal min_path\n            if len(min_path) == 0 or sum(current_path) < sum(min_path):\n                min_path = list(current_path)\n\n        for drow, dcol in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_row, new_col = row + drow, col + dcol\n            if (\n                0 <= new_row < len(grid)\n                and 0 <= new_col < len(grid[0])\n                and (new_row, new_col) not in visited_cells\n            ):\n                explore_path(new_row, new_col)\n\n        current_path.pop()\n        visited_cells.remove((row, col))\n\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            explore_path(row, col)\n\n    return min_path\n"}
{"task_id": "HumanEval/130", "completion": "\ndef tribonacci(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    \n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n    \n    sequence = [0, 0, 1]\n    for _ in range(3, n):\n        next_num = sum(sequence[-3:])\n        sequence.append(next_num)\n    \n    return sequence\n\nn = 10\ntribonacci_sequence = tribonacci(n)\nprint(tribonacci_sequence)\n"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    return len(str(n))\n\n# Example usage\ntry:\n    number = 12345\n    digit_count = digits(number)\n    print(digit_count)\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(data):\n    stack = []\n    for char in data:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    if len(stack) > 0:\n        return False\n    \n    return True\n\nprint(is_nested(\"\"))\nprint(is_nested(\"(())\"))\nprint(is_nested(\"()()\"))\nprint(is_nested(\"())(\"))\nprint(is_nested(\"abc\"))\nprint(is_nested(\"{}[]()\"))\nprint(is_nested(\"a(bc)d\"))\n"}
{"task_id": "HumanEval/133", "completion": "\nimport math\n\ndef sum_squares(lst):\n    \"\"\"\n    Calculate the sum of squares of rounded numbers in a given list.\n\n    Args:\n        lst (list of float): A list of numbers.\n\n    Returns:\n        float: The sum of squares of rounded numbers.\n\n    Examples:\n        >>> sum_squares([1.5, 2.4, 3.7])\n        15\n        >>> sum_squares([0.9, 5.1, 4.6, 2.3])\n        46\n    \"\"\"\n    sum_of_squares = 0\n\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        sum_of_squares += squared_num\n\n    return sum_of_squares\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(string):\n    # Add type check to ensure only strings are passed as arguments\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n        \n    if not string:  # Check if the given string is empty\n        return False\n    \n    last_char = string[-1]  # Get the last character of the string\n    \n    return last_char.isalpha()  # Check if the last character is a letter\n"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(input_list):\n    \"\"\"\n    Determine the index of the first element in the list that is not greater than or equal to its preceding element.\n\n    Args:\n    - input_list (list): List of integers.\n\n    Returns:\n    - index (int): Index of the first element that does not meet the condition, or -1 if all elements meet the condition.\n    \"\"\"\n    if len(input_list) < 2:\n        return -1\n\n    for i in range(1, len(input_list)):\n        if input_list[i] < input_list[i-1]:\n            return i\n\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    max_negative = None\n    min_positive = None\n    \n    found_negative = False\n    found_positive = False\n    \n    for num in lst:\n        if num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        if num < 0:\n            found_negative = True\n        if num > 0:\n            found_positive = True\n    \n    if not found_negative and not found_positive:\n        max_negative = None\n        min_positive = None\n    \n    return (max_negative, min_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    \"\"\"\n    Compares two variables and returns the larger variable if they are not equal, None otherwise.\n    \n    Args:\n        a: The first variable (integer, float, or string).\n        b: The second variable (integer, float, or string).\n        \n    Returns:\n        The larger variable if they are not equal, None otherwise.\n    \"\"\"\n    \n    # Validate inputs\n    if not (isinstance(a, (int, float, str)) and isinstance(b, (int, float, str))):\n        raise ValueError(\"Both inputs should be integers, floats, or strings\")\n    \n    # Perform necessary data type conversions\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n        if \".\" in a:\n            a = float(a)\n        else:\n            try:\n                a = int(a)\n            except ValueError:\n                raise ValueError(\"Invalid input: {} is not a valid number\".format(a))\n    \n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        if \".\" in b:\n            b = float(b)\n        else:\n            try:\n                b = int(b)\n            except ValueError:\n                raise ValueError(\"Invalid input: {} is not a valid number\".format(b))\n    \n    # Compare the inputs and determine the larger variable\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\n\n# Test the function\nassert compare_one(5, 10) == 10\nassert compare_one(3.14, 2.71) == 3.14\nassert compare_one(\"5\", \"10\") == \"10\"\nassert compare_one(\"1.5\", \"3.75\") == 3.75\nassert compare_one(5, 5) is None\nassert compare_one(3.14, 3.14) is None\nassert compare_one(\"5\", \"5\") is None\n\n# Additional test cases\nassert compare_one(0, 0) is None\nassert compare_one(10, 5) == 10\nassert compare_one(-5, -10) == -5\nassert compare_one(\"2,5\", \"1,5\") == 2.5\n"}
{"task_id": "HumanEval/138", "completion": "\ndef calculate_factorial(n: int) -> int:\n    \"\"\"\n    Calculate the factorial of the given integer.\n    \n    :param n: The integer for calculating the factorial.\n    :type n: int\n    :return: The factorial value.\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Cannot calculate factorial for negative numbers\")\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    \n    return result\n"}
{"task_id": "HumanEval/139", "completion": "\n# Modified code\ndef special_factorial(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = 1\n    while n > 0:\n        result *= factorial(n)\n        n -= 1\n\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\nimport re\n\ndef fix_spaces(text):\n    # Replace consecutive spaces with underscores\n    text = re.sub(r' {2,}', '_', text)\n\n    # Replace single spaces with hyphens\n    text = re.sub(r' ', '-', text)\n\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\nimport re\n\ndef file_name_check(file_name):\n    if not isinstance(file_name, str):\n        raise ValueError(\"file_name must be a string\")\n    \n    # Check if the file name has more than three digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return False\n    \n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return False\n    \n    # Check if the substring before the dot is not empty and starts with a letter from the Latin alphabet\n    name_parts = file_name.split('.')\n    if not name_parts[0] or not re.match(r'^[A-Za-z]', name_parts[0]):\n        return False\n    \n    # Check if the substring after the dot corresponds to one of the allowed extensions\n    allowed_extensions = ['txt', 'doc', 'pdf']\n    if name_parts[1] not in allowed_extensions:\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    \"\"\"\n    Calculates the sum of modified entries in the given list.\n    \n    Args:\n    - lst: A list of integers.\n    \n    Returns:\n    - The sum of modified entries in the list.\n    \n    Raises:\n    - ValueError: If the input is not a list of integers.\n    \"\"\"\n    if not isinstance(lst, list) or any(not isinstance(x, int) for x in lst):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:  # Add the square of the number\n            result += num ** 2\n        elif i % 4 == 0:  # Add the cube of the number\n            result += num ** 3\n            \n    return result\n\n# Additional Test Cases\nprint(sum_squares([]))  # Output: 0, since the list is empty\nprint(sum_squares([5]))  # Output: 25, since there is only one element in the list\n"}
{"task_id": "HumanEval/143", "completion": "\nimport string\nfrom typing import List\n\ndef words_in_sentence(sentence: str) -> List[str]:\n    if not isinstance(sentence, str):\n        raise ValueError(\"Input must be a string\")\n    words = sentence.split()\n    words = [word.strip(string.punctuation) for word in words]\n    words = [word for word in words if word]\n    return words\n"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    numerator, denominator = parse_fraction(x)\n    if denominator == 0:\n        return \"Error: Division by zero\"\n    \n    result = multiply(numerator, denominator)\n    if is_whole_number(result):\n        return str(int(result))\n    return result\n\n\ndef parse_fraction(x):\n    numerator, denominator = x.strip().split('/')\n    return int(numerator), int(denominator)\n\n\ndef multiply(numerator, denominator):\n    return numerator * denominator\n\n\ndef is_whole_number(result):\n    return result % 1 == 0\n"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(players):\n    return sorted(players, key=lambda player: player['points'], reverse=True)\n"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(lst):\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list\")\n\n    filtered_list = []\n    for element in lst:\n        if element % 2 == 0:\n            filtered_list.append(element)\n\n    return filtered_list\n"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(lst):\n    if not lst:  # handle empty list case\n        return None\n    \n    if len(lst) < 3:  # handle list with fewer than three elements case\n        return None\n\n    try:\n        extracted_elements = lst[::3]\n        max_value = max(extracted_elements)\n        return max_value\n    except (TypeError, ValueError):  # handle error cases\n        return None\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    \"\"\"\n    Finds the planets between two given planets and sorts them by proximity to the sun.\n\n    Args:\n        planet1 (str): The name of the first planet.\n        planet2 (str): The name of the second planet.\n\n    Returns:\n        list: The ordered list of planets between planet1 and planet2. Returns an empty list if no planets are found.\n    \"\"\"\n    planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n        \"Pluto\"\n    ]\n\n    # Validate planet names\n    if planet1 not in planets or planet2 not in planets:\n        return []\n\n    orbit1 = planets.index(planet1)\n    orbit2 = planets.index(planet2)\n\n    # Determine planets between the orbits\n    between_planets = planets[min(orbit1, orbit2) + 1:max(orbit1, orbit2)]\n\n    # Sort the planets by proximity to the sun\n    between_planets.sort(key=lambda x: planets.index(x))\n\n    return between_planets\n"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(strings):\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list of strings\")\n    strings = [s for s in strings if len(s) % 2 == 0]\n    strings.sort(key=lambda s: (len(s), s))\n    return strings\n"}
{"task_id": "HumanEval/150", "completion": "\ndef is_prime(n):\n    if type(n) != int:\n        raise ValueError(\"Input should be an integer\")\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef x_or_y(n, x, y):\n    if type(n) != int:\n        raise ValueError(\"Input should be an integer\")\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Additional test cases\nassert x_or_y(-5, \"a\", \"b\") == \"b\"  # Edge case: negative number\nassert x_or_y(1.5, \"a\", \"b\") == \"b\"  # Edge case: non-integer input\n"}
{"task_id": "HumanEval/151", "completion": "\ndef calculate_sum_of_odd_squares(lst):\n    if not lst:\n        return 0\n    \n    sum_of_squares = 0\n    \n    for num in lst:\n        if not isinstance(num, int) or num < 0:\n            continue\n        \n        if num % 2 != 0:\n            sum_of_squares += num**2\n    \n    return sum_of_squares\n\n\nprint(calculate_sum_of_odd_squares([1, 2, 3, 4, 5]))\nprint(calculate_sum_of_odd_squares([-1, 0, 2, 4, 6]))\nprint(calculate_sum_of_odd_squares([]))\nprint(calculate_sum_of_odd_squares([1, 2, -3, \"4\", 5.5]))\nprint(calculate_sum_of_odd_squares([12, 9, 27, 14, 25]))\n"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n\n\n# Test Cases\ngame1 = [5, 7, 4, 2, 8]\nguess1 = [5, 8, 3, 7, 9]\nprint(compare(game1, guess1))  # Expected output: [0, 1, 1, 5, 1]\n\ngame2 = [10, 10, 10]\nguess2 = [8, 9, 11]\nprint(compare(game2, guess2))  # Expected output: [2, 1, 1]\n\ngame3 = [2, 2, 2, 2, 2]\nguess3 = [5, 1, 1, 1, 1]\nprint(compare(game3, guess3))  # Expected output: [3, 1, 1, 1, 1]\n"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(input_class_name, extensions):\n    \"\"\"\n    Finds the strongest extension given a class name and a list of extensions.\n\n    Parameters:\n    - input_class_name (str): The name of the class.\n    - extensions (list): A list of extensions.\n\n    Returns:\n    - str: The strongest extension in the format ClassName.StrongestExtensionName.\n    \"\"\"\n\n    # Validate input_class_name\n    if not isinstance(input_class_name, str):\n        raise ValueError(\"Input class name must be a string.\")\n\n    # Validate extensions\n    if not isinstance(extensions, list):\n        raise ValueError(\"Extensions must be provided as a list.\")\n\n    # Strip the input parameters\n    input_class_name = input_class_name.strip()\n    extensions = [extension.strip() for extension in extensions]\n\n    # Initialize variables\n    strongest_extension = None\n    strongest_extension_strength = 0\n\n    # Iterate through the extensions list\n    for extension in extensions:\n        # Validate extension\n        if not isinstance(extension, str):\n            raise ValueError(\"Extension must be a string.\")\n\n        # Calculate the strength of each extension\n        extension_strength = calculate_strength(extension)\n\n        # Determine the strongest extension\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n\n    # Format the output as ClassName.StrongestExtensionName\n    output = f\"{input_class_name}.{strongest_extension}\"\n\n    return output\n\n\ndef calculate_strength(extension):\n    \"\"\"\n    Calculates the strength of an extension.\n\n    Parameters:\n    - extension (str): The extension name.\n\n    Returns:\n    - int: The strength of the extension.\n    \"\"\"\n\n    # Perform calculations to determine the strength of an extension\n    # Placeholder implementation for demonstration purposes\n    return len(extension)\n\n\n# Test cases\nprint(Strongest_Extension(\"MyClass\", [\"A\", \"B\", \"C\"]))  # Expected output: MyClass.C\nprint(Strongest_Extension(\"AnotherClass\", [\"X\", \"Y\", \"Z\"]))  # Expected output: AnotherClass.Z\nprint(Strongest_Extension(\"EmptyClass\", []))  # Expected output: EmptyClass.None\n"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a, b):\n    len_a = len(a)\n    len_b = len(b)\n\n    # Return False if the length of b is greater than a\n    if len_b > len_a:\n        return False\n\n    # Generate all possible rotations of b\n    rotations = [b]\n    for i in range(1, len_b):\n        rotations.append(b[i:] + b[:i])\n\n    # Check if any rotation of b is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True\n\n    return False\n\n# Test Cases\ntest_cases = [\n    {\"a\": \"abcde\", \"b\": \"cde\", \"expected_output\": True},\n    {\"a\": \"abcde\", \"b\": \"def\", \"expected_output\": False},\n    {\"a\": \"abcde\", \"b\": \"bcd\", \"expected_output\": False},\n    {\"a\": \"abcde\", \"b\": \"eab\", \"expected_output\": True},\n    {\"a\": \"abcde\", \"b\": \"abcd\", \"expected_output\": True},\n    {\"a\": \"abcde\", \"b\": \"edcba\", \"expected_output\": False},\n    # Additional test cases\n    {\"a\": \"abcde\", \"b\": \"\", \"expected_output\": True},\n    {\"a\": \"\", \"b\": \"abcde\", \"expected_output\": False},\n    {\"a\": \"abcde\", \"b\": \"abcde\", \"expected_output\": True},\n    {\"a\": \"abcde\", \"b\": \"abcdef\", \"expected_output\": False},\n    {\"a\": \"abcde\", \"b\": \"bcdea\", \"expected_output\": True},\n    {\"a\": \"abcde\", \"b\": \"dcbae\", \"expected_output\": False},\n    {\"a\": \"abcde\", \"b\": \"abcdeabcde\", \"expected_output\": False},\n]\n\nfor test_case in test_cases:\n    a = test_case[\"a\"]\n    b = test_case[\"b\"]\n    expected_output = test_case[\"expected_output\"]\n\n    assert cycpattern_check(a, b) == expected_output\n"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(numbers):\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of integers\")\n\n    even_count = 0\n    odd_count = 0\n\n    for num in numbers:\n        if not isinstance(num, int):\n            raise TypeError(\"Input list must contain only integers\")\n\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return odd_count, even_count\n"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(num: int) -> str:\n    if not isinstance(num, int) or num <= 0:\n        raise ValueError(\"Invalid input. Please provide a positive integer.\")\n        \n    roman_mapping = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n\n    mini_roman = ''\n    for value, symbol in sorted(roman_mapping.items(), reverse=True):\n        while num >= value:\n            mini_roman += symbol\n            num -= value\n\n    return mini_roman\n"}
{"task_id": "HumanEval/157", "completion": "\nimport math\n\ndef right_angle_triangle(a, b, c):\n    # Check if a, b, and c form a triangle\n    if not is_triangle(a, b, c):\n        return False\n\n    # Check if the triangle is right-angled\n    return is_right_angled(a, b, c)\n\ndef is_triangle(a, b, c):\n    # Triangle inequality theorem: The sum of the lengths of any two sides of a triangle must be greater than the length of the third side.\n    return a + b > c and b + c > a and a + c > b\n\ndef is_right_angled(a, b, c):\n    # Squares of the side lengths\n    a_squared = a ** 2\n    b_squared = b ** 2\n    c_squared = c ** 2\n\n    # Check Pythagorean theorem: In a right-angled triangle, the square of the hypotenuse (longest side) is equal to the sum of the squares of the other two sides.\n    return a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared\n"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(word_list):\n    max_unique_count = 0\n    max_unique_word = \"\"\n\n    for word in word_list:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_unique_word = word\n        elif unique_count == max_unique_count:\n            if word < max_unique_word:\n                max_unique_word = word\n\n    return max_unique_word\n"}
{"task_id": "HumanEval/159", "completion": "\ndef eat_carrots(carrots, meals):\n    total_carrots_eaten = 0\n    \n    if not isinstance(carrots, int) or not isinstance(meals, list):\n        raise TypeError(\"carrots parameter must be an integer and meals parameter must be a list\")\n    \n    if carrots < 0:\n        raise ValueError(\"carrots parameter must be a non-negative integer\")\n    \n    if not meals:\n        return carrots\n    \n    for meal in meals:\n        if not isinstance(meal, int) or meal < 0:\n            raise ValueError(\"meals list must contain non-negative integers only\")\n        \n        if meal <= carrots:\n            total_carrots_eaten += meal\n            carrots -= meal\n    \n    return carrots\n"}
{"task_id": "HumanEval/160", "completion": "\nfrom enum import Enum\n\n\nclass Operator(Enum):\n    ADDITION = '+'\n    MULTIPLICATION = '*'\n    SUBTRACTION = '-'\n    DIVISION = '/'\n\n\ndef do_algebra(operator, operands):\n    \"\"\"\n    Perform arithmetic operations on the given operands based on the provided operator.\n\n    :param operator: An Operator enum value representing the desired arithmetic operation.\n    :param operands: A list of numbers on which the operation is performed.\n    :return: The result of the arithmetic operation or \"Invalid operator\" if the operator is unsupported.\n    \"\"\"\n    if operator == Operator.ADDITION:\n        return sum(operands)\n    elif operator == Operator.MULTIPLICATION:\n        result = 1\n        for num in operands:\n            result *= num\n        return result\n    elif operator == Operator.SUBTRACTION:\n        result = operands[0]\n        for num in operands[1:]:\n            result -= num\n        return result\n    elif operator == Operator.DIVISION:\n        result = operands[0]\n        for num in operands[1:]:\n            if num == 0:\n                return \"Division by zero not allowed\"\n            result /= num\n        return result\n    else:\n        return \"Invalid operator\"\n\n\nprint(do_algebra(Operator.ADDITION, [1, 2, 3]))  # Output: 6\nprint(do_algebra(Operator.MULTIPLICATION, [2, 3, 4]))  # Output: 24\nprint(do_algebra(Operator.SUBTRACTION, [10, 2, 3]))  # Output: 5\nprint(do_algebra(Operator.DIVISION, [100, 4, 2]))  # Output: 12.5\nprint(do_algebra(Operator.DIVISION, [100, 4, 0]))  # Output: Division by zero not allowed\nprint(do_algebra(\"INVALID_OPERATOR\", [2, 3]))  # Output: Invalid operator\n"}
{"task_id": "HumanEval/161", "completion": "\ndef calculate_sum(numbers):\n    \"\"\"\n    Calculate the sum of a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the numbers in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list contains non-numeric values.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of numbers.\")\n\n    if not all(isinstance(num, (int, float)) for num in numbers):\n        raise ValueError(\"List must contain only numeric values.\")\n\n    total = 0\n\n    # Iterate through each number in the list\n    for num in numbers:\n        total += num\n\n    return total\n\n# Test the calculate_sum function\n\n# Test case 1: Valid input\nnumbers = [1, 2, 3, 4, 5]\nexpected_sum = 15\nassert calculate_sum(numbers) == expected_sum\n\n# Test case 2: Empty list\nnumbers = []\nexpected_sum = 0\nassert calculate_sum(numbers) == expected_sum\n\n# Test case 3: Large list\nnumbers = [x for x in range(1000000)]\nexpected_sum = sum(numbers)\nassert calculate_sum(numbers) == expected_sum\n\n# Test case 4: Negative numbers\nnumbers = [-1, -2, -3, -4, -5]\nexpected_sum = -15\nassert calculate_sum(numbers) == expected_sum\n\n# Test case 5: Floating-point numbers\nnumbers = [0.5, 1.5, 2.5, 3.5, 4.5]\nexpected_sum = 12.5\nassert calculate_sum(numbers) == expected_sum\n\nprint(\"All test cases passed.\")\n"}
{"task_id": "HumanEval/162", "completion": "\ndef my_function(input1, input2):\n    \"\"\"\n    This function takes two inputs and returns their sum.\n  \n    Parameters:\n    input1 (int): The first input.\n    input2 (int): The second input.\n  \n    Returns:\n    int: The sum of input1 and input2.\n    \"\"\"\n    try:\n        # Check if inputs are integers\n        if isinstance(input1, int) and isinstance(input2, int):\n            return input1 + input2\n        else:\n            raise TypeError(\"Inputs must be integers.\")\n    except TypeError as e:\n        print(f\"Error: {e}\")\n"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    if not isinstance(a, int) or not isinstance(b, int) or a < 0 or b < 0:\n        return []\n\n    result_list = []\n    start = min(a, b)\n    end = max(a, b)\n\n    for num in range(start, end + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                result_list.append(int(digit))\n\n    return result_list\n"}
