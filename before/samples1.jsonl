{"task_id": "HumanEval/0", "completion": ["\ndef has_close_elements(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n\n    for count in counts.values():\n        if count >= 2:\n            return True\n    return False\n"]}
{"task_id": "HumanEval/1", "completion": []}
{"task_id": "HumanEval/2", "completion": ["\ndef truncate_number(number):\n    if not isinstance(number, float):\n        raise ValueError(\"Input must be a float\")\n    \n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"]}
{"task_id": "HumanEval/3", "completion": []}
{"task_id": "HumanEval/4", "completion": []}
{"task_id": "HumanEval/5", "completion": ["\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n    if not isinstance(delimiter, int):\n        raise ValueError(\"Delimiter must be an integer\")\n    \n    result = []\n    \n    for i, num in enumerate(numbers):\n        result.append(num)\n        \n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    \n    return result\n"]}
{"task_id": "HumanEval/6", "completion": ["\nimport re\n\n# Subtask 1: Split the input string into a list of group strings\ndef split_input_string(input_string):\n    return re.findall(r'\\{[^{}]*\\}', input_string)\n\n# Subtask 2: Calculate the deepest level of nesting for a given group string\ndef calculate_deepest_nesting(group_string):\n    depth = 0\n    max_depth = 0\n    \n    for char in group_string:\n        if char == '{':\n            depth += 1\n            if depth > max_depth:\n                max_depth = depth\n        elif char == '}':\n            depth -= 1\n    \n    return max_depth\n\n# Subtask 3: Iterate through each group string, calculate the deepest nesting level, and store the results in a list\ndef calculate_deepest_nesting_for_all_groups(input_string):\n    group_strings = split_input_string(input_string)\n    deepest_nesting_levels = []\n    \n    for group_string in group_strings:\n        deepest_nesting_level = calculate_deepest_nesting(group_string)\n        deepest_nesting_levels.append(deepest_nesting_level)\n    \n    return deepest_nesting_levels\n"]}
{"task_id": "HumanEval/7", "completion": ["\ndef filter_by_substring(input_list: List[str], substring: str) -> List[str]:\n    filtered_list = []\n    for string in input_list:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n"]}
{"task_id": "HumanEval/8", "completion": ["\ndef sum_product(input_list):\n    if not input_list:\n        return (0, 1)\n\n    sum_value = 0\n    product_value = 1\n\n    for num in input_list:\n        sum_value += num\n        product_value *= num\n\n    return (sum_value, product_value)\n"]}
{"task_id": "HumanEval/9", "completion": ["\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    rolling_maximum_values: List[int] = []\n    \n    for number in numbers:\n        if not isinstance(number, int):\n            raise ValueError(\"Input list should only contain integers.\")\n        \n        if not rolling_maximum_values:\n            rolling_maximum_values.append(number)\n        elif number > rolling_maximum_values[-1]:\n            rolling_maximum_values.append(number)\n        else:\n            rolling_maximum_values.append(rolling_maximum_values[-1])\n\n    return rolling_maximum_values\n"]}
{"task_id": "HumanEval/10", "completion": ["\ndef is_palindrome(string):\n    string = string.lower()\n    left = 0\n    right = len(string) - 1\n    while left < right:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n"]}
{"task_id": "HumanEval/11", "completion": []}
{"task_id": "HumanEval/12", "completion": ["\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:  \n        return None\n    \n    longest_string = None\n    longest_length = None\n    \n    for string in strings:\n        if longest_length is None or len(string) > longest_length:  \n            longest_string = string\n            longest_length = len(string)\n    \n    return longest_string\n"]}
{"task_id": "HumanEval/13", "completion": ["\ndef find_gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)\n\n\nprint(find_gcd(10, 25))\nprint(find_gcd(14, 28))\nprint(find_gcd(21, 7))\nprint(find_gcd(0, 5))\n"]}
{"task_id": "HumanEval/14", "completion": ["\ndef generate_prefixes(input_string):\n    \"\"\"\n    Generates a list of prefixes from the given input string.\n\n    Args:\n        input_string (str): The input string.\n\n    Returns:\n        list: A list of prefixes.\n\n    Example:\n        >>> generate_prefixes('abcde')\n        ['a', 'ab', 'abc', 'abcd', 'abcde']\n    \"\"\"\n    if not input_string:\n        return []\n    \n    prefix_list = []\n    for i in range(len(input_string)):\n        prefix_list.append(input_string[:i+1])\n    \n    return prefix_list\n"]}
{"task_id": "HumanEval/15", "completion": ["\ndef string_sequence(n: int) -> str:\n    result = \"\"\n    for num in range(n+1):\n        result += str(num) + \" \"\n    return result.strip()\n"]}
{"task_id": "HumanEval/16", "completion": []}
{"task_id": "HumanEval/17", "completion": ["\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Split the input music string into individual notes\n    notes = music_string.split()\n    \n    # Result list to store the beats\n    beats = []\n    \n    # Parse each note and determine the corresponding number of beats\n    for note in notes:\n        if note == 'o':\n            beats.append(4)  # Full note, 4 beats\n        elif note == 'o|':\n            beats.append(2)  # Half note, 2 beats\n        elif note == '.|':\n            beats.append(1)  # Quarter note, 1 beat\n        else:\n            # Invalid note type, consider it as 0 beats\n            beats.append(0)\n    \n    # Return the result list of beats\n    return beats\n"]}
{"task_id": "HumanEval/18", "completion": ["\ndef how_many_times(string, substring):\n    count = 0\n   \n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n   \n    return count\n\n# Additional test cases\nprint(how_many_times(\"hello\", \"he\"))  # 1\nprint(how_many_times(\"hello\", \"ol\"))  # 1\nprint(how_many_times(\"hello\", \"llo\"))  # 1\nprint(how_many_times(\"hello\", \"\"))  # 0\nprint(how_many_times(\"\", \"hello\"))  # 0\n\n# Comments added for clarity\ndef how_many_times(string, substring):\n    count = 0\n    \n    # Iterate through each character position in the string\n    for i in range(len(string) - len(substring) + 1):\n        # Check if substring starting from position i matches the given substring\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    \n    # Return the final count\n    return count\n"]}
{"task_id": "HumanEval/19", "completion": []}
{"task_id": "HumanEval/20", "completion": []}
{"task_id": "HumanEval/21", "completion": ["\ndef rescale_to_unit(input_list):\n    if len(input_list) == 0:\n        return []\n    \n    minimum_value = input_list[0]\n    maximum_value = input_list[0]\n\n    for element in input_list:\n        if element < minimum_value:\n            minimum_value = element\n        if element > maximum_value:\n            maximum_value = element\n\n    rescaled_values = []\n\n    for element in input_list:\n        rescaled_value = (element - minimum_value) / (maximum_value - minimum_value)\n        rescaled_values.append(rescaled_value)\n\n    return rescaled_values\n"]}
{"task_id": "HumanEval/22", "completion": []}
{"task_id": "HumanEval/23", "completion": ["\ndef strlen(input_string):\n    if input_string is None:\n        return 0\n    \n    length = 0\n    for _ in input_string:\n        length += 1\n    return length\n    \nprint(strlen('Hello'))  # Output: 5\nprint(strlen('Coding'))  # Output: 6\nprint(strlen(''))  # Output: 0\n"]}
{"task_id": "HumanEval/24", "completion": []}
{"task_id": "HumanEval/25", "completion": []}
{"task_id": "HumanEval/26", "completion": []}
{"task_id": "HumanEval/27", "completion": []}
{"task_id": "HumanEval/28", "completion": ["\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    if not all(isinstance(s, str) for s in strings):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    if not strings:\n        return \"\"\n        \n    return \"\".join(strings)\n\n# Tests\nassert concatenate([\"Hello\", \"World\"]) == \"HelloWorld\"\nassert concatenate([]) == \"\"\nassert concatenate([\"abc\", \"def\", \"ghi\"]) == \"abcdefghi\"\nassert concatenate([\"Hello\", \"World\", 123])  # Raises TypeError with an appropriate message\nassert concatenate(\"Hello World\")  # Raises TypeError with an appropriate message\n"]}
{"task_id": "HumanEval/29", "completion": ["\nfrom typing import List\n\ndef filter_by_prefix(words: List[str], prefix: str) -> List[str]:\n    filtered_words = []\n    for word in words:\n        if word.startswith(prefix):\n            filtered_words.append(word)\n    return filtered_words\n"]}
{"task_id": "HumanEval/30", "completion": ["\ndef get_positive(numbers):\n  positive_numbers = []\n  for number in numbers:\n    if number > 0:\n      positive_numbers.append(number)\n  return positive_numbers\n"]}
{"task_id": "HumanEval/31", "completion": ["\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"]}
{"task_id": "HumanEval/32", "completion": ["\nimport math\n\ndef poly(coeffs, x):\n    result = sum([coeff * math.pow(x, i) for i, coeff in enumerate(coeffs)])\n    return result\n\ndef find_zero(coeffs):\n    if len(coeffs) % 2 != 0:\n        raise ValueError(\"Incorrect number of coefficients\")\n\n    max_coeff = max([coeff for coeff in coeffs if coeff != 0], default=0)\n\n    for i in range(-100, 101):\n        x = i / 100\n        result = poly(coeffs, x)\n\n        if math.isclose(result, 0, rel_tol=1e-9):\n            return x\n\n    raise ValueError(\"Zero point could not be found\")\n\n# Unit tests for poly function\nassert math.isclose(poly([1, 2, 3], 1), 6, rel_tol=1e-9)\nassert math.isclose(poly([1, 2, 3], 2), 17, rel_tol=1e-9)\n\n# Unit tests for find_zero function\nassert math.isclose(find_zero([1, 2, 3, 0, 5, 0]), 0.5499999999999999, rel_tol=1e-9)\nassert math.isclose(find_zero([1, 0, 0, -1]), -1, rel_tol=1e-9)\n\nprint(\"Tests passed successfully.\")\n"]}
{"task_id": "HumanEval/33", "completion": ["\ndef sort_third(l):\n    # Error handling and input validation\n    if not isinstance(l, list):\n        return \"Error: Input is not a list\"\n    if not all(isinstance(i, int) for i in l):\n        return \"Error: List contains non-integer values\"\n    if len(l) == 0:\n        return []\n\n    divisible_indices = []\n    divisible_values = []\n\n    for i in range(len(l)):\n        if i % 3 == 0:\n            divisible_indices.append(i)\n\n    for index in divisible_indices:\n        divisible_values.append(l[index])\n\n    sorted_values = sorted(divisible_values)\n\n    output = []\n    for i in range(len(l)):\n        if i in divisible_indices:\n            output.append(sorted_values.pop(0))\n        else:\n            output.append(l[i])\n\n    return output\n"]}
{"task_id": "HumanEval/34", "completion": ["\ndef remove_duplicates(input_list):\n    if not isinstance(input_list, list):\n        raise ValueError(\"Input should be a list\")\n    \n    result_list = []\n    for element in input_list:\n        if element not in result_list:\n            result_list.append(element)\n    \n    return result_list\n\n\ndef sort_elements(unique_list):\n    if not isinstance(unique_list, list):\n        raise ValueError(\"Input should be a list\")\n    \n    return sorted(unique_list)\n\n\ndef unique(input_list):\n    if not isinstance(input_list, list):\n        raise ValueError(\"Input should be a list\")\n    \n    unique_list = remove_duplicates(input_list)\n    sorted_list = sort_elements(unique_list)\n    return sorted_list\n\n\n# Test cases\n\n# Additional test cases\nassert unique([5, 2, 5, 5, 2, 2, 7, 9, 9]) == [2, 5, 7, 9]\nassert unique([3, 1, 4, 2, 5]) == [1, 2, 3, 4, 5]\nassert unique(['cat', 'dog', 'cat', 'bird', 'dog']) == ['bird', 'cat', 'dog']\n\n# Edge case test cases\nassert unique([]) == []\nassert unique([1]) == [1]\nassert unique(['a', 'b', 'c']) == ['a', 'b', 'c']\n"]}
{"task_id": "HumanEval/35", "completion": []}
{"task_id": "HumanEval/36", "completion": ["\ndef fizz_buzz(n):\n    filtered_integers = [i for i in range(n) if i % 11 == 0 or i % 13 == 0]\n    count = sum(str(num).count('7') for num in filtered_integers)\n    return count\n\ndef test_fizz_buzz():\n    assert fizz_buzz(100) == 24\n    assert fizz_buzz(50) == 8\n    assert fizz_buzz(25) == 1\n    assert fizz_buzz(10) == 0\n    assert fizz_buzz(0) == 0\n    print(\"All test cases passed.\")\n\ntest_fizz_buzz()\n"]}
{"task_id": "HumanEval/37", "completion": ["\ndef sort_even(lst):\n    \"\"\"\n    Sorts the values at even indices in a given list while maintaining the original order\n    of values at odd indices.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The sorted list with values at even indices.\n    \"\"\"\n    # Validate input\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Helper function to get even indices\n    def get_even_indices(lst):\n        \"\"\"Returns a list of even indices.\"\"\"\n        return [i for i in range(len(lst)) if i % 2 == 0]\n\n    # Helper function to get sorted values at even indices\n    def get_sorted_even_values(lst):\n        \"\"\"Returns a list of sorted values at even indices.\"\"\"\n        even_indices = get_even_indices(lst)\n        even_values = [lst[i] for i in even_indices]\n        return sorted(even_values)\n\n    # Helper function to replace even values\n    def replace_even_values(lst, even_values):\n        \"\"\"Replaces the even values in the list.\"\"\"\n        even_indices = get_even_indices(lst)\n        for i, val in zip(even_indices, even_values):\n            lst[i] = val\n\n    # Get sorted values and replace even values\n    even_values = get_sorted_even_values(lst)\n    replace_even_values(lst, even_values)\n\n    return lst\n"]}
{"task_id": "HumanEval/38", "completion": ["\n# Code\n\ndef encode_cyclic(s):\n    \"\"\"\n    Encode a string using cyclic encoding.\n    \n    Args:\n    - s: A string to be encoded\n    \n    Returns:\n    - The encoded string\n    \"\"\"\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    encoded_groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(encoded_groups)\n\ndef decode_cyclic(s):\n    \"\"\"\n    Decode a cyclic encoded string.\n    \n    Args:\n    - s: A string to be decoded\n    \n    Returns:\n    - The decoded string\n    \"\"\"\n    decoded_groups = [group[-1] + group[:-1] for group in s.split(\" \")]\n    return \"\".join(decoded_groups)\n\n# Test cases for encode_cyclic\nassert encode_cyclic(\"\") == \"\"\nassert encode_cyclic(\"abc\") == \"bca\"\nassert encode_cyclic(\"abcdefghi\") == \"bcaefdhig\"\n\n# Test cases for decode_cyclic\nassert decode_cyclic(\"\") == \"\"\nassert decode_cyclic(\"bca\") == \"abc\"\nassert decode_cyclic(\"bcaefdhig\") == \"abcdefghi\"\n"]}
{"task_id": "HumanEval/39", "completion": ["\ndef fibonacci(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_1, fib_2 = 0, 1\n        for _ in range(3, n+1):\n            fib_1, fib_2 = fib_2, fib_1 + fib_2\n        return fib_2\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n):\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n            if count == n:\n                return fibonacci(i)\n        i += 1\n    return None\n\n\n# Testing the functions\nprint(fibonacci(10))  # Output: 34\nprint(is_prime(5))  # Output: True\nprint(prime_fib(6))  # Output: 13\n"]}
{"task_id": "HumanEval/40", "completion": ["\nfrom itertools import combinations\nimport unittest\n\ndef validate_input(lst):\n    if not isinstance(lst, list):\n        raise ValueError(\"Input is not a list\")\n    \n    if len(lst) < 3:\n        raise ValueError(\"List should have at least 3 elements\")\n    \n    if not all(isinstance(x, int) for x in lst):\n        raise ValueError(\"List contains non-integer elements\")\n        \ndef identify_distinct_triplets(lst):\n    triplets = list(combinations(lst, 3))\n    distinct_triplets = [t for t in triplets if len(set(t)) == 3]\n    return distinct_triplets\n\ndef check_triplets_sum_to_zero(distinct_triplets):\n    for triplet in distinct_triplets:\n        if sum(triplet) == 0:\n            return True\n    return False\n\ndef triples_sum_to_zero(lst):\n    validate_input(lst)\n    distinct_triplets = identify_distinct_triplets(lst)\n    result = check_triplets_sum_to_zero(distinct_triplets)\n    return result\n\nclass TripletSumZeroTests(unittest.TestCase):\n    \n    def test_triplets_sum_to_zero(self):\n        self.assertTrue(triples_sum_to_zero([1, 2, -3, 4, -1, -2, 0]))\n        self.assertTrue(triples_sum_to_zero([1, -1, 0]))\n        self.assertTrue(triples_sum_to_zero([1, 2, -3, 4, -2, 2]))\n        self.assertFalse(triples_sum_to_zero([1, 2, 3, 4, 5]))\n        self.assertFalse(triples_sum_to_zero([1, -2, 3, -4, 5]))\n    \n    def test_validate_input(self):\n        with self.assertRaises(ValueError):\n            validate_input(None)\n        \n        with self.assertRaises(ValueError):\n            validate_input(\"not a list\")\n        \n        with self.assertRaises(ValueError):\n            validate_input([1, 2, 'a', 4, 5])\n        \n        self.assertIsNone(validate_input([]))\n        self.assertIsNone(validate_input([1, 2, 3]))\n\nif __name__ == '__main__':\n    unittest.main()\n"]}
{"task_id": "HumanEval/41", "completion": ["\ndef count_collisions(n):\n    if not isinstance(n, int):\n        raise ValueError(\"Input should be an integer\")\n\n    if n < 0:\n        raise ValueError(\"Number of cars cannot be negative\")\n\n    collision_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            collision_count += 1\n\n    return collision_count\n"]}
{"task_id": "HumanEval/42", "completion": ["\ndef incr_list(lst):\n    \"\"\"\n    Increment each element in the input list by 1.\n\n    Args:\n      lst (list[int]): A list of integers.\n\n    Returns:\n      list[int]: A new list with elements incremented by 1.\n\n    Raises:\n      TypeError: If lst is not a list of integers.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    for num in lst:\n        if not isinstance(num, int):\n            raise TypeError(\"Elements of lst must be integers\")\n    result = []\n    for num in lst:\n        result.append(num + 1)\n    return result\n\n# Test Cases\nassert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([-1, 0, 1]) == [0, 1, 2]\nassert incr_list([]) == []\nassert incr_list([100]) == [101]\nassert incr_list([-100, 0, 100]) == [-99, 1, 101]\n"]}
{"task_id": "HumanEval/43", "completion": []}
{"task_id": "HumanEval/44", "completion": ["\ndef parse_inputs(x, base):\n    if not isinstance(x, int):\n        raise ValueError(\"Input must be an integer\")\n\n    if not isinstance(base, int) or base < 2 or base > 16:\n        raise ValueError(\"Base must be an integer between 2 and 16\")\n\n    # Additional input validation for specific bases\n    if base == 2 and any(digit not in \"01\" for digit in str(x)):\n        raise ValueError(\"For base 2, x must contain only 0s and 1s\")\n    if base == 8 and any(digit not in \"01234567\" for digit in str(x)):\n        raise ValueError(\"For base 8, x must contain only digits 0 to 7\")\n    if base == 16 and any(digit not in \"0123456789ABCDEFabcdef\" for digit in str(x)):\n        raise ValueError(\"For base 16, x must contain only hexadecimal digits\")\n\n    return x, base\n\n\ndef convert_base(x, base):\n    num = abs(x)\n    result = \"\"\n\n    while num > 0:\n        result = str(num % base) + result\n        num //= base\n\n    if x < 0:\n        result = \"-\" + result\n\n    return result\n\n\ndef generate_string_representation(x, base):\n    return x\n\n\ndef error_handling():\n    # Handle errors and edge cases\n    raise ValueError(\"Invalid input or base value\")\n\n\ndef main(x, base):\n    try:\n        # Input Validation\n        x, base = parse_inputs(x, base)\n\n        # Convert the Input Number\n        converted_number = convert_base(x, base)\n\n        # Generate the String Representation\n        string_representation = converted_number\n\n        # Error Handling\n        error_handling()\n\n        # Return the final result\n        return string_representation\n    except ValueError as e:\n        return str(e)\n\n\n# Example usage\nresult = main(123, 5)\nprint(result)\n"]}
{"task_id": "HumanEval/45", "completion": []}
{"task_id": "HumanEval/46", "completion": ["\ndef fib4(n):\n    # Base cases\n    if n == 0:\n        return 0\n    elif n <= 3:\n        return 1\n\n    # Initialize the Fibonacci sequence\n    fib_sequence = [0, 1, 1, 1]\n\n    # Calculate fib4(n) using iteration\n    for i in range(4, n + 1):\n        fib_sum = sum(fib_sequence[-4:])\n        fib_sequence.append(fib_sum)\n\n    return fib_sequence[n]\n\n\n# Additional test cases\nprint(fib4(-1))  # Expected output: Invalid input\nprint(fib4(10))  # Expected output: 55\nprint(fib4(30))  # Expected output: 1346269\n"]}
{"task_id": "HumanEval/47", "completion": []}
{"task_id": "HumanEval/48", "completion": []}
{"task_id": "HumanEval/49", "completion": ["\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Calculates the remainder of 2^n divided by p, handling various scenarios.\n    \"\"\"\n    def calculate_power(n: int) -> int:\n        if n == 0:\n            return 1\n        if n % 2 == 0:\n            half_power = calculate_power(n // 2)\n            return half_power * half_power\n        else:\n            half_power = calculate_power(n // 2)\n            return half_power * half_power * 2\n\n    def calculate_modulo(base: int, p: int) -> int:\n        if p != 0:\n            return base % p\n        return -1\n\n    def handle_numerics(result: int, p: int) -> int:\n        if result < 0:\n            return result % p\n        return result\n    \n    power = calculate_power(n)\n    modulo = calculate_modulo(power, p)\n    \n    return handle_numerics(modulo, p)\n"]}
{"task_id": "HumanEval/50", "completion": ["\ndef validate_input(input_str):\n    if not isinstance(input_str, str):\n        raise ValueError(\"Input parameter must be a string\")\n\ndef encode_shift(input_str):\n    encoded_str = \"\"\n    for char in input_str:\n        ascii_value = ord(char)\n        index = (ascii_value - ord('a') + 5) % 26\n        encoded_char = chr(index + ord('a'))\n        encoded_str += encoded_char\n    return encoded_str\n\ndef decode_shift(input_str):\n    decoded_str = \"\"\n    for char in input_str:\n        ascii_value = ord(char)\n        index = (ascii_value - ord('a') - 5 + 26) % 26\n        decoded_char = chr(index + ord('a'))\n        decoded_str += decoded_char\n    return decoded_str\n\ndef test_functions():\n    assert encode_shift(\"abc\") == \"fgh\"\n    assert encode_shift(\"xyz\") == \"cde\"\n    assert decode_shift(\"fgh\") == \"abc\"\n    assert decode_shift(\"cde\") == \"xyz\"\n    print(\"All test cases passed.\")\n\ndef additional_test_cases():\n    assert encode_shift(\"\") == \"\"\n    assert decode_shift(\"\") == \"\"\n    assert encode_shift(\"123\") == \"123\"\n    assert encode_shift(\"@#$\") == \"@#$\"\n    assert decode_shift(\"123\") == \"123\"\n    assert decode_shift(\"@#$\") == \"@#$\"\n    print(\"Additional test cases passed.\")\n\nvalidate_input(\"abc\")\nencoded_str = encode_shift(\"abc\")\ndecoded_str = decode_shift(encoded_str)\ntest_functions()\nadditional_test_cases()\n"]}
{"task_id": "HumanEval/51", "completion": []}
{"task_id": "HumanEval/52", "completion": ["\ndef is_below_threshold(number_list, threshold_value):\n    \"\"\"\n    Checks if all numbers in the given list are below the threshold value.\n    \n    Args:\n        number_list: A list of numbers.\n        threshold_value: An integer threshold value.\n        \n    Returns:\n        True if all numbers are below the threshold, False otherwise.\n    \"\"\"\n    for num in number_list:\n        if num >= threshold_value:\n            return False\n    return True\n\n# Additional function to iterate over the list and check if any number is equal to the threshold\ndef has_number_equal_threshold(number_list, threshold_value):\n    \"\"\"\n    Checks if any number in the given list is equal to the threshold value.\n    \n    Args:\n        number_list: A list of numbers.\n        threshold_value: An integer threshold value.\n        \n    Returns:\n        True if any number is equal to the threshold, False otherwise.\n    \"\"\"\n    for num in number_list:\n        if num == threshold_value:\n            return True\n    return False\n\n# Additional unit test\ndef test_has_number_equal_threshold():\n    # Test case: Number list contains a number equal to the threshold\n    assert has_number_equal_threshold([1, 2, 3, 4, 5], 3) == True\n    \n    # Test case: Number list does not contain a number equal to the threshold\n    assert has_number_equal_threshold([1, 2, 3, 4, 5], 6) == False\n\n    # Test case: Empty number list\n    assert has_number_equal_threshold([], 3) == False\n\ntest_has_number_equal_threshold()\n"]}
{"task_id": "HumanEval/53", "completion": ["\n# Define the function signature\ndef add_numbers(x: int, y: int) -> int:\n    # Handle non-integer inputs\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise ValueError(\"Inputs must be integers.\")\n\n    # Implement the function body\n    result = x + y\n    return result\n\n# Write unit tests\ndef test_add_numbers():\n    # Test case 1\n    assert add_numbers(2, 3) == 5\n\n    # Test case 2\n    assert add_numbers(-5, 10) == 5\n\n    # Test case 3\n    assert add_numbers(1000, 1000) == 2000\n\n    # Test case 4\n    assert add_numbers(0, 0) == 0\n\n    # Additional test cases\n    # Test case 5 - testing with negative numbers\n    assert add_numbers(-10, -12) == -22\n\n    # Test case 6 - testing with large values\n    assert add_numbers(9999999999, 10000000001) == 20000000000\n\n# Verify the correctness of the implementation\ntest_add_numbers()\n"]}
{"task_id": "HumanEval/54", "completion": []}
{"task_id": "HumanEval/55", "completion": ["\ndef fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to be calculated.\n\n    Returns:\n    int: The nth Fibonacci number.\n\n    Raises:\n    ValueError: If n is a negative number.\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    fib_prev = 0\n    fib_current = 1\n    for i in range(2, n+1):\n        fib_new = fib_prev + fib_current\n        fib_prev = fib_current\n        fib_current = fib_new\n\n    return fib_current\n\n# Testing the fib function\nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(5) == 5\nassert fib(10) == 55\n"]}
{"task_id": "HumanEval/56", "completion": []}
{"task_id": "HumanEval/57", "completion": []}
{"task_id": "HumanEval/58", "completion": []}
{"task_id": "HumanEval/59", "completion": []}
{"task_id": "HumanEval/60", "completion": []}
{"task_id": "HumanEval/61", "completion": ["\ndef correct_bracketing(brackets):\n    stack = []\n    \n    for bracket in brackets:\n        if bracket in ['(', '[', '{']:\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0 or stack.pop() != '(':\n                return False\n        elif bracket == ']':\n            if len(stack) == 0 or stack.pop() != '[':\n                return False\n        elif bracket == '}':\n            if len(stack) == 0 or stack.pop() != '{':\n                return False\n        else:\n            return False\n    \n    return len(stack) == 0\n"]}
{"task_id": "HumanEval/62", "completion": []}
{"task_id": "HumanEval/63", "completion": []}
{"task_id": "HumanEval/64", "completion": []}
{"task_id": "HumanEval/65", "completion": []}
{"task_id": "HumanEval/66", "completion": ["\ndef digitSum(input_string):\n    sum = 0\n    for char in input_string:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"]}
{"task_id": "HumanEval/67", "completion": ["\n# Subtask 1: Parse the input string to extract the numbers of apples and oranges.\n\ndef extract_fruit_counts(input_string):\n    fruit_counts = input_string.split(',')\n    \n    if len(fruit_counts) != 2:\n        raise ValueError(\"Invalid input format. Expecting 'apples,oranges'.\")\n    \n    # Remove any leading or trailing whitespace\n    apples = fruit_counts[0].strip()\n    oranges = fruit_counts[1].strip()\n    \n    return apples, oranges\n\n\n# Subtask 2: Convert the extracted numbers to integers.\n\ndef convert_to_integers(apples, oranges):\n    try:\n        apples = int(apples)\n        oranges = int(oranges)\n    except ValueError:\n        raise ValueError(\"Invalid input format. Expecting integer values for apples and oranges.\")\n    \n    return apples, oranges\n\n\n# Subtask 3: Subtract the numbers of apples and oranges from the total number of fruits in the basket.\n\ndef calculate_mango_count(total_fruits, apples, oranges):\n    try:\n        total_fruits = int(total_fruits)\n    except ValueError:\n        raise ValueError(\"Invalid input format. Expecting an integer value for total fruits.\")\n    \n    mango_count = total_fruits - apples - oranges\n    return mango_count\n\n# Subtask 4: Handle error conditions and edge cases appropriately.\n\ndef validate_input(input_str):\n    if not input_str:\n        raise ValueError(\"Invalid input. The input string cannot be empty.\")\n    if not all(char.isdigit() or char == ',' or char.isspace() for char in input_str):\n        raise ValueError(\"Invalid characters in the input string. Expecting 'apples,oranges'.\")\n    \n    return input_str.strip()\n\n# Test the implementation\ninput_str = input(\"Enter the numbers of apples, oranges, and total fruits (comma-separated): \")\ninput_str = validate_input(input_str)\napples, oranges = extract_fruit_counts(input_str)\napples, oranges = convert_to_integers(apples, oranges)\nmango_count = calculate_mango_count(10, apples, oranges)\nprint(f\"The number of mango fruits in the basket is: {mango_count}\")\n"]}
{"task_id": "HumanEval/68", "completion": ["\ndef pluck(arr):\n  even_values = []\n  smallest_value = float('inf')\n  smallest_index = None\n\n  # Find all even values in the array\n  for i in range(len(arr)):\n    if arr[i] % 2 == 0:\n      even_values.append(arr[i])\n\n  # Find the smallest even value\n  for i in range(len(even_values)):\n    smallest_value = min(smallest_value, even_values[i])\n\n  # Find the index of the smallest even value\n  if smallest_value != float('inf'):\n    smallest_index = arr.index(smallest_value)\n\n  # Return the plucked node as [smallest_value, its index]\n  if smallest_index is not None:\n    return [smallest_value, smallest_index]\n  else:\n    return []\n"]}
{"task_id": "HumanEval/69", "completion": ["\ndef find_max_integer(numbers):\n    max_integer = None\n    positive_integers = set()\n    for num in numbers:\n        if num < 0:\n            continue\n        if max_integer is None or num > max_integer:\n            max_integer = num\n        positive_integers.add(num)\n    if not positive_integers:\n        return None\n    return max_integer\n\nnumbers1 = [1, 2, 3, 4, 5]\nexpected_output1 = 5\n\nnumbers2 = [-1, -2, -3, -4, -5]\nexpected_output2 = None\n\nnumbers3 = [1, -2, 3, -4, 5]\nexpected_output3 = 3\n\nnumbers4 = [1, 2, 2, 2, 3, 4, 4]\nexpected_output4 = 4\n\nresult1 = find_max_integer(numbers1)\nassert result1 == expected_output1\n\nresult2 = find_max_integer(numbers2)\nassert result2 == expected_output2\n\nresult3 = find_max_integer(numbers3)\nassert result3 == expected_output3\n\nresult4 = find_max_integer(numbers4)\nassert result4 == expected_output4\n"]}
{"task_id": "HumanEval/70", "completion": ["\nfrom typing import List\n\ndef strange_order(input_list: List[int]) -> List[int]:\n    if len(input_list) < 2:\n        # Error handling for empty or single element list\n        raise ValueError(\"Input list must contain at least 2 elements\")\n\n    sorted_list = sorted(input_list)\n    strange_order_list = []\n    min_ptr = 0\n    max_ptr = len(sorted_list) - 1\n\n    while min_ptr <= max_ptr:\n        strange_order_list.append(sorted_list[min_ptr])\n        min_ptr += 1\n\n        if min_ptr > max_ptr:\n            break\n\n        strange_order_list.append(sorted_list[max_ptr])\n        max_ptr -= 1\n\n        if min_ptr > max_ptr:\n            break\n\n    return strange_order_list\n\n\n# Unit tests\ndef test_strange_order():\n    # Test case with normal input\n    input_list = [5, 2, 4, 3, 1]\n    expected_output = [1, 5, 2, 4, 3]\n    assert strange_order(input_list) == expected_output\n\n    # Test case with empty list\n    input_list = []\n    try:\n        strange_order(input_list)\n        # Assertion fails if an exception is not raised for empty list\n        assert False\n    except ValueError as e:\n        assert str(e) == \"Input list must contain at least 2 elements\"\n\n    # Test case with single element list\n    input_list = [1]\n    try:\n        strange_order(input_list)\n        # Assertion fails if an exception is not raised for single element list\n        assert False\n    except ValueError as e:\n        assert str(e) == \"Input list must contain at least 2 elements\"\n\n    print(\"All test cases passed\")\n\n\n# Run the unit tests\ntest_strange_order()\n"]}
{"task_id": "HumanEval/71", "completion": []}
{"task_id": "HumanEval/72", "completion": []}
{"task_id": "HumanEval/73", "completion": ["\ndef calculate_smallest_change(arr):\n    length = len(arr)\n    if length == 0 or length == 1:\n        return 0\n\n    changes = 0\n    i, j = 0, length - 1\n\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n\n    return changes\n"]}
{"task_id": "HumanEval/74", "completion": ["\n## 1. Calculate the total number of characters in a given list\ndef calculate_total(lst):\n    total = 0\n    for string in lst:\n        total += len(string)\n    return total\n\n## 2. Compare the total number of characters in two lists\ndef compare_totals(lst1, lst2):\n    total1 = calculate_total(lst1)\n    total2 = calculate_total(lst2)\n    if total1 < total2:\n        return lst1\n    return lst2\n\n## 3. Create the \"total_match\" function\ndef total_match(lst1, lst2):\n    return compare_totals(lst1, lst2)\n"]}
{"task_id": "HumanEval/75", "completion": ["\ndef is_multiply_prime(a):\n    if a >= 100:\n        return False\n    \n    primes = get_primes()\n    combinations = get_combinations(primes)\n    \n    for combination in combinations:\n        product = combination[0] * combination[1] * combination[2]\n        if product == a:\n            return True\n    \n    return False\n\n\ndef get_primes():\n    primes = []\n    for num in range(2, 100):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef get_combinations(primes):\n    combinations = []\n    for i in range(len(primes) - 2):\n        for j in range(i + 1, len(primes) - 1):\n            for k in range(j + 1, len(primes)):\n                combinations.append((primes[i], primes[j], primes[k]))\n    return combinations\n"]}
{"task_id": "HumanEval/76", "completion": ["\ndef is_simple_power(x, n):\n    if not isinstance(x, int) or not isinstance(n, int):\n        raise ValueError(\"Inputs must be of type 'int'\")\n\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n\n    return False\n"]}
{"task_id": "HumanEval/77", "completion": ["\ndef iscube(a):\n    if isinstance(a, int):\n        cube_root = a ** (1 / 3)\n        if cube_root.is_integer():\n            cube = int(cube_root) ** 3\n            return cube == a\n    return False\n"]}
{"task_id": "HumanEval/78", "completion": ["\n# Final version of the code\n\n# Your code here\n\n"]}
{"task_id": "HumanEval/79", "completion": ["\ndef decimal_to_binary(decimal_number):\n    \"\"\"\n    Converts a decimal number to its binary representation.\n    \n    Args:\n        decimal_number (int or float): The decimal number to be converted.\n    \n    Returns:\n        str: The binary representation of the decimal number.\n    \n    Raises:\n        ValueError: If the input is not a valid decimal number.\n    \"\"\"\n    if not isinstance(decimal_number, (int, float)):\n        raise ValueError(\"Invalid input. Please provide a valid decimal number.\")\n    \n    binary_number = \"\"\n    \n    if decimal_number == 0:\n        binary_number = \"0\"\n    else:\n        while decimal_number > 0:\n            binary_number = str(decimal_number % 2) + binary_number\n            decimal_number = decimal_number // 2\n    \n    return binary_number\n"]}
{"task_id": "HumanEval/80", "completion": ["\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n\n    total = 0\n    count = 0\n    for num in numbers:\n        if isinstance(num, (int, float)):\n            total += num\n            count += 1\n        else:\n            # Ignore non-numeric values instead of treating them as zero\n            continue\n    \n    if count == 0:\n        return None\n\n    return total / count\n\n\ndef test_calculate_average():\n    # Test case 1: Empty list\n    result = calculate_average([])\n    assert result == None, f\"Expected None, but got {result}\"\n\n    # Test case 2: List with valid numbers\n    result = calculate_average([1, 2, 3, 4, 5])\n    assert result == 3, f\"Expected 3, but got {result}\"\n\n    # Test case 3: List with a mix of valid and invalid numbers\n    result = calculate_average([1, 2, 3, \"4\", 5])\n    assert result == 2.75, f\"Expected 2.75, but got {result}\"\n\n    # Test case 4: List with no valid numbers\n    result = calculate_average([\"one\", \"two\", \"three\"])\n    assert result == None, f\"Expected None, but got {result}\"\n\n    print(\"All test cases passed!\")\n\n\nif __name__ == \"__main__\":\n    test_calculate_average()\n"]}
{"task_id": "HumanEval/81", "completion": []}
{"task_id": "HumanEval/82", "completion": []}
{"task_id": "HumanEval/83", "completion": ["\ndef starts_one_ends(n):\n    \"\"\"\n    Counts the number of n-digit positive integers that start or end with 1.\n\n    Args:\n        n (int): Number of digits.\n\n    Returns:\n        int: Total count of n-digit positive integers that start or end with 1.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Invalid input. 'n' must be a positive integer.\")\n\n    total_count = 9 * (10 ** (n - 1))\n    start_count = 10 ** (n - 1)\n    end_count = 10 ** (n - 1)\n    final_count = start_count + end_count\n    return final_count\n\nprint(starts_one_ends(1))\nprint(starts_one_ends(2))\nprint(starts_one_ends(3))\nprint(starts_one_ends(-1)) \nprint(starts_one_ends(1.5))  \n"]}
{"task_id": "HumanEval/84", "completion": []}
{"task_id": "HumanEval/85", "completion": ["\ndef add(numbers):\n    # Validate input requirements\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements of the list must be integers\")\n\n    # Calculate the sum of even elements at odd indices\n    result = sum(numbers[1::2])\n\n    return result\n\n# Test the implementation\ntest_cases = [\n    # Test for input with even elements at odd indices\n    {\n        \"input\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        \"expected_output\": 18\n    },\n    # Test for input with no even elements at odd indices\n    {\n        \"input\": [1, 3, 5, 7, 9],\n        \"expected_output\": 0\n    },\n    # Test for input with no odd indices\n    {\n        \"input\": [2, 4, 6, 8, 10],\n        \"expected_output\": 0\n    },\n    # Test for input with even elements at odd indices\n    {\n        \"input\": [1, 3, 5, 7, 9, 11, 13, 15],\n        \"expected_output\": 24\n    }\n]\n\nfor test_case in test_cases:\n    result = add(test_case[\"input\"])\n    print(f\"Input: {test_case['input']}\")\n    print(f\"Expected output: {test_case['expected_output']}\")\n    print(f\"Actual output: {result}\")\n    print(\"--------------------\")\n"]}
{"task_id": "HumanEval/86", "completion": ["\ndef anti_shuffle(data):\n    if not isinstance(data, str):\n        return \"Invalid input: data must be a string\"\n    \n    if len(data) % 2 != 0:\n        return \"Invalid input: data length must be even\"\n    \n    half_length = len(data) // 2\n    shuffled_data = data[:half_length][::-1] + data[half_length:][::-1]\n    \n    return shuffled_data\n"]}
{"task_id": "HumanEval/87", "completion": []}
{"task_id": "HumanEval/88", "completion": []}
{"task_id": "HumanEval/89", "completion": []}
{"task_id": "HumanEval/90", "completion": []}
{"task_id": "HumanEval/91", "completion": []}
{"task_id": "HumanEval/92", "completion": ["\ndef any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    return x + y == z or x + z == y or y + z == x\n"]}
{"task_id": "HumanEval/93", "completion": ["\ndef encode(message):\n    def swap_case(letter):\n        if letter.islower():\n            return letter.upper()\n        elif letter.isupper():\n            return letter.lower()\n        else:\n            return letter\n\n    def create_vowel_mapping_dict():\n        vowel_mapping_dict = {}\n        vowels = 'aeiou'\n        for vowel in vowels:\n            mapped_letter = chr((ord(vowel) - ord('a') + 2) % 26 + ord('a'))\n            vowel_mapping_dict[vowel] = mapped_letter\n        return vowel_mapping_dict\n\n    def replace_vowels(letter, vowel_mapping_dict):\n        lower_letter = letter.lower()\n        if lower_letter in vowel_mapping_dict:\n            return vowel_mapping_dict[lower_letter]\n        return letter\n\n    encoded_message_list = []\n    vowel_mapping_dict = create_vowel_mapping_dict()\n    for character in message:\n        if character.isalpha():\n            character = swap_case(character)\n            character = replace_vowels(character, vowel_mapping_dict)\n        encoded_message_list.append(character)\n\n    encoded_message = ''.join(encoded_message_list)\n    return encoded_message\n\n\nprint(encode(\"Hello World\"))\nprint(encode(\"Python is awesome\"))\nprint(encode(\"123\"))\n"]}
{"task_id": "HumanEval/94", "completion": ["\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_digits(num):\n    sum_digits = 0\n    while num > 0:\n        sum_digits += num % 10\n        num //= 10\n    return sum_digits\n\ndef find_largest_prime_sum(numbers):\n    largest_prime = None\n    for num in numbers:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    \n    if largest_prime is not None:\n        return sum_digits(largest_prime)\n    else:\n        return 0\n"]}
{"task_id": "HumanEval/95", "completion": []}
{"task_id": "HumanEval/96", "completion": ["\n# Your code here (with modifications or improvements if necessary)\n\n# If no modifications were made, output original code here\n"]}
{"task_id": "HumanEval/97", "completion": ["\ndef multiply(a: int, b: int) -> int:\n    \"\"\"\n    Multiply the unit digits of two given integers.\n    \n    Args:\n        a: The first integer.\n        b: The second integer.\n        \n    Returns:\n        The product of the unit digits of the given integers.\n    \"\"\"\n    # Extract unit digit of first integer using modulus operator\n    last_digit_a = a % 10\n\n    # Extract unit digit of second integer using modulus operator\n    last_digit_b = b % 10\n\n    # Calculate the product of the unit digits\n    product = last_digit_a * last_digit_b\n    \n    return product\n\n\n# Testing the function with provided sample cases\nprint(multiply(148, 412))   # Expected output: 16\nprint(multiply(19, 28))     # Expected output: 72\nprint(multiply(2020, 1851)) # Expected output: 0\nprint(multiply(14, -15))    # Expected output: 5\n\n# Additional testing with edge cases\nprint(multiply(9999, 8888)) # Expected output: 72\nprint(multiply(-14, -15))   # Expected output: 10\nprint(multiply(0, 15))      # Expected output: 0\n"]}
{"task_id": "HumanEval/98", "completion": ["\ndef count_upper(s):\n    vowels = extract_vowels(s)\n    uppercase_vowels = count_uppercase_vowels(vowels)\n    return uppercase_vowels\n\ndef extract_vowels(s):\n    vowels = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            vowels += s[i]\n    return vowels\n\ndef count_uppercase_vowels(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test the functionality\ninput_string = \"PyThon\"\nexpected_output = 1\n\nassert count_upper(input_string) == expected_output\n\n# Additional test cases\ninput_string = \"aBOUt\"\nexpected_output = 2\n\nassert count_upper(input_string) == expected_output\n\ninput_string = \"ELePHAnT\"\nexpected_output = 3\n\nassert count_upper(input_string) == expected_output\n\ninput_string = \"python\"\nexpected_output = 0\n\nassert count_upper(input_string) == expected_output\n"]}
{"task_id": "HumanEval/99", "completion": ["\nimport math\n\ndef closest_integer(value):\n    number = float(value)\n    floor_value = math.floor(number)\n    ceil_value = math.ceil(number)\n\n    distance_from_floor = abs(number - floor_value)\n    distance_from_ceil = abs(number - ceil_value)\n\n    if distance_from_floor < distance_from_ceil:\n        closest_int = floor_value\n    elif distance_from_floor > distance_from_ceil:\n        closest_int = ceil_value\n    else:\n        closest_int = int(number) + int(number > 0) or int(number < 0)\n\n    return closest_int\n"]}
{"task_id": "HumanEval/100", "completion": ["\ndef make_a_pile(n):\n    \"\"\"\n    Create a pile with the number of stones in each level based on the given positive integer n.\n\n    Args:\n        n (int): The number of levels in the pile.\n\n    Returns:\n        list: A list storing the number of stones in each level of the pile.\n    \"\"\"\n    pile = []\n    stones = n\n    \n    pile.append(stones)\n    for _ in range(n-1):\n        if n % 2 != 0:\n            stones += 2\n        else:\n            stones += 1\n        pile.append(stones)\n    \n    return pile\n"]}
{"task_id": "HumanEval/101", "completion": ["\ndef words_string(input_string):\n    # Input Validation\n    if not isinstance(input_string, str):\n        raise ValueError(\"Input should be a string\")\n\n    # String Splitting\n    words = input_string.split(' ')\n    words = [word.strip(',') for word in words]\n    words = [word.strip() for word in words]\n    \n    # Return the Result\n    return words\n"]}
{"task_id": "HumanEval/102", "completion": []}
{"task_id": "HumanEval/103", "completion": []}
{"task_id": "HumanEval/104", "completion": ["\ndef extract_positive_integers(numbers):\n    return [num for num in numbers if isinstance(num, int) and num > 0]\n\ndef has_even_digit(number):\n    return any(int(digit) % 2 == 0 for digit in str(number))\n\ndef filter_numbers(numbers):\n    return [num for num in numbers if not has_even_digit(num)]\n\ndef unique_digits(numbers):\n    positive_integers = extract_positive_integers(numbers)\n    filtered_numbers = filter_numbers(positive_integers)\n    return sorted(set(filtered_numbers))\n\n\n# Test Cases\nprint(unique_digits([23, 11, -5, 9, 345]))  # [9, 11, 23]\nprint(unique_digits([100, 200, 300]))  # []\nprint(unique_digits([-10, 0, 10]))  # [10]\nprint(unique_digits([12, 123, 456, 789]))  # [789]\n"]}
{"task_id": "HumanEval/105", "completion": ["\ndef by_length(array):\n    # Sorting the array in ascending order\n    array.sort()\n\n    # Extracting the integers between 1 and 9\n    extracted_array = [num for num in array if 1 <= num <= 9]\n\n    # Reversing the extracted array\n    extracted_array.reverse()\n\n    # Lookup map to replace integers with their corresponding names\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Replacing each integer with its corresponding name\n    final_array = [number_names[num] for num in extracted_array]\n\n    return final_array\n"]}
{"task_id": "HumanEval/106", "completion": ["\nimport math\n\ndef calculate_factorial(n):\n    \"\"\"Calculate the factorial of a number.\"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is undefined for negative numbers.\")\n    return math.factorial(n)\n\ndef calculate_sum(n):\n    \"\"\"Calculate the sum of numbers from 1 to n.\"\"\"\n    if n < 0:\n        raise ValueError(\"Sum is undefined for negative numbers.\")\n    return sum(range(1, n+1))\n\ndef f(n):\n    \"\"\"Calculate factorial or sum based on the index being even or odd.\"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(calculate_factorial(i))\n        else:\n            result.append(calculate_sum(i))\n    return result\n\n# Unit tests for the main function\ndef test_f():\n    assert f(0) == []\n    assert f(1) == [1]\n    assert f(5) == [1, 2, 6, 24, 120]\n    assert f(10) == [1, 2, 6, 4, 15, 720, 6, 56, 5040, 20]\n    assert f(12) == [1, 2, 6, 4, 15, 720, 6, 56, 5040, 20, 362880, 42]\n\ntest_f()\n"]}
{"task_id": "HumanEval/107", "completion": ["\n# Code implementation goes here...\n"]}
{"task_id": "HumanEval/108", "completion": []}
{"task_id": "HumanEval/109", "completion": ["\ndef is_non_decreasing(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\ndef shift_elements(arr):\n    arr.insert(0, arr.pop())\n\ndef main(arr):\n    if is_non_decreasing(arr):\n        shift_elements(arr)\n    return arr\n\n# Test cases\nprint(main([1, 2, 3, 4, 5]))  # [5, 1, 2, 3, 4]\nprint(main([5, 1, 2, 3, 4]))  # [4, 5, 1, 2, 3]\nprint(main([1, 1, 1, 1]))  # [1, 1, 1, 1]\nprint(main([]))  # []\nprint(main([1]))  # [1]\n"]}
{"task_id": "HumanEval/110", "completion": ["\n# Input Validation\ndef validate_input(lst1, lst2):\n    if not lst1 or not lst2:\n        raise ValueError(\"Both input lists must be non-empty.\")  # Test case for empty lists\n\n# Create a Helper Function\ndef is_even(number):\n    \"\"\"\n    Check if a number is even.\n    :param number: The input number (integer).\n    :return: True if the number is even, False otherwise.\n    \"\"\"\n    return number % 2 == 0  # The helper function only accepts integer inputs and handles a wide range of numbers.\n\n# Check if lst1 is already all even\ndef is_lst1_all_even(lst1):\n    \"\"\"\n    Check if all elements in a given list are even.\n    :param lst1: The input list.\n    :return: True if all elements are even, False otherwise.\n    \"\"\"\n    for num in lst1:\n        if not is_even(num):\n            return False\n    return True\n\n# Check if exchanging elements can make lst1 all even\ndef can_exchange_make_lst1_all_even(lst1, lst2):\n    \"\"\"\n    Check if exchanging elements between lst1 and lst2 can make lst1 all even.\n    :param lst1: The first input list.\n    :param lst2: The second input list.\n    :return: \"YES\" if lst1 can be made all even, \"NO\" otherwise.\n    \"\"\"\n    num_odd = 0  # Updated variable name for clarity\n    num_even = 0  # Updated variable name for clarity\n\n    for num in lst1:\n        if not is_even(num):\n            num_odd += 1\n\n    for num in lst2:\n        if is_even(num):\n            num_even += 1\n\n    if num_odd <= num_even:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test the code\nvalidate_input([], [3, 4])  # Test case for empty lst1\nvalidate_input([1, 2], [])  # Test case for empty lst2\n\nassert is_lst1_all_even([2, 4, 6])\nassert not is_lst1_all_even([1, 3, 5])\nassert can_exchange_make_lst1_all_even([2, 4, 6], [1, 3, 5])\nassert not can_exchange_make_lst1_all_even([1, 3, 5], [2, 4, 6])\n\n# Additional test cases\nassert not can_exchange_make_lst1_all_even([], [2, 4, 6])  # Test case for empty lst1\nassert can_exchange_make_lst1_all_even([1, 2, 3], [4, 6, 8])  # Test case with odd count <= even count\nassert not can_exchange_make_lst1_all_even([1, 2, 3], [4, 6, 8, 10])  # Test case with odd count > even count\n\nprint(\"Code execution completed successfully.\")\n"]}
{"task_id": "HumanEval/111", "completion": ["\ndef histogram(data):\n    histogram_data = {}\n    for value in data:\n        histogram_data[value] = histogram_data.get(value, 0) + 1\n    return histogram_data\n"]}
{"task_id": "HumanEval/112", "completion": ["\ndef remove_characters(s: str, c: str) -> str:\n    if s is None:\n        raise ValueError(\"Invalid input: s is None.\")\n    \n    result_string = ''.join([char for char in s if char not in c])\n    return result_string\n\n\ndef is_palindrome(s: str) -> bool:\n    if len(s) <= 1:\n        return True\n    \n    left = 0\n    right = len(s) - 1\n    \n    while left <= right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    return True\n\n\ndef reverse_delete(s: str, c: str) -> tuple:\n    result_string = remove_characters(s, c)\n    is_result_palindrome = is_palindrome(result_string)\n    return result_string, is_result_palindrome\n"]}
{"task_id": "HumanEval/113", "completion": []}
{"task_id": "HumanEval/114", "completion": []}
{"task_id": "HumanEval/115", "completion": []}
{"task_id": "HumanEval/116", "completion": ["\ndef sort_array(arr):\n    binary_count = {}\n\n    # Convert numbers to binary and count the number of ones\n    for num in arr:\n        binary = bin(num)[2:]\n        count_ones = binary.count('1')\n        binary_count[num] = count_ones\n\n    # Sort the numbers based on the count of ones and decimal values\n    sorted_arr = sorted(arr, key=lambda x: (binary_count[x], x))\n\n    return sorted_arr\n"]}
{"task_id": "HumanEval/117", "completion": []}
{"task_id": "HumanEval/118", "completion": []}
{"task_id": "HumanEval/119", "completion": ["\ndef validate_input(input_list):\n    \"\"\"\n    Validates the input to ensure it is a list of two strings, and each string consists only of parentheses.\n\n    Args:\n        input_list (list): The input list to validate.\n\n    Returns:\n        bool: True if the input is valid, False otherwise.\n    \"\"\"\n    if not isinstance(input_list, list) or len(input_list) != 2:\n        return False\n    for string in input_list:\n        if not isinstance(string, str) or not all(char in '()' for char in string):\n            return False\n    return True\n\n\ndef concatenate_strings(input_list):\n    \"\"\"\n    Concatenates two strings from the input list and returns the result.\n\n    Args:\n        input_list (list): The input list containing two strings.\n\n    Returns:\n        str: The concatenated string.\n    \"\"\"\n    return input_list[0] + input_list[1]\n\n\ndef is_balanced(string):\n    \"\"\"\n    Checks if the given string has balanced parentheses.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if the parentheses are balanced, False otherwise.\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return len(stack) == 0\n\n\ndef is_balanced_parentheses(input_list):\n    \"\"\"\n    Checks if the input strings in the list have balanced parentheses when concatenated.\n\n    Args:\n        input_list (list): The input list containing two strings.\n\n    Returns:\n        str: 'Yes' if the parentheses are balanced, 'No' otherwise.\n    \"\"\"\n    if not validate_input(input_list):\n        raise ValueError('Invalid input')\n    concatenated_string = concatenate_strings(input_list)\n    return 'Yes' if is_balanced(concatenated_string) else 'No'\n"]}
{"task_id": "HumanEval/120", "completion": ["\ndef maximum(lst, k):\n    if not lst:\n        return None\n    if k < 0:\n        return None\n\n    lst.sort(reverse=True)\n    return lst[k-1]\n"]}
{"task_id": "HumanEval/121", "completion": []}
{"task_id": "HumanEval/122", "completion": ["\n# Functionality - Handle negative input values correctly\ndef process_data(data):\n    if data < 0:\n        # Handle negative input values here\n        return None\n    else:\n        # Process the data\n        return processed_data\n\n# Readability and maintainability - Rename variables and functions\ndef calculate_average(list_of_numbers):\n    total_sum = sum(list_of_numbers)\n    average = total_sum / len(list_of_numbers)\n    return average\n\n# Test coverage - Add additional test cases\ndef is_prime_number(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n# Error handling and robustness - Implement error handling mechanisms\ndef divide(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        print(\"Error: Division by zero is not allowed\")\n        return None\n    except TypeError:\n        print(\"Error: Unsupported operand type(s) for '/'\")\n        return None\n    else:\n        return result\n\n# Performance - Optimize the code by using more efficient data structures\ndef count_letters(string):\n    letter_count = {}\n    for letter in string:\n        if letter not in letter_count:\n            letter_count[letter] = 1\n        else:\n            letter_count[letter] += 1\n    return letter_count\n"]}
{"task_id": "HumanEval/123", "completion": []}
{"task_id": "HumanEval/124", "completion": []}
{"task_id": "HumanEval/125", "completion": ["\nimport string\n\ndef count_odd_lowercase_letters(sentence):\n    if not sentence:\n        return 0\n\n    lowercase_letters = string.ascii_lowercase[1::2]\n    count = 0\n    words = sentence.split()\n    \n    for word in words:\n        for letter in word:\n            if letter.lower() in lowercase_letters:\n                count += 1\n\n    return count\n\n# Testing the updated code\nprint(count_odd_lowercase_letters(\"The quick brown fox jumps over the lazy dog.\"))  # 10\nprint(count_odd_lowercase_letters(\"The rain in Spain falls mainly on the plain.\"))  # 12\nprint(count_odd_lowercase_letters(\"I am groot.\"))  # 0\nprint(count_odd_lowercase_letters(\"\"))  # 0\n"]}
{"task_id": "HumanEval/126", "completion": ["\ndef is_sorted(lst):\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(num, (int, float)) for num in lst):\n        raise TypeError(\"List elements must be numeric\")\n\n    count_dict = {}\n    for num in lst:\n        count_dict[num] = count_dict.get(num, 0) + 1\n        if count_dict[num] > 1:\n            return False\n    \n    sorted_lst = sorted(lst)\n    if lst != sorted_lst:\n        return False\n\n    return True\n"]}
{"task_id": "HumanEval/127", "completion": []}
{"task_id": "HumanEval/128", "completion": ["\ndef prod_signs(input_array):\n    # Input validation\n    if not isinstance(input_array, list):\n        raise ValueError(\"Input must be a list\")\n    \n    if len(input_array) == 0:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    for num in input_array:\n        if not isinstance(num, (int, float)):\n            raise ValueError(\"Elements of the input array must be numeric\")\n        \n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        \n        magnitude_sum += abs(num)\n    \n    return magnitude_sum * sign_product\n"]}
{"task_id": "HumanEval/129", "completion": ["\ndef minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n\n    min_val = float('inf')\n    start_cell = (0, 0)\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] < min_val:\n                min_val = grid[i][j]\n                start_cell = (i, j)\n\n    path = [grid[start_cell[0]][start_cell[1]]]\n\n    def explore_neighbors(cell, visited):\n        i, j = cell\n        neighbors = []\n        if i > 0 and (i - 1, j) not in visited:\n            neighbors.append((i - 1, j))\n        if i < rows - 1 and (i + 1, j) not in visited:\n            neighbors.append((i + 1, j))\n        if j > 0 and (i, j - 1) not in visited:\n            neighbors.append((i, j - 1))\n        if j < cols - 1 and (i, j + 1) not in visited:\n            neighbors.append((i, j + 1))\n\n        neighbors.sort(key=lambda n: grid[n[0]][n[1]])\n        return neighbors\n\n    visited = set()\n    cell = start_cell\n    while len(path) < k:\n        visited.add(cell)\n        neighbors = explore_neighbors(cell, visited)\n        if not neighbors:\n            return []\n        cell = neighbors[0]\n        path.append(grid[cell[0]][cell[1]])\n\n    return path\n"]}
{"task_id": "HumanEval/130", "completion": ["\ndef tri(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 2]\n\n    sequence = [1, 3, 2]\n    for i in range(n - 2):\n        if i % 2 == 0:\n            term = 1 + i // 2\n        else:\n            term = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n        sequence.append(term)\n\n    return sequence\n"]}
{"task_id": "HumanEval/131", "completion": []}
{"task_id": "HumanEval/132", "completion": ["\ndef is_nested(input_string, valid_chars=['[', ']', '(', ')', '{', '}']):\n    if not isinstance(input_string, str):\n        raise ValueError(\"Input must be a string\")\n\n    for char in input_string:\n        if char not in valid_chars:\n            valid_chars_str = ', '.join(valid_chars)\n            raise ValueError(f\"Input must contain only {valid_chars_str}\")\n\n    valid_subsequences = []\n    stack = []\n    for i, char in enumerate(input_string):\n        if char in valid_chars:\n            if char in valid_chars[:len(valid_chars) // 2]:\n                stack.append((char, i))\n            else:\n                if stack and stack[-1][0] == valid_chars[valid_chars.index(char) - 1]:\n                    start_char, start_index = stack.pop()\n                    valid_subsequences.append(input_string[start_index:i+1])\n\n    for sequence in valid_subsequences:\n        if any(char in sequence[1:-1] for char in valid_chars):\n            return True\n\n    return False\n"]}
{"task_id": "HumanEval/133", "completion": ["\ndef sum_squares(lst):\n    \"\"\"\n    Returns the sum of squares of all elements in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of squares of all elements in the list.\n    \"\"\"\n\n    sum = 0\n    for num in lst:\n        sum += num ** 2\n    \n    return sum\n"]}
{"task_id": "HumanEval/134", "completion": ["\ndef check_if_last_char_is_a_letter(input_string):\n    if not input_string:  # Check if the input string is empty\n        return False\n    \n    last_char = input_string[-1]  # Get the last character of the input string\n    \n    if last_char.isalpha():  # Check if the last character is an alphabetical character\n        if input_string[-2] == ' ' or len(input_string) == 1:  # Check if it has a word boundary before it\n            return True\n    \n    return False\n\n\n# Test the function\nprint(check_if_last_char_is_a_letter(\"Hello world\"))  # False\nprint(check_if_last_char_is_a_letter(\"Hello world!\"))  # True\nprint(check_if_last_char_is_a_letter(\"\"))  # False\n"]}
{"task_id": "HumanEval/135", "completion": []}
{"task_id": "HumanEval/136", "completion": []}
{"task_id": "HumanEval/137", "completion": []}
{"task_id": "HumanEval/138", "completion": ["\ndef is_positive_integer(num):\n    return isinstance(num, int) and num > 0\n\ndef generate_even_pairs(max_num):\n    pairs = []\n    for num1 in range(2, max_num, 2):\n        for num2 in range(2, max_num, 2):\n            if num1 + num2 <= max_num:\n                pairs.append((num1, num2))\n    return pairs\n\ndef generate_combinations(numbers):\n    combinations = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                for l in range(k+1, len(numbers)):\n                    combinations.append((numbers[i], numbers[j], numbers[k], numbers[l]))\n    return combinations\n\ndef check_combinations(combinations, target):\n    for combination in combinations:\n        if sum(combination) == target:\n            return True\n    return False\n\ndef main():\n    input_num = int(input(\"Enter a positive integer: \"))\n    \n    if not is_positive_integer(input_num):\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    \n    pairs = generate_even_pairs(input_num)\n    combinations = generate_combinations(pairs)\n    result = check_combinations(combinations, input_num)\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"]}
{"task_id": "HumanEval/139", "completion": ["\ndef special_factorial(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Invalid input: n should be a positive integer.\")\n\n    result = 1\n    for i in range(n, 1, -1):\n        result *= i\n\n    special_result = result\n    for i in range(n, 2, -1):\n        special_result *= factorial(i - 1)\n\n    return special_result\n\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n"]}
{"task_id": "HumanEval/140", "completion": ["\nimport re\n\ndef replace_spaces_with_underscores(text):\n    \"\"\"Replace all spaces with underscores.\"\"\"\n    return re.sub(r'\\s', '_', text)\n\ndef replace_consecutive_spaces_with_hyphen(text):\n    \"\"\"Replace consecutive spaces with a single hyphen if there are more than 2 consecutive spaces.\"\"\"\n    return re.sub(r'\\s{2,}', '-', text)\n\ndef fix_spaces(text):\n    \"\"\"\n    Fix spaces in the given text:\n    - Replaces all spaces with underscores\n    - Replaces consecutive spaces with a single hyphen if there are more than 2 consecutive spaces\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n    \n    text = replace_spaces_with_underscores(text)\n    text = replace_consecutive_spaces_with_hyphen(text)\n    \n    return text\n"]}
{"task_id": "HumanEval/141", "completion": []}
{"task_id": "HumanEval/142", "completion": []}
{"task_id": "HumanEval/143", "completion": []}
{"task_id": "HumanEval/144", "completion": ["\nfrom fractions import Fraction\n\ndef convert_to_numerical_fraction(fraction):\n    numerator, denominator = fraction.split('/')\n    numerator = int(numerator)\n    denominator = int(denominator)\n    return numerator, denominator\n\ndef multiply(num1, num2):\n    return num1 * num2\n\ndef is_whole_number(numerator, denominator):\n    if denominator == 0:\n        return False\n    return numerator % denominator == 0\n\ndef simplify(fraction):\n    x, n = fraction\n    x_numerator, x_denominator = convert_to_numerical_fraction(x)\n    n_numerator, n_denominator = convert_to_numerical_fraction(n)\n\n    if x_denominator == 0 or n_denominator == 0:\n        return False\n\n    numerator = multiply(x_numerator, n_numerator)\n    denominator = multiply(x_denominator, n_denominator)\n\n    return is_whole_number(numerator, denominator)\n\n# Testing\ntest_cases = [\n    (('1/2', '2/3'), False),\n    (('3/4', '4/5'), True),\n    (('5/6', '6/7'), False)\n]\n\nfor test in test_cases:\n    fraction, expected_result = test\n    result = simplify(fraction)\n    assert result == expected_result, f\"Test failed for fraction {fraction}. Expected: {expected_result}. Actual: {result}\"\n"]}
{"task_id": "HumanEval/145", "completion": ["\ndef calculate_digit_sum(num):\n    return sum(int(digit) for digit in str(num))\n\ndef order_by_points(lst):\n    if not lst:\n        return []\n    return sorted(lst, key=lambda x: (calculate_digit_sum(x), lst.index(x)))\n\n# Sample usage\nnumbers = [123, 45, 678, 90, 12]\nordered_numbers = order_by_points(numbers)\nprint(ordered_numbers)\n"]}
{"task_id": "HumanEval/146", "completion": []}
{"task_id": "HumanEval/147", "completion": ["\n# Subtask 1: Create an integer array `a` of length `n`\ndef create_array(n):\n    if n <= 0:\n        raise ValueError(\"Invalid value of n. It should be a positive integer.\")\n\n    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    return a\n\n# Subtask 2: Identify all valid triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3\ndef count_valid_triples(a):\n    n = len(a)\n    count = 0\n\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n# Subtask 3: Implement the `get_max_triples` function that integrates the above subtasks\ndef get_max_triples(n):\n    a = create_array(n)\n    count = count_valid_triples(a)\n    return count\n\n# Test the implementation\nprint(get_max_triples(5))  # Output: 6\n"]}
{"task_id": "HumanEval/148", "completion": ["\ndef bf(planet1, planet2):\n    distance = calculate_distance(planet1, planet2)\n    gravity = calculate_gravity(planet1, planet2)\n    habitable_zone = determine_habitable_zone(planet1, planet2)\n\n    return distance, gravity, habitable_zone\n\ndef calculate_distance(planet1, planet2):\n    if planet1 and planet2:\n        distance = calculate_distance_formula(planet1, planet2)\n        return distance\n    else:\n        raise ValueError(\"Input planetary names cannot be empty.\")\n\ndef calculate_distance_formula(planet1, planet2):\n    pass\n\ndef calculate_gravity(planet1, planet2):\n    if planet1 and planet2:\n        gravity = calculate_gravity_formula(planet1, planet2)\n        return gravity\n    else:\n        raise ValueError(\"Input planetary names cannot be empty.\")\n\ndef calculate_gravity_formula(planet1, planet2):\n    pass\n\ndef determine_habitable_zone(planet1, planet2):\n    if planet1 and planet2:\n        habitable_zone = calculate_habitable_zone_formula(planet1, planet2)\n        return habitable_zone\n    else:\n        raise ValueError(\"Input planetary names cannot be empty.\")\n\ndef calculate_habitable_zone_formula(planet1, planet2):\n    pass\n\nbf(\"Earth\", \"Mars\")\n"]}
{"task_id": "HumanEval/149", "completion": ["\ndef delete_strings_with_odd_length(strings):\n    return [s for s in strings if len(s) % 2 == 0]\n\ndef sort_strings(strings):\n    return sorted(strings, key=lambda s: (len(s), s))\n\ndef main(strings):\n    filtered_strings = delete_strings_with_odd_length(strings)\n    sorted_strings = sort_strings(filtered_strings)\n    return sorted_strings\n\ninput_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"elephant\", \"fig\"]\noutput_list = main(input_list)\nprint(output_list)\n"]}
{"task_id": "HumanEval/150", "completion": []}
{"task_id": "HumanEval/151", "completion": ["\ndef double_the_difference(lst):\n    squared_sum = 0\n    \n    for num in lst:\n        if num % 2 == 1 and num > 0:\n            squared_sum += num**2\n    \n    return squared_sum\n"]}
{"task_id": "HumanEval/152", "completion": ["\n# Function to compare two values and return the result\ndef compare_values(value1, value2):\n    \"\"\"\n    Function to compare two values and return the result.\n    \n    Args:\n    value1 (numeric or string): The first value to compare.\n    value2 (numeric or string): The second value to compare.\n    \n    Returns:\n    str: The result of the comparison.\n    \"\"\"\n    if value1 == value2:\n        return \"Values are equal\"\n    elif value1 < value2:\n        return \"Value 1 is smaller\"\n    else:\n        return \"Value 2 is smaller\"\n"]}
{"task_id": "HumanEval/153", "completion": ["\ndef multiply_numbers(a, b):\n    return a * b\n\nassert multiply_numbers(2, 3) == 6\nassert multiply_numbers(5.5, 2) == 11.0\nassert multiply_numbers(-4, 10) == -40\nassert multiply_numbers(0, 100) == 0\n\nprint(\"All test cases passed.\")\n"]}
{"task_id": "HumanEval/154", "completion": []}
{"task_id": "HumanEval/155", "completion": ["\ndef even_odd_count(num):\n    if not isinstance(num, int):\n        raise TypeError(\"Input should be an integer\")\n\n    even_count = 0\n    odd_count = 0\n\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count\n\n\nprint(even_odd_count(1234567890))\nprint(even_odd_count(-987654321))\nprint(even_odd_count(0))\nprint(even_odd_count(12345678901234567890))\ntry:\n    print(even_odd_count(\"12345\"))\nexcept TypeError as e:\n    print(str(e))\ntry:\n    print(even_odd_count(12.34))\nexcept TypeError as e:\n    print(str(e))\ntry:\n    print(even_odd_count(\"\"))\nexcept TypeError as e:\n    print(str(e))\n"]}
{"task_id": "HumanEval/156", "completion": ["\ndef validate_input(num):\n    if not isinstance(num, int) or num < 1 or num > 1000:\n        raise ValueError(\"Input must be a positive integer between 1 and 1000.\")\n\n\ndef int_to_mini_roman(num):\n    validate_input(num)\n    \n    conversion_rules = {\n        1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\",\n        40: \"xl\", 50: \"l\", 90: \"xc\", 100: \"c\",\n        400: \"cd\", 500: \"d\", 900: \"cm\", 1000: \"m\"\n    }\n    \n    result = \"\"\n    for value, symbol in reversed(sorted(conversion_rules.items())):\n        while num >= value:\n            result += symbol\n            num -= value\n    \n    return result.lower()\n"]}
{"task_id": "HumanEval/157", "completion": ["\ndef right_angle_triangle(a, b, c):\n    try:\n        # Subtask 2: Validate input\n        if not a or not b or not c or a <= 0 or b <= 0 or c <= 0:\n            raise ValueError(\"Invalid input values. Sides of triangle cannot be zero or negative.\")\n        \n        # Subtask 3: Check for a right-angled triangle\n        if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n            return True\n        else:\n            return False\n    \n    except Exception as e:\n        raise e\n"]}
{"task_id": "HumanEval/158", "completion": []}
{"task_id": "HumanEval/159", "completion": ["\ndef eat(food_items):\n    if food_items < 0:\n        raise ValueError(\"The number of food items cannot be negative.\")\n    return food_items\n"]}
{"task_id": "HumanEval/160", "completion": ["\ndef do_algebra(a, b):\n    return ((a ** 2) - (b ** 2)) + ((a + b) * (a - b))\n\n\nresult = do_algebra(5, 3)\nprint(result)\n"]}
{"task_id": "HumanEval/161", "completion": ["\ndef solve(input_string):\n    modified_string = \"\"\n    has_letters = False\n\n    # Subtask 1 - Reverse the Case of Letters\n    for char in input_string:\n        if char.isalpha():\n            has_letters = True\n            if char.islower():\n                modified_string += char.upper()\n            else:\n                modified_string += char.lower()\n        else:\n            modified_string += char\n\n    # Subtask 2 - Reverse the String if No Letters Present\n    if not has_letters:\n        modified_string = input_string[::-1]\n\n    return modified_string\n"]}
{"task_id": "HumanEval/162", "completion": []}
{"task_id": "HumanEval/163", "completion": ["\ndef contains_even_digits(num):\n    \"\"\"\n    Helper function that checks whether a given number contains any even digits.\n    Returns True if the number contains even digits, otherwise False.\n    \"\"\"\n    digits = str(num)\n    for digit in digits:\n        if int(digit) % 2 != 0:\n            return False\n    return True\n\ndef generate_integers(a, b):\n    \"\"\"\n    Main function that generates a list of integers between 'a' and 'b' (inclusive),\n    excluding numbers that contain even digits.\n    Returns the list of filtered integers in ascending order.\n    \"\"\"\n    result = []\n    for num in range(a, b + 1):\n        if not contains_even_digits(num):\n            result.append(num)\n    return result\n\n# Perform Unit Testing\ntest_cases = [\n    (1, 10),  # includes 1, 3, 5, 7, 9\n    (10, 20),  # includes 11, 13, 15, 17, 19\n    (20, 30),  # includes 21, 23, 25, 27, 29\n    (0, 5),  # includes 1, 3, 5\n    (50, 60)  # includes 51, 53, 55, 57, 59\n]\n\nfor test_case in test_cases:\n    a, b = test_case\n    print(f\"generate_integers({a}, {b}) = {generate_integers(a, b)}\")\n"]}
