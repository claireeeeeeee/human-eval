{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    pass"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    decimal_part = number - int(number)\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(number - mean) for number in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    nest_levels = []\n    curr_level = 0\n    max_level = 0\n    \n    for c in paren_string:\n        if c == '(':\n            curr_level += 1\n            max_level = max(max_level, curr_level)\n        elif c == ')':\n            curr_level -= 1\n            \n    return max_level"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    pass\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1 if numbers else 1\n    for num in numbers:\n        product *= num\n    return total_sum, product"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    res = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res += \"0\"\n        else:\n            res += \"1\"\n    return res"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    \n    return durations"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if substring == \"\":\n        return count\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numbers in ascending order.\n\n    Args:\n        numbers (str): The space-delimited string of numbers from 'zero' to 'nine'.\n\n    Returns:\n        str: The space-delimited sorted string of numbers.\n    \"\"\"\n    number_mapping = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n\n    number_list = numbers.split()\n    sorted_numbers = sorted(number_list, key=lambda x: number_mapping[x])\n\n    return ' '.join(sorted_numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(len(sorted_numbers) - 1):\n        current_pair = (sorted_numbers[i], sorted_numbers[i+1])\n        if abs(current_pair[0] - current_pair[1]) < abs(closest_pair[0] - closest_pair[1]):\n            closest_pair = current_pair\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    \n    scaled_numbers = []\n    for num in numbers:\n        scaled_num = (num - min_num) / (max_num - min_num)\n        scaled_numbers.append(scaled_num)\n    \n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1): \n        if n % i == 0:\n            return i\n\nprint(largest_divisor(15))"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    pass"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    largest_non_zero_coefficient = max(xs)\n    n = len(xs) - 1\n    \n    if n % 2 != 0 or largest_non_zero_coefficient == 0:\n        raise ValueError(\"Invalid input\")\n    \n    x = -largest_non_zero_coefficient / xs[1]\n    return round(x, 2)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    sorted_values = sorted(l[::3])\n    new_list = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(sorted_values.pop(0))\n        else:\n            new_list.append(l[i])\n    return new_list"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    \"\"\"\n    Return sorted unique elements in a list\n    \n    Args:\n    - l: a list of integers\n    \n    Returns:\n    - a sorted list of unique elements from the input list\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    even_indices = l[::2]\n    sorted_even_indices = sorted(even_indices)\n    new_list = l.copy()\n    new_list[::2] = sorted_even_indices\n    return new_list"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    a = 2\n    b = 3\n    count = 2\n    while count < n:\n        c = a + b\n        if is_prime(c):\n            count += 1\n        a = b\n        b = c\n    return b\n\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(n):\n        # simulate cars moving left to right\n        for j in range(n):\n            # simulate cars moving right to left\n            if i != j:\n                collisions += 1\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    new_list = []\n    for element in l:\n        new_list.append(element + 1)\n    return new_list"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    if len(text) == 0:\n        return True\n    else:\n        return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    while n > 0:\n        if n & 1 == 1:\n            result = result * 2 % p\n        n = n >> 1\n        if n == 0:\n            break\n        temp = 2 % p\n        for i in range(1, n.bit_length()):\n            temp = temp ** 2 % p\n        result = result * temp % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    new_text = \"\"\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    result = True\n    for num in l:\n        if num >= t:\n            result = False\n            break\n    return result"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    chars0 = set(s0)\n    chars1 = set(s1)\n    return chars0 == chars1\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))\nprint(same_chars('abcd', 'dddddddabc'))\nprint(same_chars('dddddddabc', 'abcd'))\nprint(same_chars('eabcd', 'dddddddabc'))\nprint(same_chars('abcd', 'dddddddabce'))\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return -1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and len(stack) > 0:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    for i in range(len(l)-1):\n        if l[i] >= l[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    l1_set = set(l1)\n    l2_set = set(l2)\n    common_elements = sorted(list(l1_set.intersection(l2_set)))\n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n\n\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor(2048))"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"Return the derivative of a polynomial represented by the coefficients in xs.\n    \"\"\"\n    deriv = []\n    for i in range(1, len(xs)):\n        deriv.append(xs[i] * i)\n    return deriv"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if s[-1] == 'y':\n        vowels.append('y')\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    upper_sum = 0\n    \n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    \n    return upper_sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s: str, n: int) -> int:\n    for char in s:\n        if char.isdigit():\n            n -= int(char)\n    return n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\r\n    even_values = [num for num in arr if num % 2 == 0]\r\n    if not even_values:\r\n        return []\r\n    else:\r\n        min_value = min(even_values)\r\n        min_index = arr.index(min_value)\r\n        return [min_value, min_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    max_num = -1\n    for num, freq in freq_dict.items():\n        if freq >= num:\n            max_num = max(max_num, num)\n\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result_lst = []\n\n    while sorted_lst:\n        result_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result_lst.append(sorted_lst.pop())\n    \n    return result_lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    \n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "from typing import List, Union\n\ndef smallest_change(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return 0\n\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n\n        left += 1\n        right -= 1\n\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_len_1 = sum(len(s) for s in lst1)\n    total_len_2 = sum(len(s) for s in lst2)\n\n    if total_len_1 < total_len_2:\n        return lst1\n    elif total_len_1 > total_len_2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    prime_factors = []\n    i = 2\n    while len(prime_factors) < 3 and i <= a:\n        if a % i == 0:\n            prime_factors.append(i)\n            a = a / i\n            i = 1\n        i += 1\n\n    if len(prime_factors) == 3:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    cubic_root = round(a**(1/3))\n    return cubic_root**3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    \n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    Check if the string s is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa >= 3.7:\n            letter_grades.append(\"A\")\n        elif gpa >= 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa >= 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa >= 2.7:\n            letter_grades.append(\"B\")\n        elif gpa >= 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa >= 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa >= 1.7:\n            letter_grades.append(\"C\")\n        elif gpa >= 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa >= 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa >= 0.7:\n            letter_grades.append(\"D\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    if n == 1:\n        count = 1\n    elif n > 1:\n        count = 9 * pow(10, n - 2)\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert N to binary\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of digits in binary\n    total_sum = sum(map(int, binary))\n    \n    # Convert the sum back to binary\n    binary_sum = bin(total_sum)[2:]\n    \n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n\nprint(add([4, 2, 6, 7]))"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        new_words.append(sorted_word)\n    return ' '.join(new_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    \n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort(key=lambda c: (c[0], -c[1]))\n    \n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if array:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n    else:\n        return []"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            new_char = chr((ord(char) - 97 + (2 * 2)) % 26 + 97)\n            encrypted_string += new_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    smallest = min(lst)\n    second_smallest = None\n    \n    for num in lst:\n        if num > smallest:\n            if second_smallest is None or num < second_smallest:\n                second_smallest = num\n    \n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('. ')\n    sentences = [s for s in sentences if s.startswith('I')]\n    return len(sentences)"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    new_message = \"\"\n    for char in message:\n        if char.isalpha() and char.islower():\n            new_char = chr((ord(char) + 2 - 97) % 26 + 97)\n            new_message += new_char.upper()\n        elif char.isalpha() and char.isupper():\n            new_char = chr((ord(char) + 2 - 65) % 26 + 65)\n            new_message += new_char.lower()\n        else:\n            new_message += char\n    return new_message"}
{"task_id": "HumanEval/94", "completion": "def largest_prime(lst):\n    prime_numbers = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n\n    largest_prime = max(prime_numbers)\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    lowercase_keys = [key for key in dict if isinstance(key, str) and key.islower()]\n    uppercase_keys = [key for key in dict if isinstance(key, str) and key.isupper()]\n    if len(lowercase_keys) > 0 and len(uppercase_keys) > 0:\n        return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return abs(a % 10 * b % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(1, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    levels = [n]\n    for i in range(n-1):\n        if levels[i] % 2 == 0:\n            levels.append(levels[i] + 1)\n        else:\n            levels.append(levels[i] + 2)\n    return levels\n\nprint(make_a_pile(3))"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    nums = [num for num in range(x, y+1) if num % 2 == 0]\n    if nums:\n        return max(nums)\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    for num in sorted(x):\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr = [num for num in arr if 1 <= num <= 9]\n    arr.sort()\n    arr.reverse()\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [digit_names[num-1] for num in arr]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            sum_of_nums = sum(range(1, i+1))\n            result.append(sum_of_nums)\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # check if number is palindrome\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    total = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            total += 1\n    return total"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n\n    sorted_arr = sorted(arr)\n    shifts = 0\n    \n    while shifts < len(arr):\n        arr = [arr[-1]] + arr[:-1]\n        if arr == sorted_arr:\n            return True\n        shifts += 1\n    \n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count = 0\n\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    \n    if even_count == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    count = {}\n    for letter in test.split():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    max_count = max(count.values())\n\n    result = {}\n    for letter, freq in count.items():\n        if freq == max_count:\n            result[letter] = freq\n\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(\"the number of odd elements in the string {} of the input.\".format(odd_count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n    \"\"\"\n\n    rows = len(grid)\n    if rows == 0:\n        return 0\n\n    cols = len(grid[0])\n    if cols == 0:\n        return 0\n\n    total_water = 0\n\n    for row in grid:\n        for well in row:\n            total_water += well\n\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def binary_ones(num):\n        return bin(num).count('1')\n    \n    arr.sort(key=lambda x: (binary_ones(x), x))\n    return arr\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split(\" \")  # split the string into words\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in \"aeiou\":\n                consonant_count += 1\n                \n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    index = len(word) - 3\n    while index >= 1:\n        if word[index] in vowels:\n            return word[index]\n        index -= 1\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if len(stack) == 0:\n                    return 'No'\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    sum_odd = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum_odd += lst[i]\n    return sum_odd"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if -99 < arr[i] < 100:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = [n]\n\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    \n    if date[2] != '-' or date[5] != '-':\n        return False\n    \n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:10])\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 31:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if ord(char.lower()) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst: List[int]) -> bool:\n    lst1 = list(set(lst))\n    if lst1 != sorted(lst1):\n        return False\n    elif len(lst) != len(lst1):\n        return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    \n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    \n    if length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    total = 0\n    sign_product = 1\n    \n    for num in arr:\n        total += abs(num)\n        \n        if num < 0:\n            sign_product *= -1\n        elif num == 0:\n            sign_product = 0\n    \n    return total * sign_product"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Args:\n        grid (list): Grid with N rows and N columns (N >= 2) containing distinct values.\n        k (int): Positive integer representing the length of the minimum path.\n    \n    Returns:\n        list: Ordered list of the values on the cells that the minimum path go through.\n        \n    Examples:\n        >>> minPath([[1,2,3], [4,5,6], [7,8,9]], 3)\n        [1, 2, 1]\n\n        >>> minPath([[5,9,3], [4,1,6], [7,8,2]], 1)\n        [1]\n    \"\"\"\n    rows = len(grid)\n    cols = len(grid[0])\n\n    def is_valid(i, j):\n        return 0 <= i < rows and 0 <= j < cols\n\n    def dfs(i, j, path_len, curr_path):\n        if path_len == k:\n            return curr_path\n\n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        min_path = None\n\n        for dx, dy in directions:\n            ni, nj = i + dx, j + dy\n            if is_valid(ni, nj) and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                path = dfs(ni, nj, path_len+1, curr_path + [grid[ni][nj]])\n                visited.remove((ni, nj))\n\n                if path is not None:\n                    if min_path is None or path < min_path:\n                        min_path = path\n\n        return min_path\n\n    visited = set()\n    for i in range(rows):\n        for j in range(cols):\n            visited.add((i, j))\n            path = dfs(i, j, 1, [grid[i][j]])\n            visited.remove((i, j))\n\n            if path is not None:\n                return path\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    sequence = [3]\n    if n >= 1:\n        sequence.append(1)\n        if n >= 2:\n            sequence.append(2)\n            for i in range(3, n+1):\n                if i % 2 == 0:\n                    sequence.append(1 + i // 2)\n                else:\n                    sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n    return sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    odd_digits = [int(digit) for digit in str(n) if int(digit) % 2 != 0]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    sum = 0\n    for num in lst:\n        sum += int(num) ** 2\n    return sum"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if last_char in txt.strip().split(\" \")[-1]:\n            return False\n        else:\n            return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    if not arr:\n        return -1\n\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n            break\n    \n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''\n\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    if negatives:\n        largest_negative = max(negatives)\n    else:\n        largest_negative = None\n    \n    if positives:\n        smallest_positive = min(positives)\n    else:\n        smallest_positive = None\n    \n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        return b if float(b.replace(',', '.')) > float(a.replace(',', '.')) else a\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return b if b > a else a\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n % 2 != 0:\n        return False\n    elif n < 8:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(4):\n\n\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    count = 0\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                new_text += \"-\"\n        else:\n            count = 0\n            new_text += char\n    return new_text"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name.isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        if i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    numerator1, denominator1 = map(int, x.split('/'))\n    numerator2, denominator2 = map(int, n.split('/'))\n    \n    if numerator1 * numerator2 % (denominator1 * denominator2) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[-1] in ['1', '3', '5', '7', '9'] and str(num)[0] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(sorted(planets[index1+1:index2]))\n    else:\n        return tuple(sorted(planets[index2+1:index1], reverse=True))"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    If the input list is empty, return 0.\n    '''\n    return sum([x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int)])"}
{"task_id": "HumanEval/152", "completion": "def compare(scores, guesses):\n    result = []\n    for score, guess in zip(scores, guesses):\n        if score == guess:\n            result.append(0)\n        else:\n            result.append(abs(score - guess))\n    return result"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strength_dict = {}\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        strength_dict[extension] = strength\n\n    strongest_extension = min(strength_dict.items(), key=lambda x: x[1])[0]\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    # Final version of the code starts here\n    def is_rotation(a, b):\n        return len(a) == len(b) and b in a + a\n\n    return is_rotation(a, b) or any(is_rotation(a, b[i:] + b[:i]) for i in range(1, len(b)))\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for key, value in roman_dict.items():\n        while number >= key:\n            result += value\n            number -= key\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return a*a + b*b == c*c or b*b + c*c == a*a or a*a + c*c == b*b"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    unique_counts = []\n    for word in words:\n        unique_count = len(set(word))\n        unique_counts.append(unique_count)\n    max_unique_count = max(unique_counts)\n    max_unique_word = \"\"\n    for word, unique_count in zip(words, unique_counts):\n        if unique_count == max_unique_count and (word < max_unique_word or max_unique_word == \"\"):\n            max_unique_word = word\n    return max_unique_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = remaining - need\n    if remaining_carrots < 0:\n        remaining_carrots = 0\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(1, len(operand)):\n        expression += \" \" + operator[i-1] + \" \" + str(operand[i])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            result += char.swapcase()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text == \"\":\n        return None\n\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    for num in range(a, b+1):\n        for digit in str(num):\n            if int(digit) % 2 == 0 and int(digit) not in even_digits:\n                even_digits.append(int(digit))\n    return sorted(even_digits)"}