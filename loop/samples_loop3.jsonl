{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stack = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    groups.append(current_group)\n                    current_group = \"\"\n            else:\n                continue\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    modified_list = []\n    for i in range(len(numbers)):\n        modified_list.append(numbers[i])\n        if i != len(numbers) - 1:\n            modified_list.append(delimiter)\n    return modified_list"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(s):\n    stack = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in s:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            if not stack:\n                raise ValueError(\"Invalid input: Unmatched closing parenthesis\")\n            stack.pop()\n            current_depth -= 1\n\n    if stack:\n        raise ValueError(\"Invalid input: Unmatched opening parenthesis\")\n\n    return max_depth"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        max_num = max(numbers[:i+1])\n        rolling_max_list.append(max_num)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = []\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result.append('0')\n        elif a[i] == '0' and b[i] == '0':\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if n == 0:\n        return '0'\n    \n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(input_string):\n    distinct_characters = set(input_string)\n    return len(distinct_characters)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    legend = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    beats = []\n    for note in notes:\n        beats.append(legend[note])\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if len(substring) == 0:\n        return count\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_mapping = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_mapping[x])\n    \n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()  # Sort the numbers list in ascending order\n    closest_pair = (numbers[0], numbers[1])  # Initialize closest_pair with the first two elements\n    min_difference = abs(numbers[1] - numbers[0])  # Initialize min_difference with the difference between the first two elements\n\n    for i in range(1, len(numbers) - 1):\n        difference = abs(numbers[i+1] - numbers[i])  # Calculate the difference between the current element and the previous element\n\n        if difference < min_difference:\n            closest_pair = (numbers[i], numbers[i+1])  # Update closest_pair with the current pair of elements\n            min_difference = difference  # Update min_difference with the current difference\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    if n <= 1:\n        raise ValueError(\"Input must be a positive integer greater than 1\")\n    \n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n\nprint(largest_divisor(15))  # Output: 5\nprint(largest_divisor(10))  # Output: 5\nprint(largest_divisor(25))  # Output: 5\nprint(largest_divisor(7))   # Output: 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if is_prime(i):\n                while n % i == 0:\n                    factors.append(i)\n                    n //= i\n    \n    if n > 1:\n        factors.append(n)\n    \n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_elements = []\n    for num in numbers:\n        if num not in unique_elements:\n            unique_elements.append(num)\n    return unique_elements"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string):\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    if not isinstance(n, int) or n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    max_coeff = max(xs)\n    if max_coeff == 0:\n        raise ValueError(\"The largest non-zero coefficient must be guaranteed to have a solution.\")\n    \n    # Find the value of x such that poly(x) = 0\n    x = -max_coeff / xs[-2]\n    return x"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    # Create a new list to store the sorted values\n    sorted_list = []\n    \n    # Iterate over the indices of the input list\n    for i in range(len(l)):\n        # Check if the index is divisible by three\n        if i % 3 == 0:\n            # Sort the value at the index and append it to the sorted list\n            sorted_list.append(sorted(l[i]))\n        else:\n            # Append the value at the index to the sorted list\n            sorted_list.append(l[i])\n    \n    # Flatten the sorted list and return it\n    return [item for sublist in sorted_list for item in sublist]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    unique_list.sort()\n    return unique_list"}
{"task_id": "HumanEval/35", "completion": "from typing import List\n\ndef max_element(l: List):\n    if not l:\n        return None\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(lst):\n    even_indices = [lst[i] for i in range(len(lst)) if i % 2 == 0]\n    sorted_even = sorted(even_indices)\n    merged_lst = [sorted_even[i] if i % 2 == 0 else lst[i] for i in range(len(lst))]\n    return merged_lst"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(string):\n    if not string:\n        return \"\"\n    \n    encoded_string = \"\"\n    rotation = 1\n    for i in range(len(string)):\n        encoded_char = chr((ord(string[i]) - ord('a') + rotation) % 26 + ord('a'))\n        encoded_string += encoded_char\n        rotation += 1\n\n    return encoded_string"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n):\n    if not isinstance(n, int) or n < 1:\n        return None\n    \n    fib_nums = [0, 1]\n    while len(fib_nums) < n + 1:\n        fib_nums.append(fib_nums[-1] + fib_nums[-2])\n    \n    prime_fib_nums = [num for num in fib_nums if is_prime(num)]\n    return prime_fib_nums[n]\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(arr):\n    n = len(arr)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n    # Initialize variables\n    left_cars = [i for i in range(n)]\n    right_cars = [i for i in range(n)]\n    collisions = 0\n\n    # Check for collisions\n    for left_car in left_cars:\n        if left_car in right_cars:\n            collisions += 1\n    \n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [num + 1 for num in l]"}
{"task_id": "HumanEval/43", "completion": "import itertools\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Iterate through all possible pairs of elements in the list\n    for pair in itertools.combinations(l, 2):\n        # Check if the sum of the pair is equal to zero\n        if sum(pair) == 0:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(number, base):\n    # Check if the base is within the valid range\n    if base < 2 or base > 9:\n        return \"Error: The base should be between 2 and 9.\"\n\n    # Check if the input number is an integer\n    if not isinstance(number, int):\n        return \"Error: The input number should be an integer.\"\n\n    # Handle the case when the input number is 0\n    if number == 0:\n        return \"0\"\n\n    # Convert the number to the specified base\n    result = \"\"\n    is_negative = False\n\n    # Handle negative numbers\n    if number < 0:\n        number = abs(number)\n        is_negative = True\n\n    while number != 0:\n        digit = number % base\n        result = str(digit) + result\n        number = number // base\n\n    # Add the negative sign if necessary\n    if is_negative:\n        result = \"-\" + result\n\n    return result"}
{"task_id": "HumanEval/45", "completion": "import math\n\n\ndef triangle_area(a, h):\n    if not isinstance(a, (int, float)) or not isinstance(h, (int, float)):\n        raise ValueError(\"Both 'a' and 'h' should be numeric values.\")\n    \n    area = 0.5 * a * h\n    \n    return area"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    else:\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    if len(l) == 0:\n        return None\n    \n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    \n    if length % 2 == 1:\n        return sorted_list[length // 2]\n    else:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(s: str) -> bool:\n    if not isinstance(s, str):\n        return False\n    s = s.lower()\n    s = ''.join(e for e in s if e.isalnum())\n    return s == s[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "from typing import List\n\ndef same_chars(s0: str, s1: str) -> bool:\n    chars_s0 = []\n    chars_s1 = []\n    \n    for c in s0:\n        if c not in chars_s0:\n            chars_s0.append(c)\n    \n    for c in s1:\n        if c not in chars_s1:\n            chars_s1.append(c)\n    \n    chars_s0.sort()\n    chars_s1.sort()\n    \n    return chars_s0 == chars_s1\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    \n    a, b = 0, 1\n\n    for _ in range(n - 1):\n        a, b = b, a + b\n    \n    return a"}
{"task_id": "HumanEval/56", "completion": "import re\n\ndef correct_bracketing(brackets: str):\n    opening_brackets = re.findall('<', brackets)\n    closing_brackets = re.findall('>', brackets)\n\n    return len(opening_brackets) == len(closing_brackets)"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    sorted_list = sorted(l)\n    if l == sorted_list:\n        return True\n    reversed_list = sorted_list[::-1]\n    if l == reversed_list:\n        return True\n    return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer\"\n\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    \n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        \n        if count < 0:\n            return False\n    \n    return count == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    \"\"\"Calculate the derivative of a polynomial.\n\n    Args:\n        xs (list): Coefficients of the polynomial.\n\n    Returns:\n        list: Coefficients of the derivative polynomial.\n\n    Examples:\n        >>> derivative([3, 1, 2, 4, 5])\n        [1, 4, 12, 20]\n        >>> derivative([1, 2, 3])\n        [2, 6]\n    \"\"\"\n\n    derivative_xs = []\n    for power, coefficient in enumerate(xs[1:], start=1):\n        derivative_coefficient = power * coefficient\n        derivative_xs.append(derivative_coefficient)\n\n    return derivative_xs"}
{"task_id": "HumanEval/59", "completion": "import math\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find all prime factors of n\n    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n // i\n    if n > 2:\n        prime_factors.append(n)\n    \n    # Return the largest prime factor\n    return max(prime_factors)"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_n_minus_1 = 1\n        fibfib_n_minus_2 = 0\n        fibfib_n_minus_3 = 0\n        fibfib_n = 0\n        for i in range(3, n+1):\n            fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_2 + fibfib_n_minus_3\n            fibfib_n_minus_3 = fibfib_n_minus_2\n            fibfib_n_minus_2 = fibfib_n_minus_1\n            fibfib_n_minus_1 = fibfib_n\n        return fibfib_n"}
{"task_id": "HumanEval/64", "completion": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count -= 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift > num_digits:\n        return x_str[::-1]\n    \n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the string\n    apples, oranges = map(int, s.split(\" \")[0::2])\n    \n    # Calculate the number of mango fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Check if the array is empty\n    if not arr:\n        return []\n\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_even_index = -1\n\n    # Iterate through the array\n    for i, num in enumerate(arr):\n        # Check if the number is even and smaller than the current smallest even value\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n\n    # Check if a smallest even value was found\n    if smallest_even_index != -1:\n        return [smallest_even, smallest_even_index]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    if not lst:\n        return -1\n    \n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in lst:\n        if freq[num] >= num:\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    sorted_lst = []\n    lst.sort()\n    \n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    \n    return sorted_lst"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not isinstance(q, list) or not isinstance(w, int):\n        raise ValueError(\"Invalid input\")\n\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            changes += 1\n    return changes\n\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a >= 100:\n        return False\n    \n    primes = []\n    for num in range(2, a):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n            if len(primes) == 3:\n                break\n    \n    if len(primes) == 3 and a == primes[0] * primes[1] * primes[2]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif x < 1:\n        return False\n    else:\n        power = 1\n        while n ** power <= x:\n            if n ** power == x:\n                return True\n            power += 1\n        return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # Check if the input is a cube of some integer number\n    n = int(a ** (1/3))\n    return n ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(string):\n    if len(string) < 3:\n        return False\n    \n    for i in range(len(string) - 2):\n        if string[i] == string[i+1] or string[i] == string[i+2] or string[i+1] == string[i+2]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa >= 3.7:\n            result.append('A')\n        elif gpa >= 3.3:\n            result.append('A-')\n        elif gpa >= 3.0:\n            result.append('B+')\n        elif gpa >= 2.7:\n            result.append('B')\n        elif gpa >= 2.3:\n            result.append('B-')\n        elif gpa >= 2.0:\n            result.append('C+')\n        elif gpa >= 1.7:\n            result.append('C')\n        elif gpa >= 1.3:\n            result.append('C-')\n        elif gpa >= 1.0:\n            result.append('D+')\n        elif gpa >= 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string: str) -> bool:\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    if len(string) % 2 == 0:\n        return False\n    for i in range(3, int(len(string) ** 0.5) + 1, 2):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]  # Convert N to binary and remove the '0b' prefix\n    binary_sum = sum(int(digit) for digit in binary)  # Calculate the sum of digits in binary\n    return bin(binary_sum)[2:]  # Convert the sum to binary and remove the '0b' prefix\n"}
{"task_id": "HumanEval/85", "completion": "def sum_even_elements_odd_indices(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) <= 1:\n        return array\n    \n    first_index = array[0]\n    last_index = array[-1]\n    sum_first_last = first_index + last_index\n    \n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                encrypted_char = chr((ord(char) - 65 + 4) % 26 + 65)\n            else:\n                encrypted_char = chr((ord(char) - 97 + 4) % 26 + 97)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    \n    if len(unique_lst) < 2:\n        return None\n    \n    return unique_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "import math\n\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.upper()\n    encoded_message = \"\"\n    \n    for char in message:\n        if char in \"AEIOU\":\n            encoded_message += chr(ord(char) + 2)\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message\n."}
{"task_id": "HumanEval/94", "completion": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef skjkasdkd(lst):\n    max_prime = None\n\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n\n    if max_prime is not None:\n        digit_sum = sum(int(digit) for digit in str(max_prime))\n        return digit_sum\n    else:\n        return None\n  \n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:  # Empty dictionary\n        return False\n    \n    is_lowercase = False\n    is_uppercase = False\n    \n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                is_lowercase = True\n            elif key.isupper():\n                is_uppercase = True\n    \n    return is_lowercase != is_uppercase"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    if n <= 1:\n        return []\n    \n    primes = []\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    for i in range(2, n):\n        if is_prime[i]:\n            primes.append(i)\n    \n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return abs((abs(a) % 10) * (abs(b) % 10))"}
{"task_id": "HumanEval/98", "completion": "import re\n\ndef count_upper(s: str) -> int:\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    pattern = \"[AEIOU]\"\n    matches = re.findall(pattern, s.upper())\n    return len(matches)\n\nprint(count_upper('aBCdEf'))  # 1\nprint(count_upper('abcdefg'))  # 0\nprint(count_upper('dBBE'))  # 0\nprint(count_upper('AEIOU'))  # 3\nprint(count_upper('abcABCdefDEFghiGHIjklJKLmnoMNO'))  # 6\nprint(count_upper(''))  # 0\nprint(count_upper('bcdfgh'))  # 0\nprint(count_upper('bdfhjlnprtvxz'))  # 0\n\n# Error Conditions\nprint(count_upper(123))  # should raise TypeError\nprint(count_upper(\"a123B\"))  # should raise ValueError\nprint(count_upper(None))  # should raise TypeError"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Validate the input to ensure it is a valid number.\n    try:\n        num = float(value)\n    except ValueError:\n        # Return None if the input is not a valid number.\n        return None\n    \n    # Round the number away from zero if equidistant from two integers.\n    closest_int = round(num)\n    \n    if num % 1 == 0:\n        # If the number is already an integer, return it.\n        return int(closest_int)\n    elif num > 0:\n        # If the number is positive, return the closest integer greater than the number.\n        return int(closest_int + 0.5)\n    else:\n        # If the number is negative, return the closest integer less than the number.\n        return int(closest_int - 0.5)\n"}
{"task_id": "HumanEval/100", "completion": "ndef make_a_pile(n):\n    if not isinstance(n, int) or n <= 0:\n        return []\n    \n    stones = []\n    start_number = n if n % 2 == 1 else n + 1\n    for i in range(n):\n        stones.append(start_number + i * 2)\n    \n    return stones"}
{"task_id": "HumanEval/101", "completion": "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    words = []\n    substrings = s.split(\",\")\n    for substring in substrings:\n        words.extend(substring.strip().split())\n    return words\n\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x > y:\n        return -1\n    \n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    \n    return max_even\n"}
{"task_id": "HumanEval/103", "completion": "import math\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = sum(range(n, m+1))/(m-n+1)\n        rounded_average = round(average)\n        binary_representation = bin(rounded_average)\n        return binary_representation\n\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Step 1: Sort the integers between 1 and 9 (inclusive) in ascending order\n    sorted_array = sorted([x for x in arr if 1 <= x <= 9])\n    \n    # Step 2: Reverse the sorted array\n    reversed_array = sorted_array[::-1]\n    \n    # Step 3: Replace each digit with its corresponding name\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [digit_names[digit-1] for digit in reversed_array]\n\n    # Step 4: Return the modified array\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "import math\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n"}
{"task_id": "HumanEval/107", "completion": "from typing import Tuple\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    \n    for i in range(n):\n        idx = (min_idx + i) % n\n        if arr[idx] < arr[(idx + 1) % n]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if lst1 already contains only even numbers\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n\n    # Check if lst2 contains any even numbers\n    if any(num % 2 == 0 for num in lst2):\n        return \"YES\"\n\n    # Check if there are any odd numbers in lst1 that can be exchanged with even numbers in lst2\n    for num1 in lst1:\n        if num1 % 2 != 0:\n            for num2 in lst2:\n                if num2 % 2 == 0:\n                    return \"YES\"\n\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    letters = test.split()\n    letter_count = {}\n    \n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    max_count = max(letter_count.values())\n    max_letters = [letter for letter, count in letter_count.items() if count == max_count]\n    \n    return {letter: count for letter, count in letter_count.items() if letter in max_letters}\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Delete characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Return the result string and the boolean value indicating whether it is a palindrome\n    return result, is_palindrome\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, count, count))\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return None\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n\n    total_count = 0\n\n    for row in grid:\n        for well in row:\n            if well == 1:\n                total_count += math.ceil(well / capacity)\n\n    return total_count\n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                consonant_count += 1\n        \n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    closest_vowel = ''\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            closest_vowel = word[i]\n            break\n    \n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Concatenate the two strings\n    concatenated_string = lst[0] + lst[1]\n    \n    # Initialize a stack to keep track of open parentheses\n    stack = []\n    \n    # Iterate through each character in the concatenated string\n    for char in concatenated_string:\n        # If the character is an open parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a close parenthesis, check if there is a matching open parenthesis on the stack\n        elif char == ')':\n            # If there is a matching open parenthesis, pop it from the stack\n            if stack and stack[-1] == '(':\n                stack.pop()\n            # If there is no matching open parenthesis, return 'No'\n            else:\n                return 'No'\n    \n    # If there are any remaining open parentheses on the stack, return 'No'\n    if stack:\n        return 'No'\n    \n    # If all parentheses are balanced, return 'Yes'\n    return 'Yes'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k == 0:\n        return []\n    elif k >= len(arr):\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize sum variable\n    sum = 0\n\n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # Check if the element has at most two digits\n        if arr[i] >= 10 and arr[i] <= 99:\n            # Add the element to the sum\n            sum += arr[i]\n\n    # Return the sum\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    \n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "import datetime\n\ndef valid_date(date: str) -> bool:\n    # Parse the Date String\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    # Validate the Date\n    if not date:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    # Format Validation\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(input_string):\n    if not input_string:\n        return 0\n\n    lowercase_letters = [c for c in input_string if c.islower()]\n    odd_order_letters = [c for c in lowercase_letters if ord(c) % 2 != 0]\n\n    if not odd_order_letters:\n        return len(lowercase_letters)\n\n    return len(input_string.split())"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    prev_num = lst[0]\n    duplicate_count = 0\n    \n    for num in lst[1:]:\n        if num < prev_num:\n            return False\n        elif num == prev_num:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                return False\n        else:\n            duplicate_count = 0\n        \n        prev_num = num\n    \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Check if the intervals do not intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = min(end1, end2) - max(start1, start2) + 1\n    \n    # Check if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    magnitude_sum = 0\n    sign_product = 1\n    \n    for num in arr:\n        magnitude_sum += abs(num)\n        if num == 0:\n            sign_product = 0\n        elif num < 0:\n            sign_product *= -1\n    \n    return magnitude_sum * sign_product\n"}
{"task_id": "HumanEval/129", "completion": "from typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n        \n        visited[i][j] = True\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        \n        for dx, dy in directions:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < n and 0 <= nj < m and not visited[ni][nj]:\n                path.append(grid[ni][nj])\n                result = dfs(ni, nj, path, visited)\n                if result:\n                    return result\n                path.pop()\n        \n        visited[i][j] = False\n        return None\n    \n    for i in range(n):\n        for j in range(m):\n            visited = [[False] * m for _ in range(n)]\n            path = [grid[i][j]]\n            result = dfs(i, j, path, visited)\n            if result:\n                return result\n    \n    return None\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tribonacci = [3]  # Initialize the Tribonacci sequence with the first element\n\n    if n == 0:\n        return tribonacci[:1]  # Return only the first element if n is 0\n\n    if n == 1:\n        return tribonacci[:2]  # Return the first two elements if n is 1\n\n    tribonacci.append(1)  # Add the second element to the Tribonacci sequence\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)  # Calculate the even term of the Tribonacci sequence\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])  # Calculate the odd term of the Tribonacci sequence\n\n    return tribonacci\n\n"}
{"task_id": "HumanEval/131", "completion": "import math\n\ndef digits(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    n_str = str(n)\n    product = 1\n\n    for digit in n_str:\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n\n    if product == 1:\n        return 0\n    else:\n        return product\n\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0 or stack[-1] != '[':\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(numbers):\n    if not numbers:\n        return 0\n    \n    total = 0\n    for num in numbers:\n        if isinstance(num, (int, float)):\n            total += int(num) ** 2\n    \n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2].isspace()):\n        return True\n    return False\n\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n    \n    if not negative_integers or not positive_integers:\n        return (None, None)\n    \n    return (max(negative_integers), min(positive_integers))\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        return a if a > b else b\n\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n        return a if float(a) > b else b\n\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        return a if a > float(b) else b\n\n    return a if a > b else b\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    \n    for i in range(2, n//4 + 1):\n        for j in range(i, (n-i)//3 + 1):\n            for k in range(j, (n-i-j)//2 + 1):\n                l = n - i - j - k\n                if l % 2 == 0:\n                    return True\n    \n    return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n    if n == 0 or n == 1:\n        return 1\n    return n * special_factorial(n-1) * special_factorial(n-2)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive spaces with a hyphen\n    text = text.replace(\"  \", \"-\")\n    \n    return text\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) == 0:\n        return 'No'\n    \n    # Check for more than three digits\n    digit_count = sum(1 for char in file_name if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n    \n    # Check for exactly one dot\n    dot_count = sum(1 for char in file_name if char == '.')\n    if dot_count != 1:\n        return 'No'\n    \n    # Split the file name into two parts: before and after the dot\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    # Check the substring before the dot\n    before_dot = parts[0]\n    if len(before_dot) == 0 or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check the substring after the dot\n    after_dot = parts[1]\n    valid_extensions = ['txt', 'exe', 'dll']\n    if after_dot not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # Convert fractions to numerical form\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Multiply the fractions\n    product = x_num * n_num\n    \n    # Check if the product is a whole number\n    if product % (x_den * n_den) == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def get_digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    counter = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            counter += 1\n    return counter\n\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1: str, planet2: str) -> tuple:\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    sublist = planets[index1:index2+1]\n    sublist.sort(key=lambda x: planets.index(x))\n    \n    return tuple(sublist)\n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the remaining strings\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst\n"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n < 2:\n        return y\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    \n    return x\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(numbers):\n    if not numbers:\n        return 0\n\n    sum_of_squares = 0\n    for num in numbers:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n\n    return sum_of_squares * 2"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = \"\"\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if not a or not b:\n        return False\n\n    if len(a) < len(b):\n        return False\n\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to a string to iterate through each digit\n    num_str = str(abs(num))\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Return the counts as a tuple\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, symbol in roman_numerals.items():\n        while number >= value:\n            result += symbol\n            number -= value\n\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0] <= 0 or sides[2] >= sides[0] + sides[1]:\n        raise ValueError(\"Invalid side lengths\")\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2"}
{"task_id": "HumanEval/158", "completion": "from collections import Counter\n\ndef find_max(words):\n    max_unique_chars = 0\n    result_word = \"\"\n\n    for word in words:\n        unique_chars = len(Counter(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result_word):\n            max_unique_chars = unique_chars\n            result_word = word\n\n    return result_word\n"}
{"task_id": "HumanEval/159", "completion": "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots that exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    total_carrots_eaten = number + need\n    carrots_left = max(remaining - total_carrots_eaten, 0)\n\n    return [total_carrots_eaten, carrots_left]\n\n"}
{"task_id": "HumanEval/160", "completion": "from functools import reduce\n\ndef do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result\n\n\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    output = \"\"\n    \n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                output += c.upper()\n            else:\n                output += c.lower()\n        else:\n            output += c\n            \n    if not any(c.isalpha() for c in s):\n        output = s[::-1]\n    \n    return output"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef calculate_hash(input_string):\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if input_string == \"\":\n        return None\n    \n    hash_object = hashlib.md5(input_string.encode())\n    return hash_object.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = []\n    \n    # Swap a and b if a > b\n    if a > b:\n        a, b = b, a\n    \n    # Iterate through each number between a and b (inclusive)\n    for num in range(a, b+1):\n        # Check if any of the digits in the number are even\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    \n    # Remove duplicate digits and sort the list in ascending order\n    even_digits = list(set(even_digits))\n    even_digits.sort()\n    \n    return even_digits"}
