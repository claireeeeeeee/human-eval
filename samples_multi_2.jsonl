{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    sorted_numbers = sorted(numbers)\n\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    group = \"\"\n    counter = 0\n    \n    for char in paren_string:\n        if char == \"(\":\n            counter += 1\n            group += char\n        elif char == \")\":\n            counter -= 1\n            group += char\n        \n        if counter < 0:\n            raise ValueError(\"Unbalanced parentheses\")\n        \n        if counter == 0:\n            groups.append(group)\n            group = \"\"\n    \n    if counter != 0:\n        raise ValueError(\"Unbalanced parentheses\")\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    try:\n        number_str = str(number)\n        decimal_part = number_str.split('.')[1]\n        return float('0.' + decimal_part)\n    except IndexError:\n        return 0.0"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if len(numbers) == 0:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    mean = sum(numbers) / len(numbers)\n    absolute_diffs = [abs(num - mean) for num in numbers]\n    return sum(absolute_diffs) / len(absolute_diffs)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for number in numbers:\n        result.append(number)\n        if number != numbers[-1]:\n            result.append(delimiter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    max_level = 0\n    curr_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            curr_level += 1\n            max_level = max(max_level, curr_level)\n        elif char == ')':\n            curr_level -= 1\n            \n        if char == ' ':\n            levels.append(max_level)\n            max_level = 0\n            curr_level = 0\n    \n    levels.append(max_level)\n    \n    return levels"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef calculate_rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Calculates the rolling maximum elements found until the given moment in the sequence.\n\n    Args:\n        numbers (List[int]): The input list of integers.\n\n    Returns:\n        List[int]: The list of rolling maximum elements.\n    \"\"\"\n    rolling_max_list = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        rolling_max_list.append(max_num)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            prefix = string[:i][::-1]\n            return string + prefix\n\n    return \"\"\n"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Calculates the bitwise XOR of two binary strings.\n\n    Args:\n        a (str): The first binary string.\n        b (str): The second binary string.\n\n    Returns:\n        str: The XOR result as a binary string.\n    \"\"\"\n    # Input validation\n    if not all(bit in '01' for bit in a + b):\n        raise ValueError(\"Input strings must consist only of '0' and '1' characters\")\n\n    # Convert input strings to binary integers\n    bin_a = int(a, 2)\n    bin_b = int(b, 2)\n\n    # Perform binary XOR operation\n    xor_result = bin_a ^ bin_b\n\n    # Convert the XOR result back to a binary string\n    xor_str = bin(xor_result)[2:]  # Removing '0b' prefix\n\n    return xor_str"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not isinstance(strings, list) or not all(isinstance(s, str) and s is not None for s in strings):\n        raise TypeError(\"Invalid input: 'strings' should be a list of non-null strings\")\n\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n\n    for s in strings[1:]:\n        if len(s) > len(longest_string):\n            longest_string = s\n\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both a and b should be integers.\")\n    \n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both a and b should be positive integers.\")\n    \n    return math.gcd(a, b)\n"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "import string\n\ndef count_distinct_characters(string: str) -> int:\n    lower_string = string.lower()\n    distinct_chars = set(lower_string)\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[float]:\n    durations = []\n    notes = music_string.split(' ')\n    \n    for note in notes:\n        if note == 'o':\n            durations.append(1)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(0.5)\n        else:\n            raise ValueError(f\"Invalid note representation: {note}\")\n            \n    return durations"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if len(string) == 0 or len(substring) == 0:\n        return 0\n    \n    count = 0\n    window_size = len(substring)\n    \n    for i in range(len(string) - window_size + 1):\n        window = string[i:i + window_size]\n        if window == substring:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_mappings = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    number_list = numbers.split()\n    number_list = [x.lower() for x in number_list]  # Handle case sensitivity\n    number_list.sort(key=lambda x: number_mappings[x])\n    sorted_numbers = [number_mappings[x] for x in number_list]\n    sorted_numbers = [str(x) for x in sorted_numbers]\n    sorted_string = ' '.join(sorted_numbers)\n    return sorted_string"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = (numbers[0], numbers[1])\n    min_difference = abs(numbers[0] - numbers[1])\n\n    for i in range(1, len(numbers) - 1):\n        difference = abs(numbers[i] - numbers[i+1])\n        if difference < min_difference:\n            closest_pair = (numbers[i], numbers[i+1])\n            min_difference = difference\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of floats\")\n    \n    if len(numbers) == 0:\n        return []\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    if max_value == min_value:\n        return [0.0] * len(numbers)\n    \n    range_value = max_value - min_value\n    scaled_numbers = []\n    \n    for number in numbers:\n        scaled_number = (number - min_value) / range_value\n        scaled_numbers.append(scaled_number)\n    \n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(input_values: List[Any]) -> List[int]:\n    filtered_list = []\n    \n    for value in input_values:\n        if isinstance(value, int):\n            filtered_list.append(value)\n\n    return filtered_list"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "import math\n\ndef largest_divisor(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    if not isinstance(n, int) or n < 2:\n        raise ValueError(\"Invalid input. 'n' must be a positive integer greater than or equal to 2.\")\n    \n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen_numbers = set()\n    unique_numbers = []\n    for number in numbers:\n        if number not in seen_numbers:\n            unique_numbers.append(number)\n            seen_numbers.add(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    modified_string = ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    return modified_string"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate a list of strings into a single string.\n    \n    Args:\n        strings (List[str]): The list of strings to concatenate.\n        \n    Returns:\n        str: The concatenated string.\n        \n    Raises:\n        TypeError: If the `strings` argument is not a list.\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list of strings.\")\n    \n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n\n    def starts_with_prefix(string: str, prefix: str) -> bool:\n        return string.startswith(prefix)\n\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"Invalid input: strings must be a list of strings\")\n\n    if not isinstance(prefix, str) or len(prefix) == 0:\n        raise ValueError(\"Invalid input: prefix must be a non-empty string\")\n\n    filtered_strings = [string for string in strings if starts_with_prefix(string, prefix)]\n\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "def get_positive(numbers: list) -> list:\n    if len(numbers) == 0:\n        return []\n    positive_nums = []\n    for num in numbers:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(coefficients: list, point: float) -> float:\n    result = 0\n    for i, coeff in enumerate(coefficients):\n        result += coeff * math.pow(point, i)\n    return result\n\n\ndef find_zero(coefficients: list) -> float:\n    max_coeff = max(coefficients)\n    for point in range(-100, 101):\n        if poly(coefficients, point) == 0:\n            return point"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    chunk_size = 3\n    num_chunks = len(l) // chunk_size\n    sub_lists = []\n    \n    for i in range(num_chunks):\n        start_index = i * chunk_size\n        end_index = start_index + chunk_size\n        sub_list = sorted(l[start_index:end_index])\n        sub_lists.append(sub_list)\n    \n    remaining_elements = len(l) % chunk_size\n    if remaining_elements:\n        last_sub_list = l[num_chunks * chunk_size:]\n        sub_lists.append(last_sub_list)\n    \n    result = []\n    for sublist in sub_lists:\n        result.extend(sublist)\n    \n    return result"}
{"task_id": "HumanEval/34", "completion": "import typing\n\ndef unique(input_list: list) -> list:\n    unique_elements = []\n\n    for element in input_list:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    \n    sorted_unique_elements = sorted(unique_elements)\n    \n    return sorted_unique_elements"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    max_value = l[0]\n    for num in l:\n        if num > max_value:\n            max_value = num\n    \n    return max_value\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(input_list: list) -> list:\n    even_indices = []\n    odd_indices = []\n\n    for i, value in enumerate(input_list):\n        if i % 2 == 0:\n            even_indices.append(value)\n        else:\n            odd_indices.append(value)\n\n    even_indices.sort()\n\n    sorted_list = []\n    for i, value in enumerate(input_list):\n        if i % 2 == 0:\n            sorted_list.append(even_indices.pop(0))\n        else:\n            sorted_list.append(odd_indices.pop(0))\n\n    return sorted_list"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(s)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    fibonacci = [0, 1]  # Initialize list with first two Fibonacci numbers\n\n    while len(fibonacci) < n:  # Generate Fibonacci numbers until desired length is reached\n        next_number = fibonacci[-1] + fibonacci[-2]\n        fibonacci.append(next_number)\n\n    prime_fibonacci = []\n\n    for fib_num in fibonacci:  # Check if each Fibonacci number is prime\n        if fib_num > 1:\n            if fib_num == 2 or fib_num % 2 != 0:\n                for i in range(3, int(fib_num ** 0.5) + 1, 2):\n                    if (fib_num % i) == 0:\n                        break\n                else:\n                    prime_fibonacci.append(fib_num)\n\n    return prime_fibonacci[-1]  # Return the last prime Fibonacci number in the list\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    if not isinstance(l, list):\n        return False\n\n    if len(l) < 3:\n        return False\n\n    l.sort()\n\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n\n        left_index = i + 1\n        right_index = len(l) - 1\n\n        while left_index < right_index:\n            if l[i] + l[left_index] + l[right_index] == 0:\n                return True\n            elif l[i] + l[left_index] + l[right_index] < 0:\n                left_index += 1\n            else:\n                right_index -= 1\n\n    return False"}
{"task_id": "HumanEval/41", "completion": "from typing import List\n\ndef sort_car_positions(car_positions: List[int]) -> List[int]:\n    \"\"\"\n    Sorts the car positions in ascending order.\n    \"\"\"\n    car_positions.sort()\n    return car_positions\n\n\ndef calculate_car_collisions(left_to_right_positions: List[int], right_to_left_positions: List[int]) -> int:\n    \"\"\"\n    Calculates the number of car collisions based on the sorted positions.\n    \"\"\"\n    collisions = 0\n    for i in range(len(left_to_right_positions)):\n        if left_to_right_positions[i] > right_to_left_positions[i]:\n            collisions += 1\n    return collisions\n\n\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculates the number of car collisions in a car race with given n cars.\n    \"\"\"\n    left_to_right_positions = [1, 3, 5, 7]  # Example car positions\n    right_to_left_positions = [2, 4, 6, 8]  # Example car positions\n    \n    # Sort the positions for better comparison\n    left_to_right_positions = sort_car_positions(left_to_right_positions)\n    right_to_left_positions = sort_car_positions(right_to_left_positions)\n\n    # Calculate the collisions based on the sorted positions\n    collisions = calculate_car_collisions(left_to_right_positions, right_to_left_positions)\n\n    return collisions"}
{"task_id": "HumanEval/42", "completion": "def incr_list(lst: list) -> list:\n    \"\"\"\n    Increments each element of the input list by 1.\n\n    Args:\n        lst (list): The list of integers to be incremented.\n\n    Returns:\n        list: A new list with each element of the input list incremented by 1.\n    \"\"\"\n    return [x + 1 for x in lst]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(lst):\n    \"\"\"\n    Check if there are any pairs in the list whose sum is equal to zero.\n    \n    Args:\n    lst (list): List of numbers\n    \n    Returns:\n    bool: True if there are any such pairs, False otherwise\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(lst)):\n        \n        # Loop through the remaining elements after i\n        for j in range(i+1, len(lst)):\n            \n            # Check if the sum of the current pair is zero\n            if lst[i] + lst[j] == 0:\n                return True\n    \n    # No pairs sum to zero\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    # Validate input types\n    if not isinstance(x, int) or not isinstance(base, int):\n        raise ValueError(\"x and base must be integers\")\n\n    # Validate input values\n    if x < 0:\n        raise ValueError(\"x must be a positive integer\")\n    if base < 2 or base > 9:\n        raise ValueError(\"base must be an integer between 2 and 9 (inclusive)\")\n\n    # Convert remainder >= 10 to corresponding letter\n    def convert_to_letter(num):\n        return chr(ord('A') + num - 10)\n\n    remainders = []\n    while x > 0:\n        remainder = x % base\n        if remainder >= 10:\n            remainder = convert_to_letter(remainder)\n        remainders.append(str(remainder))\n        x //= base\n\n    if len(remainders) == 0:\n        return '0'\n\n    result = ''.join(remainders[::-1])\n    return result."}
{"task_id": "HumanEval/45", "completion": "import math\n\ndef triangle_area(a: float, h: float) -> float:\n    return (1/2) * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"\n    Calculates the nth term of the fib4 sequence.\n\n    Parameters:\n    n (int): The term number (n>=0) in the fib4 sequence to calculate.\n\n    Returns:\n    int: The nth term of the fib4 sequence.\n\n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \"\"\" \n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    fib_nums = [0, 0, 2, 0]\n\n    if n <= 3:\n        return fib_nums[n]\n\n    for i in range(4, n + 1):\n        fib_nums[i % 4] = fib_nums[0] + fib_nums[1] + fib_nums[2] + fib_nums[3]\n\n    return fib_nums[n % 4]"}
{"task_id": "HumanEval/47", "completion": "def sort_list(lst):\n    \"\"\"\n    Sorts a list of numbers in ascending order.\n\n    Args:\n    lst -- a list of numbers\n\n    Returns:\n    sorted_lst -- a sorted list of numbers\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    try:\n        sorted_lst = sorted(lst)\n        return sorted_lst\n    except TypeError:\n        raise TypeError(\"List elements must be numeric\")"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    normalized_text = \"\".join(text.lower().split())\n    return normalized_text == normalized_text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n\n    Returns:\n        int: The result of (2^n) % p.\n\n    Raises:\n        ValueError: If `p < 0` or `n < 0`.\n\n    Assumptions:\n        - `p >= 0` and `n >= 0`.\n\n    Limitations:\n        - The function assumes that `n` and `p` are within the valid range for int type.\n    \"\"\"\n    if p < 0 or n < 0:\n        raise ValueError(\"Invalid input: both n and p must be non-negative.\")\n    \n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Encodes the given string using a Caesar Cipher with a shift of 5.\n    \n    Args:\n        s (str): The input string to be encoded.\n        \n    Returns:\n        str: The encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Decodes the given string using a Caesar Cipher with a shift of 5.\n    \n    Args:\n        s (str): The input string to be decoded.\n        \n    Returns:\n        str: The decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "import re\n\ndef remove_vowels(string):\n    return re.sub('[aeiouAEIOU]', '', string)"}
{"task_id": "HumanEval/52", "completion": "from typing import List\n\ndef below_threshold(lst: List[int], threshold: int) -> bool:\n    if not isinstance(lst, list) or not all(isinstance(num, int) for num in lst):\n        raise ValueError(\"Invalid input. Expected list of integers.\")\n    \n    if not isinstance(threshold, int):\n        raise ValueError(\"Invalid input. Expected integer threshold.\")\n    \n    if not lst:\n        return True\n    \n    return all(num < threshold for num in lst)"}
{"task_id": "HumanEval/53", "completion": "def add(num1: int, num2: int) -> int:\n    try:\n        return num1 + num2\n    except TypeError:\n        raise ValueError(\"Input parameters must be integers\")\n\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"\n    Calculates the nth Fibonacci number using recursion and memoization.\n    \n    Args:\n        n (int): The index of the Fibonacci number to calculate.\n        \n    Returns:\n        int: The nth Fibonacci number.\n    \"\"\"\n    # Base cases\n    if n == 0 or n == 1:\n        return n\n    \n    # Create a memoization cache to store previously calculated Fibonacci numbers\n    cache = {}\n    \n    # Check if the Fibonacci number is already in the cache\n    if n in cache:\n        return cache[n]\n    \n    # Recursive case\n    # Calculate the Fibonacci number and store it in the cache\n    result = fib(n-1) + fib(n-2)\n    cache[n] = result\n    return result"}
{"task_id": "HumanEval/56", "completion": "import collections\n\ndef is_matching_brackets(bracket1: str, bracket2: str) -> bool:\n    mapping = {\n        '<': '>',\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n    return mapping.get(bracket1) == bracket2\n\ndef correct_bracketing(brackets: str) -> bool:\n    stack = collections.deque()\n\n    for bracket in brackets:\n        if bracket in ['<', '(', '{', '[']:\n            stack.append(bracket)\n        elif bracket in ['>', ')', '}', ']']:\n            if not stack or not is_matching_brackets(stack.pop(), bracket):\n                return False\n\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def is_monotonic(l: list) -> bool:\n    length = len(l)\n    \n    if length <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, length):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    common_elements = list(set(l1).intersection(set(l2)))\n    common_elements.sort()\n    return common_elements\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    if n < 2:\n        return None\n    \n    max_prime = None\n    for i in range(2, n + 1):\n        if n % i == 0:\n            is_prime = True\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                max_prime = i\n            n = n // i\n    \n    return max_prime\n"}
{"task_id": "HumanEval/60", "completion": "import math\n\ndef sum_to_n(n: int) -> int:\n    total = 0\n    for num in range(1, n+1):\n        total += num\n\n    return total"}
{"task_id": "HumanEval/61", "completion": "def check_bracketing(bracket_string: str) -> bool:\n    stack = []\n\n    for bracket in bracket_string:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(coefficients):\n    if not coefficients:\n        raise ValueError(\"Input list cannot be empty\")\n\n    result = []\n    for i, coef in enumerate(coefficients[1:], start=1):\n        if not isinstance(coef, int):\n            raise ValueError(\"Coefficients must be integers\")\n\n        derivative_coef = i * coef\n        result.append(derivative_coef)\n\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    fibfib_1 = 1\n    fibfib_2 = 1\n    fibfib_3 = 0\n\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        for _ in range(3, n + 1):\n            fibfib_n = fibfib_1 + fibfib_2 + fibfib_3\n            fibfib_3 = fibfib_2\n            fibfib_2 = fibfib_1\n            fibfib_1 = fibfib_n\n\n    return fibfib_n\n\n"}
{"task_id": "HumanEval/64", "completion": "VOWELS = ['a', 'e', 'i', 'o', 'u']\n\ndef vowels_count(s: str) -> int:\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n\n    if len(s) == 0:\n        return 0\n\n    vowels_count = 0\n    for c in s:\n        if c in VOWELS or (c == 'y' and c == s[-1]):\n            vowels_count += 1\n    \n    return vowels_count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(number, shift_value):\n    if not isinstance(number, int):\n        raise TypeError(\"Invalid input: number should be an integer.\")\n\n    if not isinstance(shift_value, int) or shift_value <= 0:\n        raise ValueError(\"Invalid input: shift_value should be a positive integer.\")\n\n    number_str = str(number)\n    num_digits = len(number_str)\n\n    if shift_value > num_digits:\n        return number_str[::-1]\n\n    shifted_digits = number_str[-shift_value:]\n    remaining_digits = number_str[:-shift_value]\n\n    return shifted_digits + remaining_digits\n"}
{"task_id": "HumanEval/66", "completion": "def calculate_uppercase_sum(string: str) -> int:\n    if string is None:\n        raise ValueError(\"Input string cannot be None\")\n    if string == \"\":\n        raise ValueError(\"Input string cannot be empty\")\n    \n    uppercase_sum = 0\n    for char in string:\n        if char.isupper():\n            uppercase_sum += ord(char)\n    return uppercase_sum"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(fruit_str: str, total_fruits: int) -> int:\n    fruits = [int(num) for num in fruit_str.split() if num.isdigit()]\n    if len(fruits) != 2:\n        raise ValueError(\"Invalid input string format. Expected format: '<apples> <oranges>'\")\n    if any(fruit < 0 for fruit in fruits) or total_fruits < 0:\n        raise ValueError(\"Number of fruits cannot be negative\")\n    mango_fruits = total_fruits - sum(fruits)\n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if len(arr) == 0:\n        return []\n\n    smallest_even_value = float('inf')\n    smallest_even_index = float('inf')\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if num < smallest_even_value:\n                smallest_even_value = num\n                smallest_even_index = i\n            elif num == smallest_even_value:\n                smallest_even_index = min(smallest_even_index, i)\n\n    if smallest_even_value == float('inf'):\n        return []\n    else:\n        return [smallest_even_value, smallest_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    if not isinstance(lst, list):   # Check if input list is valid\n        raise ValueError(\"Input must be a list\")\n    \n    if not all(isinstance(num, int) for num in lst):   # Check if all elements in the list are integers\n        raise ValueError(\"All elements in the list must be integers\")\n\n    counter = Counter(lst)   # Generate frequency count\n\n    max_freq = 0\n    max_freq_num = -1\n\n    for num, freq in counter.items():   # Check if number has a higher frequency and value than the previous max\n        if freq >= num and freq > max_freq and num > max_freq_num:\n            max_freq = freq\n            max_freq_num = num\n\n    return max_freq_num\n\n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not isinstance(lst, list) or not all(isinstance(x, int) for x in lst):\n        raise TypeError(\"Input parameter 'lst' should be a list of integers\")\n\n    sorted_lst = sorted(lst)\n\n    result = []\n    min_idx = 0\n    max_idx = len(sorted_lst) - 1\n    \n    while min_idx <= max_idx:\n        result.append(sorted_lst[min_idx])\n        min_idx += 1\n        \n        if min_idx > max_idx:\n            break\n        \n        result.append(sorted_lst[max_idx])\n        max_idx -= 1\n        \n    return result\n"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(side_a, side_b, side_c):\n    if side_a <= 0 or side_b <= 0 or side_c <= 0:\n        raise ValueError(\"Side lengths should be greater than zero.\")\n\n    if side_a + side_b > side_c and side_a + side_c > side_b and side_b + side_c > side_a:\n        s = (side_a + side_b + side_c) / 2\n        area = math.sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))\n        return round(area, 2)\n    else:\n        return None"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(objects, max_weight):\n    if objects == objects[::-1]:\n        sum_of_weights = sum(objects)\n        return sum_of_weights <= max_weight\n    return False"}
{"task_id": "HumanEval/73", "completion": "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    start = 0\n    end = len(arr) - 1\n    changes = 0\n\n    if len(arr) < 2:\n        return changes\n\n    while start < end:\n        if arr[start] != arr[end]:\n            changes += 1\n            min_change = min(arr[start], arr[end])\n            arr[start] = min_change\n            arr[end] = min_change\n\n        start += 1\n        end -= 1\n\n    return changes\n\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(input_list1, input_list2):\n    if not input_list1 or not input_list2:\n        return \"Input lists cannot be empty\"\n\n    total_chars_list1 = sum(len(word) for word in input_list1)\n    total_chars_list2 = sum(len(word) for word in input_list2)\n\n    if total_chars_list1 < total_chars_list2:\n        return input_list1\n    elif total_chars_list2 < total_chars_list1:\n        return input_list2\n    else:\n        return input_list1\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a: int) -> bool:\n    if a >= 100:\n        return False\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/76", "completion": "from math import log, isclose\n\ndef calculate_power(x: int, n: int) -> float:\n    if not isinstance(x, int) or not isinstance(n, int):\n        raise TypeError(\"x and n must be integers\")\n    if n == 0:\n        raise ValueError(\"n cannot be zero\")\n    return log(x, n)\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x == n:\n        return True\n    power = calculate_power(x, n)\n    return isclose(power, round(power))"}
{"task_id": "HumanEval/77", "completion": "def is_cube(number: int) -> bool:\n    if number == 0:\n        return True\n    elif number < 0:\n        return is_cube(-number)\n    else:\n        cube_root = round(number ** (1/3))\n        return cube_root ** 3 == number"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num: str) -> int:\n    PRIME_DIGITS = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n\n    for digit in num.upper():\n        if digit in PRIME_DIGITS:\n            count += 1\n\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal: float) -> str:\n    if not isinstance(decimal, float) or decimal < 0 or decimal % 1 == 0:\n        raise ValueError(\"Input must be a non-negative decimal number\")\n\n    binary = bin(int(decimal))[2:]\n\n    binary = 'db' + binary + 'db'\n\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(input_string: str) -> bool:\n    if len(input_string) == 0:\n        return False\n    \n    for i in range(len(input_string) - 2):\n        if input_string[i] == input_string[i+1] or input_string[i] == input_string[i+2]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/81", "completion": "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    if not grades:\n        return []\n\n    converted_grades = []\n    for grade in grades:\n        if not isinstance(grade, float):\n            raise ValueError(\"Invalid grade: grades list should only contain float values\")\n        \n        if grade >= 4.0:\n            converted_grades.append(\"A+\")\n        elif grade >= 3.7:\n            converted_grades.append(\"A\")\n        elif grade >= 3.3:\n            converted_grades.append(\"A-\")\n        elif grade >= 3.0:\n            converted_grades.append(\"B+\")\n        elif grade >= 2.7:\n            converted_grades.append(\"B\")\n        elif grade >= 2.3:\n            converted_grades.append(\"B-\")\n        elif grade >= 2.0:\n            converted_grades.append(\"C+\")\n        elif grade >= 1.7:\n            converted_grades.append(\"C\")\n        elif grade >= 1.3:\n            converted_grades.append(\"C-\")\n        elif grade >= 1.0:\n            converted_grades.append(\"D+\")\n        elif grade >= 0.7:\n            converted_grades.append(\"D\")\n        else:\n            converted_grades.append(\"E\")\n    return converted_grades\n"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n\n    if n == 2:\n        return True\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\n\ndef prime_length(string: str) -> bool:\n    string_length = len(string)\n\n    if not string_length:\n        return False\n\n    return is_prime(string_length)"}
{"task_id": "HumanEval/83", "completion": "from typing import List\n\ndef starts_one_ends(n: int) -> int:\n    count = 0\n    \n    for num in range(10**(n-1), 10**n):\n        if str(num)[0] == '1' or str(num)[-1] == '1':\n            count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]\n    return str(binary.count('1'))\n"}
{"task_id": "HumanEval/85", "completion": "from typing import List\n\n\ndef is_even(number: int) -> bool:\n    return number % 2 == 0\n\n\ndef even_elements_sum(lst: List[int]) -> int:\n    even_sum = 0\n    for i in range(1, len(lst), 2):\n        if is_even(lst[i]):\n            even_sum += lst[i]\n    return even_sum\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s: str) -> str:\n    if s is None:\n        return \"\"\n\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        if len(word) <= 1:\n            ordered_words.append(word)\n        else:\n            ordered_word = \"\".join(sorted(word))\n            ordered_words.append(ordered_word)\n\n    return \" \".join(ordered_words)\n\n\nThis code takes a string `s` and returns an ordered version of it. The ordered version of the string is created by sorting the characters in each word in ascending order based on their ASCII values. The order of words and blank spaces in the original string is maintained in the output."}
{"task_id": "HumanEval/87", "completion": "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    occurrences = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                occurrences.append((i, j))\n    \n    occurrences.sort(key=lambda pair: (-pair[1], pair[0]))\n    \n    return occurrences\n"}
{"task_id": "HumanEval/88", "completion": "from typing import List\nimport copy\n\ndef sort_array(array: List[int]) -> List[int]:\n    array_copy = copy.copy(array)\n    sum_first_last = array_copy[0] + array_copy[-1]\n    \n    if sum_first_last % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n        array_copy.sort()\n    \n    return array_copy\n"}
{"task_id": "HumanEval/89", "completion": "import string\n\ndef encrypt(s: str) -> str:\n    encrypted = \"\"\n\n    for character in s:\n        if character.islower():\n            index = (string.ascii_lowercase.index(character) + 4) % 26\n            encrypted += string.ascii_lowercase[index]\n\n        elif character.isupper():\n            character_lower = character.lower()\n            index = (string.ascii_lowercase.index(character_lower) + 4) % 26\n            encrypted += string.ascii_uppercase[index]\n\n        else:\n            encrypted += character\n\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "from typing import List, Union\n\ndef find_second_smallest(lst: List[int]) -> Union[int, None]:\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    if len(lst) < 2:\n        return None\n    \n    sorted_lst = sorted(lst)\n    \n    return sorted_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(s: str) -> int:\n    if s is None:\n        return 0\n\n    sentences = re.split(r'[.?!]', s)\n\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0].lower() == \"i\":\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    \n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/93", "completion": "import string\n\ndef encode(message: str) -> str:\n    if not isinstance(message, str):\n        raise TypeError(\"Input message must be of type str\")\n\n    message = message.lower()\n    encoded_message = \"\"\n\n    for char in message:\n        if char.isalpha():\n            if char in 'aeiou':\n                updated_char = string.ascii_lowercase[(string.ascii_lowercase.index(char) + 2) % len(string.ascii_lowercase)]\n            else:\n                updated_char = char.swapcase()\n            encoded_message += updated_char\n        else:\n            encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "from typing import List\n\ndef find_largest_prime(lst: List[int]) -> int:\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    \n    digit_sum = sum(int(digit) for digit in str(largest_prime))\n    \n    return digit_sum\n"}
{"task_id": "HumanEval/95", "completion": "from collections import defaultdict\n\ndef check_dict_case(dictionary: dict) -> bool:\n    lowercase_dict: defaultdict[int] = defaultdict(int)\n    uppercase_dict: defaultdict[int] = defaultdict(int)\n\n    for key, _ in dictionary.items():\n        if isinstance(key, str):\n            if key.islower():\n                lowercase_dict[key] += 1\n            elif key.isupper():\n                uppercase_dict[key] += 1\n\n    return not (lowercase_dict and uppercase_dict)"}
{"task_id": "HumanEval/96", "completion": "Here is the final version of the code:\n\ndef count_up_to(n):\n    primes = []\n    \n    for i in range(2, n):\n        is_prime = True\n        \n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            primes.append(i)\n    \n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    \"\"\"\n    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s: str) -> int:\n    count = 0\n    if isinstance(s, str):\n        for i, char in enumerate(s):\n            if is_vowel(char) and is_even_index(i):\n                count += 1\n    return count\n\n\ndef is_vowel(char: str) -> bool:\n    vowels = ['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u']\n    return char in vowels\n\n\ndef is_even_index(index: int) -> bool:\n    return index % 2 == 0\n"}
{"task_id": "HumanEval/99", "completion": "import math\n\ndef closest_integer(value: str) -> int:\n    float_value = float(value)\n    diff_floor = abs(float_value - math.floor(float_value))\n    diff_ceil = abs(float_value - math.ceil(float_value))\n    \n    if diff_floor == diff_ceil:\n        return round(float_value)\n    elif diff_floor > diff_ceil:\n        return math.ceil(float_value)\n    else:\n        return math.floor(float_value)"}
{"task_id": "HumanEval/100", "completion": "def create_stone_pile(num_levels):\n    if not isinstance(num_levels, int) or num_levels <= 0:\n        raise ValueError(\"Invalid input: num_levels should be a positive integer\")\n\n    stone_pile = [num_levels]\n    even_increment = 2\n    odd_decrement = 1\n\n    for level in range(1, num_levels):\n        if num_levels % 2 == 0:\n            stone_pile.append(num_levels + level * even_increment)\n        else:\n            stone_pile.append(num_levels + level * even_increment - odd_decrement)\n\n    return stone_pile"}
{"task_id": "HumanEval/101", "completion": "from typing import List\n\ndef words_string(s: str) -> List[str]:\n    \"\"\"\n    Splits the input string using commas and spaces as delimiters.\n    Removes leading and trailing spaces from each word.\n    Returns the individual words as a list.\n    \"\"\"\n    words = []\n\n    if not s:\n        return words\n\n    delimiters = [',', ' ']\n\n    for word in s.split(delimiters[0]):\n        words.extend(map(str.strip, word.split(delimiters[1])))\n\n    return words\n\n"}
{"task_id": "HumanEval/102", "completion": "def find_maximum_even(start: int, end: int) -> int:\n    if start > end:\n        return -1\n\n    max_even = -1\n\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            if num > max_even:\n                max_even = num\n\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n: int, m: int) -> str:\n    # Check if n is greater than m\n    if n > m:\n        return \"-1\"\n    \n    # Compute the sum of the integers from n through m\n    sum_of_integers = (m - n + 1) * (n + m) // 2\n    \n    # Compute the average and round it to the nearest integer\n    average = round(sum_of_integers / (m - n + 1))\n    \n    # Convert the rounded average to binary\n    binary_representation = bin(average)\n    \n    # Return the binary representation\n    return binary_representation"}
{"task_id": "HumanEval/104", "completion": "from typing import List\n\n\ndef unique_digits(x: List[int]) -> List[int]:\n    unique_nums = []\n\n    for num in x:\n        str_num = str(num)\n        has_even_digit = any(int(digit) % 2 == 0 for digit in str_num)\n        if not has_even_digit:\n            unique_nums.append(num)\n\n    unique_nums.sort()\n\n    return unique_nums\n"}
{"task_id": "HumanEval/105", "completion": "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n    if not arr:\n        return []\n    \n    valid_nums = [num for num in arr if 1 <= num <= 9]\n    \n    sorted_nums = sorted(valid_nums)\n    \n    reversed_nums = sorted_nums[::-1]\n    \n    num_dict = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    result = [num_dict[num] for num in reversed_nums]\n    \n    return result"}
{"task_id": "HumanEval/106", "completion": "import math\nfrom typing import List\n\n\ndef calculate_factorial(n: int) -> int:\n    return math.factorial(n)\n\n\ndef calculate_sum(n: int) -> int:\n    return sum(range(1, n+1))\n\n\ndef f(n: int) -> List[int]:\n    if n < 0:\n        raise ValueError(\"Input cannot be negative.\")\n\n    result = []\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(calculate_factorial(i))\n        else:\n            result.append(calculate_sum(i))\n\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "from typing import Tuple\n\ndef even_odd_palindrome(upper_limit: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n\n    # Count even and odd palindromes\n    for num in range(1, upper_limit + 1):\n        if str(num) == str(num)[::-1]:  # check if number is a palindrome\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "from typing import List\n\ndef sum_digits(num: int) -> int:\n    return sum(int(digit) for digit in str(abs(num)))\n\ndef count_nums(arr: List[int]) -> int:\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "from typing import List\n\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if not isinstance(arr, list) or not all(isinstance(num, int) for num in arr):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    if not arr:\n        return True\n    \n    n = len(arr)\n    sorted_arr = sorted(arr)\n    \n    for i in range(n):\n        last_index = (i + arr[i]) % n\n        if last_index < i:\n            return False\n        \n        arr[i], arr[last_index] = arr[last_index], arr[i]\n        \n        if arr == sorted_arr:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/110", "completion": "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    if not isinstance(lst1, list) or not isinstance(lst2, list):\n        raise TypeError(\"Both inputs should be lists\")\n  \n    for num in lst1 + lst2:\n        if not isinstance(num, int):\n            raise TypeError(\"Both lists should contain only integers\")\n\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n\n    if odd_count <= even_count:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test: str) -> dict:\n\n    if not isinstance(test, str):\n        raise ValueError(\"Input must be a string\")\n\n    if test == \"\":\n        raise ValueError(\"Input string cannot be empty\")\n\n    letter_counts = {}\n    for char in test:\n        if not char.isalnum():\n            continue\n\n        char = char.lower()\n        if char in letter_counts:\n            letter_counts[char] += 1\n        else:\n            letter_counts[char] = 1\n\n    max_count = max(letter_counts.values())\n\n    result = {}\n    for letter, count in letter_counts.items():\n        if count == max_count:\n            result[letter] = count\n\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(input_string: str, characters_to_delete: str) -> tuple[str, bool]:\n    result_list = []\n    is_string_palindrome = False\n\n    for char in input_string:\n        if char not in characters_to_delete:\n            result_list.append(char)\n    \n    result = \"\".join(result_list)\n\n    if result == result[::-1]:\n        is_string_palindrome = True\n    \n    return result, is_string_palindrome"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    output = []\n    for s in lst:\n        if s.isdigit():\n            odd_digit_count = sum(int(digit) % 2 != 0 for digit in s)\n            updated_description = \"the number of odd elements in the string {} of the input.\".format(odd_digit_count)\n            output.append(updated_description)\n        else:\n            raise ValueError(\"Invalid input: input strings should only contain digits.\")\n    return output\n"}
{"task_id": "HumanEval/114", "completion": "def min_subarray_sum(nums):\n    min_sum = float('inf')\n\n    for i in range(len(nums)):\n        current_sum = 0\n\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n\n            if current_sum < min_sum:\n                min_sum = current_sum\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    lower_count = 0\n    \n    for row in grid:\n        for cell in row:\n            if cell == 1:\n                lower_count += (cell // capacity) + 1 if cell % capacity != 0 else cell // capacity\n    \n    return lower_count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(input_array: List[int]) -> List[int]:\n    def sort_key_func(num: int) -> Tuple[int, int]:\n        binary_representation = bin(num)\n        ones_count = bin(count_ones(num))\n        return (ones_count, num)\n\n    def count_ones(num: int) -> int:\n        count = 0\n        while num:\n            count += num & 1\n            num >>= 1\n        return count\n    \n    result = sorted(input_array, key=sort_key_func)\n    return result\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for ch in word:\n            if ch.lower() not in 'aeiou':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word: str) -> str:\n    index_vowel = -1\n\n    for i in range(len(word)):\n        letter = word[i]\n\n        if letter in ['a', 'e', 'i', 'o', 'u']:\n            if (i == 0 or not word[i-1].isalpha() or word[i-1] in ['a', 'e', 'i', 'o', 'u']) and (i == len(word)-1 or not word[i+1].isalpha() or word[i+1] in ['a', 'e', 'i', 'o', 'u']):\n                index_vowel = i\n                break\n\n    if index_vowel == -1:\n        return \"\"\n    else:\n        return word[index_vowel]"}
{"task_id": "HumanEval/119", "completion": "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    stack = []\n    for string in lst:\n        for char in string:\n            if char == \"(\":\n                stack.append(char)\n            elif char == \")\":\n                if not stack:\n                    return \"No\"\n                stack.pop()\n    if not stack:\n        return \"Yes\"\n    else:\n        return \"No\""}
{"task_id": "HumanEval/120", "completion": "from typing import List\nimport heapq\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return heapq.nlargest(k, arr)\n\n"}
{"task_id": "HumanEval/121", "completion": "from typing import List\n\ndef calculate_sum_of_odd_elements_in_even_positions(lst: List[int]) -> int:\n    \"\"\"\n    Calculates the sum of all odd elements in even positions of a given list.\n    :param lst: A list of integers.\n    :return: The total sum of all odd elements in even positions.\n    \"\"\"\n    total_sum = 0\n    \n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total_sum += lst[i]\n    \n    return total_sum\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_elements = 0\n    for element in arr[:k]:\n        if abs(element) < 100:\n            sum_elements += element\n    return sum_elements"}
{"task_id": "HumanEval/123", "completion": "from typing import List\n\ndef get_odd_collatz(n: int) -> List[int]:\n    odd_numbers = {n}\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.add(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.add(1)\n    return sorted(list(odd_numbers))"}
{"task_id": "HumanEval/124", "completion": "def is_valid_date(date):\n    # Function to check if the date is valid\n    def is_date_valid(day, month, year):\n        # Check if the year is valid (between 1 and 9999)\n        if not (1 <= year <= 9999):\n            return False\n\n        # Check if the month is valid (between 1 and 12)\n        if not (1 <= month <= 12):\n            return False\n\n        # Check the number of days based on the month\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if not (1 <= day <= 31):\n                return False\n        elif month in [4, 6, 9, 11]:\n            if not (1 <= day <= 30):\n                return False\n        elif month == 2:\n            if not (1 <= day <= 29):\n                return False\n        else:\n            return False\n\n        return True\n\n    # Check if the date is empty\n    if not date:\n        return False\n\n    # Split the date string into day, month, and year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # Return the result of the date validation\n    return is_date_valid(day, month, year)"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return [count]"}
{"task_id": "HumanEval/126", "completion": "from typing import List\nfrom collections import Counter\n\ndef is_sorted(lst: List[int]) -> bool:\n    if len(lst) == 0:\n        return True\n\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    element_counts = Counter(lst)\n    if any(count > 1 for element, count in element_counts.items()):\n        return False\n\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "import math\n\ndef intersection(interval1, interval2):\n    def get_intersection(interval1, interval2):\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        return start, end\n    \n    intersection_interval = get_intersection(interval1, interval2)\n    length = intersection_interval[1] - intersection_interval[0] + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/128", "completion": "import math\nfrom typing import List, Optional\n\ndef calculate_result(arr: List[int]) -> Optional[int]:\n    if len(arr) == 0:\n        return None\n\n    sum_of_magnitudes = 0\n    sign_product = 1\n\n    for num in arr:\n        magnitude = math.fabs(num)\n        sign_product *= math.copysign(1, num)\n        sum_of_magnitudes += magnitude * sign_product\n\n    result = sum_of_magnitudes * sign_product\n    return result"}
{"task_id": "HumanEval/129", "completion": "from typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    def get_neighbors(grid: List[List[int]], row: int, col: int) -> List[tuple]:\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        neighbors = []\n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if is_valid_move(grid, row, col, new_row, new_col):\n                neighbors.append((new_row, new_col))\n        return neighbors\n\n    def is_valid_move(grid: List[List[int]], curr_row: int, curr_col: int, dest_row: int, dest_col: int) -> bool:\n        num_rows, num_cols = len(grid), len(grid[0])\n        return 0 <= dest_row < num_rows and 0 <= dest_col < num_cols\n\n    def dfs(grid: List[List[int]], row: int, col: int, path: List[int], visited: set, min_path: List[int]):\n        if len(path) == k:\n            if not min_path or path < min_path:\n                min_path[:] = path\n            return\n        visited.add((row, col))\n        neighbors = get_neighbors(grid, row, col)\n        for neighbor in neighbors:\n            if neighbor not in visited:\n                dfs(grid, neighbor[0], neighbor[1], path + [grid[neighbor[0]][neighbor[1]]], visited, min_path)\n        visited.remove((row, col))\n\n    if not grid or not grid[0]:\n        return []\n    \n    num_rows, num_cols = len(grid), len(grid[0])\n    \n    if num_rows < 2 or num_cols < 2 or k <= 0:\n        return []\n    \n    min_path = []\n    \n    for row in range(num_rows):\n        for col in range(num_cols):\n            dfs(grid, row, col, [grid[row][col]], set(), min_path)\n    \n    return min_path\n"}
{"task_id": "HumanEval/130", "completion": "from typing import List\n\ndef calculate_tribonacci_sequence(n: int) -> List[int]:\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    else:\n        tribonacci_sequence = [3, 1]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tribonacci_sequence.append(1 + i // 2)\n            else:\n                tribonacci_sequence.append(sum(tribonacci_sequence[-3:]))\n        return tribonacci_sequence"}
{"task_id": "HumanEval/131", "completion": "def calculate_product_of_odd_digits(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Invalid input. Please provide a non-negative integer.\")\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0 or stack[-1] != '[':\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "import math\nfrom typing import List\n\ndef sum_squares(lst: List[float]) -> int:\n    total = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        total += squared_num\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_letter(text: str) -> bool:\n    if not text:\n        return False\n\n    words = text.strip().split()\n    if words:\n        last_word = words[-1]\n        if last_word.isalpha() and last_word[-1].isalpha():\n            return True\n\n    return False"}
{"task_id": "HumanEval/135", "completion": "def find_turning_point_index(input_array):\n    largest_index = 0\n    for i in range(1, len(input_array)):\n        if input_array[i] <= input_array[i-1]:\n            largest_index = i\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    largest_negative = None\n    smallest_positive = None\n\n    if not lst:\n        return None, None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return largest_negative, smallest_positive\n"}
{"task_id": "HumanEval/137", "completion": "def compare_numbers(a, b):\n    \"\"\"\n    Compares two numbers and returns the larger one.\n    :param a: The first number.\n    :param b: The second number.\n    :return: The larger number or None if they are equal.\n    \"\"\"\n    # Convert string representations to float if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the numbers and return the larger one\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    sum_even = 0\n\n    for i in range(2, n + 1, 2):\n        sum_even += i\n\n    if sum_even == n:\n        return True\n\n    return False"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if not isinstance(n, int) or n <= 0:\n        return \"Input should be a positive integer\"\n\n    factorials = [1] * (n+1)\n\n    for i in range(2, n+1):\n        factorials[i] = factorials[i-1] * i\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorials[i]\n\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text: str) -> str:\n    \"\"\"\n    Replaces spaces with underscores and replaces consecutive spaces with a hyphen when there are more than two consecutive spaces.\n    \"\"\"\n    text = re.sub(r'\\s', '_', text)\n    text = re.sub(r' {3,}', '-', text)\n    \n    return text"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name: str) -> bool:\n    if file_name is None or not file_name:\n        return False\n    return bool(re.match(r'^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$', file_name))"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    MODIFIER_1 = 3\n    MODIFIER_2 = 4\n\n    modified_lst = []\n    for i, num in enumerate(lst):\n        if i % MODIFIER_1 == 0:\n            modified_lst.append(num ** 2)\n        elif i % MODIFIER_2 == 0:\n            modified_lst.append(num ** 3)\n        else:\n            modified_lst.append(num)\n    return sum(modified_lst)"}
{"task_id": "HumanEval/143", "completion": "import math\n\n\ndef get_prime_length_words(sentence: str) -> str:\n    if not sentence:\n        return \"\"\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    return \" \".join(prime_length_words)\n\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(fraction_x: str, fraction_n: str) -> bool:\n    try:\n        numerator_x, denominator_x = map(int, fraction_x.split('/'))\n        numerator_n, denominator_n = map(int, fraction_n.split('/'))\n        fraction_x = Fraction(numerator_x, denominator_x)\n        fraction_n = Fraction(numerator_n, denominator_n)\n        result = fraction_x * fraction_n\n        if result.denominator == 1:\n            return True\n        else:\n            return False\n    except (ValueError, ZeroDivisionError):\n        return False\n\n"}
{"task_id": "HumanEval/145", "completion": "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    if not isinstance(nums, list) or any(not isinstance(num, int) for num in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    def calculate_digit_sum(number: int) -> int:\n        return sum(int(digit) for digit in str(number))\n\n    if len(nums) == 0:\n        return []\n\n    nums_with_sums = [(num, calculate_digit_sum(num)) for num in nums]\n    nums_with_sums.sort(key=lambda x: (x[1], nums.index(x[0])))\n\n    return [num for num, _ in nums_with_sums]\n"}
{"task_id": "HumanEval/146", "completion": "def count_special_numbers(numbers):\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list\")\n\n    count = 0\n    for num in numbers:\n        if isinstance(num, int):\n            num_str = str(num)\n            special_digits = ['1', '3', '5', '7', '9']\n            if num > 10 and num_str.startswith(tuple(special_digits)) and num_str.endswith(tuple(special_digits)):\n                count += 1\n        else:\n            raise ValueError(\"List contains non-numeric values\")\n        \n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    Returns the count of triplets where the sum of elements is divisible by 3.\n    \n    Args:\n        n (int): The limit for generating the array.\n        \n    Returns:\n        int: The count of triplets.\n        \n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n should be a positive integer.\")\n        \n    # Generate the array of numbers\n    generated_numbers = [i * i - i + 1 for i in range(1, n+1)]\n    \n    # Initialize the count of triplets\n    triplet_count = 0\n    \n    # Check for triplets whose sum is divisible by 3\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (generated_numbers[i] + generated_numbers[j] + generated_numbers[k]) % 3 == 0:\n                    triplet_count += 1\n    \n    return triplet_count\n"}
{"task_id": "HumanEval/148", "completion": "def get_planets_between(planet1: str, planet2: str) -> tuple:\n    planets = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune']\n    planet1_lower = planet1.lower()\n    planet2_lower = planet2.lower()\n    planet1_idx = planets.index(planet1_lower) if planet1_lower in planets else -1\n    planet2_idx = planets.index(planet2_lower) if planet2_lower in planets else -1\n    \n    if planet1_idx == -1 or planet2_idx == -1:\n        return ()\n    \n    start_idx = min(planet1_idx, planet2_idx)\n    end_idx = max(planet1_idx, planet2_idx)\n    \n    return tuple(planets[start_idx+1:end_idx])\n"}
{"task_id": "HumanEval/149", "completion": "from typing import List\n\ndef filter_even_length_words(words: List[str]) -> List[str]:\n    return [word for word in words if len(word) % 2 == 0]\n\ndef sort_words(words: List[str]) -> List[str]:\n    return sorted(words, key=lambda x: (len(x), x))\n\ndef list_sort(words: List[str]) -> List[str]:\n    even_length_words = filter_even_length_words(words)\n    return sort_words(even_length_words)\n"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    \n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    \n    return primes[n]\n\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    if not isinstance(n, int) or not isinstance(x, int) or not isinstance(y, int):\n        raise ValueError(\"All arguments should be integers.\")\n    \n    if n < 0 or x < 0 or y < 0:\n        raise ValueError(\"All arguments should be non-negative.\")\n    \n    if is_prime(n):\n        return x\n    \n    return y\n"}
{"task_id": "HumanEval/151", "completion": "from typing import List, Union\n\ndef double_the_difference(lst: Union[List[int], List[float]]) -> int:\n    result = 0\n    \n    for num in lst:\n        if isinstance(num, (int, float)) and num > 0 and num % 2 != 0:\n            result += int(num) ** 2\n    \n    return result\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Compare the guesses of game results with the actual scores.\n    \n    Arguments:\n        game (list): List of scores of matches.\n        guess (list): List of guesses for the matches.\n    \n    Returns:\n        list: List of differences between the guesses and scores. If the guess is correct, the difference is 0,\n        otherwise, it is the absolute difference between guess and score.\n    \"\"\"\n    if len(game) != len(guess):\n        raise ValueError(\"Input lists must have the same length\")\n    \n    differences = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        differences.append(diff)\n    \n    return differences"}
{"task_id": "HumanEval/153", "completion": "import re\nfrom typing import List\n\ndef calculate_strength(extension: str) -> int:\n    digit_count = len(re.findall(r'\\d', extension))\n    return digit_count * len(extension) ** 2\n\ndef get_strongest_extension(class_name: str, extensions: List[str]) -> str:\n    if not extensions:\n        raise ValueError(\"No extensions provided\")\n\n    strongest_index = 0\n    \n    for i in range(1, len(extensions)):\n        current_strength = calculate_strength(extensions[i-1])\n        strongest_strength = calculate_strength(extensions[strongest_index])\n        \n        if current_strength > strongest_strength:\n            strongest_index = i - 1\n    \n    return f\"{class_name}.{extensions[strongest_index]}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a: str, b: str) -> bool:\n    if b in a + a:\n        return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num: int) -> tuple:\n    even_count = 0\n    odd_count = 0\n\n    if not isinstance(num, int) or num < 0:\n        raise ValueError(\"Input should be a positive integer\")\n\n    num_str = str(num)\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number: int) -> str:\n    # Input Validation\n    if number <= 0 or number > 1000:\n        raise ValueError(\"Invalid input. Please provide a positive integer between 1 and 1000.\")\n\n    roman_mapping = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    def convert_digit(digit, unit_symbol, five_symbol, ten_symbol):\n        if digit == 9:\n            return unit_symbol + ten_symbol\n        elif digit >= 5:\n            return five_symbol + unit_symbol * (digit - 5)\n        elif digit == 4:\n            return unit_symbol + five_symbol\n        else:\n            return unit_symbol * digit\n\n    mini_roman_numeral = ''\n    for digit in str(number)[::-1]:\n        mini_roman_numeral = convert_digit(int(digit), 'I', 'V', 'X') + mini_roman_numeral\n\n    return mini_roman_numeral.lower()"}
{"task_id": "HumanEval/157", "completion": "import math\n\ndef is_right_angle_triangle(a: int, b: int, c: int) -> bool:\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)):\n        raise ValueError(\"Side lengths should be integers.\")\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Side lengths should be positive integers.\")\n    sides = sorted([a, b, c])\n    return math.isclose(sides[0] ** 2 + sides[1] ** 2, sides[2] ** 2)\n"}
{"task_id": "HumanEval/158", "completion": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "def eat(total_eaten_carrots: int, carrots_needed: int, total_remaining_carrots: int) -> List[int]:\n    if total_remaining_carrots >= carrots_needed:\n        return [total_eaten_carrots + carrots_needed, total_remaining_carrots - carrots_needed]\n    else:\n        return [total_eaten_carrots + total_remaining_carrots, 0]\n"}
{"task_id": "HumanEval/160", "completion": "import math\nfrom typing import List, Union\n\ndef evaluate_expression(operator: List[str], operand: List[Union[int, float]]) -> Union[int, float]:\n    if len(operator) != len(operand):\n        raise ValueError(\"Operator and operand lists must have the same length\")\n    \n    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            if operand[i] == 0:\n                raise ZeroDivisionError(\"Division by zero is not allowed\")\n            result /= operand[i]\n        elif operator[i] == '**':\n            result = math.pow(result, operand[i])\n        else:\n            raise ValueError(\"Invalid operator: {}\".format(operator[i]))\n    \n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s: str) -> str:\n    def transform_character(char: str) -> str:\n        if char.isalpha():\n            return char.swapcase()\n        return char\n\n    result = \"\"\n    for char in s:\n        result += transform_character(char)\n    \n    if not result:\n        result = s[::-1]\n    \n    return result\n\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\nfrom typing import Union\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    if text == '':\n        return None\n    \n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n\n    for num in range(min(a, b), max(a, b) + 1):\n        digits = [int(digit) for digit in str(num) if int(digit) % 2 == 0]\n        even_digits.extend(digits)\n\n    return sorted(even_digits)"}
